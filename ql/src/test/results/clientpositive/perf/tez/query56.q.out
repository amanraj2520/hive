PREHOOK: query: explain
with ss as (
 select i_item_id,sum(ss_ext_sales_price) total_sales
 from
 	store_sales,
 	date_dim,
         customer_address,
         item
 where i_item_id in (select
     i_item_id
from item
where i_color in ('orchid','chiffon','lace'))
 and     ss_item_sk              = i_item_sk
 and     ss_sold_date_sk         = d_date_sk
 and     d_year                  = 2000
 and     d_moy                   = 1
 and     ss_addr_sk              = ca_address_sk
 and     ca_gmt_offset           = -8 
 group by i_item_id),
 cs as (
 select i_item_id,sum(cs_ext_sales_price) total_sales
 from
 	catalog_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from item
where i_color in ('orchid','chiffon','lace'))
 and     cs_item_sk              = i_item_sk
 and     cs_sold_date_sk         = d_date_sk
 and     d_year                  = 2000
 and     d_moy                   = 1
 and     cs_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -8 
 group by i_item_id),
 ws as (
 select i_item_id,sum(ws_ext_sales_price) total_sales
 from
 	web_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from item
where i_color in ('orchid','chiffon','lace'))
 and     ws_item_sk              = i_item_sk
 and     ws_sold_date_sk         = d_date_sk
 and     d_year                  = 2000
 and     d_moy                   = 1
 and     ws_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -8
 group by i_item_id)
  select  i_item_id ,sum(total_sales) total_sales
 from  (select * from ss 
        union all
        select * from cs 
        union all
        select * from ws) tmp1
 group by i_item_id
 order by total_sales
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ss as (
 select i_item_id,sum(ss_ext_sales_price) total_sales
 from
 	store_sales,
 	date_dim,
         customer_address,
         item
 where i_item_id in (select
     i_item_id
from item
where i_color in ('orchid','chiffon','lace'))
 and     ss_item_sk              = i_item_sk
 and     ss_sold_date_sk         = d_date_sk
 and     d_year                  = 2000
 and     d_moy                   = 1
 and     ss_addr_sk              = ca_address_sk
 and     ca_gmt_offset           = -8 
 group by i_item_id),
 cs as (
 select i_item_id,sum(cs_ext_sales_price) total_sales
 from
 	catalog_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from item
where i_color in ('orchid','chiffon','lace'))
 and     cs_item_sk              = i_item_sk
 and     cs_sold_date_sk         = d_date_sk
 and     d_year                  = 2000
 and     d_moy                   = 1
 and     cs_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -8 
 group by i_item_id),
 ws as (
 select i_item_id,sum(ws_ext_sales_price) total_sales
 from
 	web_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from item
where i_color in ('orchid','chiffon','lace'))
 and     ws_item_sk              = i_item_sk
 and     ws_sold_date_sk         = d_date_sk
 and     d_year                  = 2000
 and     d_moy                   = 1
 and     ws_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -8
 group by i_item_id)
  select  i_item_id ,sum(total_sales) total_sales
 from  (select * from ss 
        union all
        select * from cs 
        union all
        select * from ws) tmp1
 group by i_item_id
 order by total_sales
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 3 (BROADCAST_EDGE)
Map 16 <- Map 10 (BROADCAST_EDGE)
Map 17 <- Map 10 (BROADCAST_EDGE)
Map 4 <- Map 10 (BROADCAST_EDGE)
Reducer 12 <- Map 1 (BROADCAST_EDGE), Map 11 (SIMPLE_EDGE), Map 16 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 14 <- Map 1 (BROADCAST_EDGE), Map 11 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 3 <- Map 2 (SIMPLE_EDGE)
Reducer 5 <- Map 1 (BROADCAST_EDGE), Map 11 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 8 <- Union 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_237]
        Limit [LIM_236] (rows=100 width=212)
          Number of rows:100
          Select Operator [SEL_235] (rows=578 width=212)
            Output:["_col0","_col1"]
          <-Reducer 8 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_234]
              Group By Operator [GBY_233] (rows=578 width=212)
                Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
              <-Union 7 [SIMPLE_EDGE]
                <-Reducer 13 [CONTAINS] vectorized
                  Reduce Output Operator [RS_244]
                    PartitionCols:_col0
                    Group By Operator [GBY_243] (rows=578 width=212)
                      Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                      Group By Operator [GBY_242] (rows=578 width=212)
                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                      <-Reducer 12 [SIMPLE_EDGE]
                        SHUFFLE [RS_71]
                          PartitionCols:_col0
                          Group By Operator [GBY_70] (rows=2312 width=212)
                            Output:["_col0","_col1"],aggregations:["sum(_col8)"],keys:_col1
                            Map Join Operator [MAPJOIN_183] (rows=4864779 width=179)
                              Conds:RS_223._col0=SEL_62._col4(Inner),HybridGraceHashJoin:true,Output:["_col1","_col8"]
                            <-Map 1 [BROADCAST_EDGE] vectorized
                              BROADCAST [RS_223]
                                PartitionCols:_col0
                                Map Join Operator [MAPJOIN_221] (rows=17170 width=104)
                                  Conds:SEL_220._col1=RS_218._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1"]
                                <-Reducer 3 [BROADCAST_EDGE] vectorized
                                  BROADCAST [RS_218]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_217] (rows=11550 width=100)
                                      Output:["_col0"],keys:KEY._col0
                                    <-Map 2 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_216]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_215] (rows=11550 width=100)
                                          Output:["_col0"],keys:i_item_id
                                          Select Operator [SEL_214] (rows=23100 width=189)
                                            Output:["i_item_id"]
                                            Filter Operator [FIL_213] (rows=23100 width=189)
                                              predicate:((i_color) IN ('orchid', 'chiffon', 'lace') and i_item_id is not null)
                                              TableScan [TS_3] (rows=462000 width=189)
                                                default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_id","i_color"]
                                <-Select Operator [SEL_220] (rows=462000 width=104)
                                    Output:["_col0","_col1"]
                                    Filter Operator [FIL_219] (rows=462000 width=104)
                                      predicate:(i_item_id is not null and i_item_sk is not null)
                                      TableScan [TS_0] (rows=462000 width=104)
                                        default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_id"]
                            <-Select Operator [SEL_62] (rows=20216883 width=108)
                                Output:["_col4","_col5"]
                                Merge Join Operator [MERGEJOIN_178] (rows=20216883 width=108)
                                  Conds:RS_241._col1=RS_228._col0(Inner),Output:["_col2","_col3"]
                                <-Map 11 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_228]
                                    PartitionCols:_col0
                                    Select Operator [SEL_226] (rows=8000000 width=116)
                                      Output:["_col0"]
                                      Filter Operator [FIL_225] (rows=8000000 width=112)
                                        predicate:((ca_gmt_offset = -8) and ca_address_sk is not null)
                                        TableScan [TS_16] (rows=40000000 width=112)
                                          default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_gmt_offset"]
                                <-Map 16 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_241]
                                    PartitionCols:_col1
                                    Map Join Operator [MAPJOIN_240] (rows=101084409 width=118)
                                      Conds:SEL_239._col0=RS_207._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3"]
                                    <-Map 10 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_207]
                                        PartitionCols:_col0
                                        Select Operator [SEL_205] (rows=652 width=12)
                                          Output:["_col0"]
                                          Filter Operator [FIL_204] (rows=652 width=12)
                                            predicate:((d_moy = 1) and (d_year = 2000) and d_date_sk is not null)
                                            TableScan [TS_13] (rows=73049 width=12)
                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                    <-Select Operator [SEL_239] (rows=285117733 width=123)
                                        Output:["_col0","_col1","_col2","_col3"]
                                        Filter Operator [FIL_238] (rows=285117733 width=123)
                                          predicate:(cs_bill_addr_sk is not null and cs_item_sk is not null and cs_sold_date_sk is not null)
                                          TableScan [TS_47] (rows=287989836 width=123)
                                            default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_addr_sk","cs_item_sk","cs_ext_sales_price"]
                <-Reducer 15 [CONTAINS] vectorized
                  Reduce Output Operator [RS_251]
                    PartitionCols:_col0
                    Group By Operator [GBY_250] (rows=578 width=212)
                      Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                      Group By Operator [GBY_249] (rows=578 width=212)
                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                      <-Reducer 14 [SIMPLE_EDGE]
                        SHUFFLE [RS_109]
                          PartitionCols:_col0
                          Group By Operator [GBY_108] (rows=1734 width=212)
                            Output:["_col0","_col1"],aggregations:["sum(_col8)"],keys:_col1
                            Map Join Operator [MAPJOIN_184] (rows=2473289 width=210)
                              Conds:RS_224._col0=SEL_100._col3(Inner),HybridGraceHashJoin:true,Output:["_col1","_col8"]
                            <-Map 1 [BROADCAST_EDGE] vectorized
                              BROADCAST [RS_224]
                                PartitionCols:_col0
                                 Please refer to the previous Map Join Operator [MAPJOIN_221]
                            <-Select Operator [SEL_100] (rows=10278411 width=115)
                                Output:["_col3","_col5"]
                                Merge Join Operator [MERGEJOIN_181] (rows=10278411 width=115)
                                  Conds:RS_248._col2=RS_229._col0(Inner),Output:["_col1","_col3"]
                                <-Map 11 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_229]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_226]
                                <-Map 17 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_248]
                                    PartitionCols:_col2
                                    Map Join Operator [MAPJOIN_247] (rows=51392053 width=119)
                                      Conds:SEL_246._col0=RS_208._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3"]
                                    <-Map 10 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_208]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_205]
                                    <-Select Operator [SEL_246] (rows=143931246 width=123)
                                        Output:["_col0","_col1","_col2","_col3"]
                                        Filter Operator [FIL_245] (rows=143931246 width=123)
                                          predicate:(ws_bill_addr_sk is not null and ws_item_sk is not null and ws_sold_date_sk is not null)
                                          TableScan [TS_85] (rows=144002668 width=123)
                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                <-Reducer 6 [CONTAINS] vectorized
                  Reduce Output Operator [RS_232]
                    PartitionCols:_col0
                    Group By Operator [GBY_231] (rows=578 width=212)
                      Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                      Group By Operator [GBY_230] (rows=578 width=212)
                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                      <-Reducer 5 [SIMPLE_EDGE]
                        SHUFFLE [RS_34]
                          PartitionCols:_col0
                          Group By Operator [GBY_33] (rows=2312 width=212)
                            Output:["_col0","_col1"],aggregations:["sum(_col8)"],keys:_col1
                            Map Join Operator [MAPJOIN_182] (rows=9027129 width=100)
                              Conds:RS_222._col0=SEL_25._col3(Inner),HybridGraceHashJoin:true,Output:["_col1","_col8"]
                            <-Map 1 [BROADCAST_EDGE] vectorized
                              BROADCAST [RS_222]
                                PartitionCols:_col0
                                 Please refer to the previous Map Join Operator [MAPJOIN_221]
                            <-Select Operator [SEL_25] (rows=37514638 width=45)
                                Output:["_col3","_col5"]
                                Merge Join Operator [MERGEJOIN_175] (rows=37514638 width=45)
                                  Conds:RS_212._col2=RS_227._col0(Inner),Output:["_col1","_col3"]
                                <-Map 11 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_227]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_226]
                                <-Map 4 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_212]
                                    PartitionCols:_col2
                                    Map Join Operator [MAPJOIN_211] (rows=187573187 width=105)
                                      Conds:SEL_210._col0=RS_206._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3"]
                                    <-Map 10 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_206]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_205]
                                    <-Select Operator [SEL_210] (rows=525327191 width=118)
                                        Output:["_col0","_col1","_col2","_col3"]
                                        Filter Operator [FIL_209] (rows=525327191 width=118)
                                          predicate:(ss_addr_sk is not null and ss_item_sk is not null and ss_sold_date_sk is not null)
                                          TableScan [TS_10] (rows=575995635 width=118)
                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_addr_sk","ss_ext_sales_price"]

