PREHOOK: query: explain
with customer_total_return as
(select sr_customer_sk as ctr_customer_sk
,sr_store_sk as ctr_store_sk
,sum(SR_FEE) as ctr_total_return
from store_returns
,date_dim
where sr_returned_date_sk = d_date_sk
and d_year =2000
group by sr_customer_sk
,sr_store_sk)
 select  c_customer_id
from customer_total_return ctr1
,store
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from customer_total_return ctr2
where ctr1.ctr_store_sk = ctr2.ctr_store_sk)
and s_store_sk = ctr1.ctr_store_sk
and s_state = 'NM'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with customer_total_return as
(select sr_customer_sk as ctr_customer_sk
,sr_store_sk as ctr_store_sk
,sum(SR_FEE) as ctr_total_return
from store_returns
,date_dim
where sr_returned_date_sk = d_date_sk
and d_year =2000
group by sr_customer_sk
,sr_store_sk)
 select  c_customer_id
from customer_total_return ctr1
,store
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from customer_total_return ctr2
where ctr1.ctr_store_sk = ctr2.ctr_store_sk)
and s_store_sk = ctr1.ctr_store_sk
and s_state = 'NM'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 6 (BROADCAST_EDGE), Map 9 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (BROADCAST_EDGE)
Reducer 3 <- Map 8 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE), Reducer 5 (BROADCAST_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 1 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 4 vectorized
      File Output Operator [FS_119]
        Limit [LIM_118] (rows=100 width=100)
          Number of rows:100
          Select Operator [SEL_117] (rows=663970 width=100)
            Output:["_col0"]
          <-Reducer 3 [SIMPLE_EDGE]
            SHUFFLE [RS_50]
              Select Operator [SEL_49] (rows=663970 width=100)
                Output:["_col0"]
                Filter Operator [FIL_48] (rows=663970 width=324)
                  predicate:(_col2 > _col7)
                  Map Join Operator [MAPJOIN_81] (rows=1991910 width=324)
                    Conds:MERGEJOIN_79._col1=RS_113._col1(Inner),HybridGraceHashJoin:true,Output:["_col2","_col6","_col7"]
                  <-Reducer 5 [BROADCAST_EDGE] vectorized
                    BROADCAST [RS_113]
                      PartitionCols:_col1
                      Select Operator [SEL_112] (rows=29 width=115)
                        Output:["_col0","_col1"]
                        Group By Operator [GBY_111] (rows=29 width=123)
                          Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","count(_col2)"],keys:_col1
                          Select Operator [SEL_110] (rows=12451353 width=119)
                            Output:["_col1","_col2"]
                            Group By Operator [GBY_109] (rows=12451353 width=119)
                              Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_101]
                                PartitionCols:_col0
                                Group By Operator [GBY_99] (rows=17467258 width=119)
                                  Output:["_col0","_col1","_col2"],aggregations:["sum(_col3)"],keys:_col2, _col1
                                  Map Join Operator [MAPJOIN_97] (rows=17467258 width=107)
                                    Conds:SEL_95._col0=RS_91._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3"]
                                  <-Map 9 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_91]
                                      PartitionCols:_col0
                                      Select Operator [SEL_90] (rows=652 width=8)
                                        Output:["_col0"]
                                        Filter Operator [FIL_89] (rows=652 width=8)
                                          predicate:((d_year = 2000) and d_date_sk is not null)
                                          TableScan [TS_23] (rows=73049 width=8)
                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                  <-Select Operator [SEL_95] (rows=53634860 width=119)
                                      Output:["_col0","_col1","_col2","_col3"]
                                      Filter Operator [FIL_93] (rows=53634860 width=119)
                                        predicate:(sr_returned_date_sk is not null and sr_store_sk is not null)
                                        TableScan [TS_0] (rows=57591150 width=119)
                                          default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_returned_date_sk","sr_customer_sk","sr_store_sk","sr_fee"]
                                        <-Map 6 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_88]
                                            PartitionCols:_col0
                                            Select Operator [SEL_87] (rows=652 width=8)
                                              Output:["_col0"]
                                              Filter Operator [FIL_86] (rows=652 width=8)
                                                predicate:((d_year = 2000) and d_date_sk is not null)
                                                TableScan [TS_3] (rows=73049 width=8)
                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                  <-Merge Join Operator [MERGEJOIN_79] (rows=1923224 width=213)
                      Conds:RS_108._col0=RS_116._col0(Inner),Output:["_col1","_col2","_col6"]
                    <-Map 8 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_116]
                        PartitionCols:_col0
                        Select Operator [SEL_115] (rows=80000000 width=104)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_114] (rows=80000000 width=104)
                            predicate:c_customer_sk is not null
                            TableScan [TS_17] (rows=80000000 width=104)
                              default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_customer_id"]
                    <-Reducer 2 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_108]
                        PartitionCols:_col0
                        Map Join Operator [MAPJOIN_107] (rows=1923224 width=114)
                          Conds:SEL_106._col1=RS_104._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col2"]
                        <-Map 7 [BROADCAST_EDGE] vectorized
                          BROADCAST [RS_104]
                            PartitionCols:_col0
                            Select Operator [SEL_103] (rows=35 width=90)
                              Output:["_col0"]
                              Filter Operator [FIL_102] (rows=35 width=90)
                                predicate:((s_state = 'NM') and s_store_sk is not null)
                                TableScan [TS_14] (rows=1704 width=90)
                                  default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_state"]
                        <-Select Operator [SEL_106] (rows=11601100 width=119)
                            Output:["_col0","_col1","_col2"]
                            Group By Operator [GBY_105] (rows=11601100 width=119)
                              Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_100]
                                PartitionCols:_col0, _col1
                                Group By Operator [GBY_98] (rows=16855704 width=119)
                                  Output:["_col0","_col1","_col2"],aggregations:["sum(_col3)"],keys:_col2, _col1
                                  Map Join Operator [MAPJOIN_96] (rows=16855704 width=107)
                                    Conds:SEL_94._col0=RS_88._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3"]
                                  <- Please refer to the previous Map 6 [BROADCAST_EDGE]
                                  <-Select Operator [SEL_94] (rows=51757026 width=119)
                                      Output:["_col0","_col1","_col2","_col3"]
                                      Filter Operator [FIL_92] (rows=51757026 width=119)
                                        predicate:(sr_customer_sk is not null and sr_returned_date_sk is not null and sr_store_sk is not null)
                                         Please refer to the previous TableScan [TS_0]

