PREHOOK: query: explain
with ssr as
 (select  s_store_id as store_id,
          sum(ss_ext_sales_price) as sales,
          sum(coalesce(sr_return_amt, 0)) as returns,
          sum(ss_net_profit - coalesce(sr_net_loss, 0)) as profit
  from store_sales left outer join store_returns on
         (ss_item_sk = sr_item_sk and ss_ticket_number = sr_ticket_number),
     date_dim,
     store,
     item,
     promotion
 where ss_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date) 
                  and (cast('1998-08-04' as date) +  30 days)
       and ss_store_sk = s_store_sk
       and ss_item_sk = i_item_sk
       and i_current_price > 50
       and ss_promo_sk = p_promo_sk
       and p_channel_tv = 'N'
 group by s_store_id)
 ,
 csr as
 (select  cp_catalog_page_id as catalog_page_id,
          sum(cs_ext_sales_price) as sales,
          sum(coalesce(cr_return_amount, 0)) as returns,
          sum(cs_net_profit - coalesce(cr_net_loss, 0)) as profit
  from catalog_sales left outer join catalog_returns on
         (cs_item_sk = cr_item_sk and cs_order_number = cr_order_number),
     date_dim,
     catalog_page,
     item,
     promotion
 where cs_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
        and cs_catalog_page_sk = cp_catalog_page_sk
       and cs_item_sk = i_item_sk
       and i_current_price > 50
       and cs_promo_sk = p_promo_sk
       and p_channel_tv = 'N'
group by cp_catalog_page_id)
 ,
 wsr as
 (select  web_site_id,
          sum(ws_ext_sales_price) as sales,
          sum(coalesce(wr_return_amt, 0)) as returns,
          sum(ws_net_profit - coalesce(wr_net_loss, 0)) as profit
  from web_sales left outer join web_returns on
         (ws_item_sk = wr_item_sk and ws_order_number = wr_order_number),
     date_dim,
     web_site,
     item,
     promotion
 where ws_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
        and ws_web_site_sk = web_site_sk
       and ws_item_sk = i_item_sk
       and i_current_price > 50
       and ws_promo_sk = p_promo_sk
       and p_channel_tv = 'N'
group by web_site_id)
  select  channel
        , id
        , sum(sales) as sales
        , sum(returns) as returns
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , 'store' || store_id as id
        , sales
        , returns
        , profit
 from   ssr
 union all
 select 'catalog channel' as channel
        , 'catalog_page' || catalog_page_id as id
        , sales
        , returns
        , profit
 from  csr
 union all
 select 'web channel' as channel
        , 'web_site' || web_site_id as id
        , sales
        , returns
        , profit
 from   wsr
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_page
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@promotion
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_returns
PREHOOK: Input: default@web_sales
PREHOOK: Input: default@web_site
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ssr as
 (select  s_store_id as store_id,
          sum(ss_ext_sales_price) as sales,
          sum(coalesce(sr_return_amt, 0)) as returns,
          sum(ss_net_profit - coalesce(sr_net_loss, 0)) as profit
  from store_sales left outer join store_returns on
         (ss_item_sk = sr_item_sk and ss_ticket_number = sr_ticket_number),
     date_dim,
     store,
     item,
     promotion
 where ss_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date) 
                  and (cast('1998-08-04' as date) +  30 days)
       and ss_store_sk = s_store_sk
       and ss_item_sk = i_item_sk
       and i_current_price > 50
       and ss_promo_sk = p_promo_sk
       and p_channel_tv = 'N'
 group by s_store_id)
 ,
 csr as
 (select  cp_catalog_page_id as catalog_page_id,
          sum(cs_ext_sales_price) as sales,
          sum(coalesce(cr_return_amount, 0)) as returns,
          sum(cs_net_profit - coalesce(cr_net_loss, 0)) as profit
  from catalog_sales left outer join catalog_returns on
         (cs_item_sk = cr_item_sk and cs_order_number = cr_order_number),
     date_dim,
     catalog_page,
     item,
     promotion
 where cs_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
        and cs_catalog_page_sk = cp_catalog_page_sk
       and cs_item_sk = i_item_sk
       and i_current_price > 50
       and cs_promo_sk = p_promo_sk
       and p_channel_tv = 'N'
group by cp_catalog_page_id)
 ,
 wsr as
 (select  web_site_id,
          sum(ws_ext_sales_price) as sales,
          sum(coalesce(wr_return_amt, 0)) as returns,
          sum(ws_net_profit - coalesce(wr_net_loss, 0)) as profit
  from web_sales left outer join web_returns on
         (ws_item_sk = wr_item_sk and ws_order_number = wr_order_number),
     date_dim,
     web_site,
     item,
     promotion
 where ws_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
        and ws_web_site_sk = web_site_sk
       and ws_item_sk = i_item_sk
       and i_current_price > 50
       and ws_promo_sk = p_promo_sk
       and p_channel_tv = 'N'
group by web_site_id)
  select  channel
        , id
        , sum(sales) as sales
        , sum(returns) as returns
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , 'store' || store_id as id
        , sales
        , returns
        , profit
 from   ssr
 union all
 select 'catalog channel' as channel
        , 'catalog_page' || catalog_page_id as id
        , sales
        , returns
        , profit
 from  csr
 union all
 select 'web channel' as channel
        , 'web_site' || web_site_id as id
        , sales
        , returns
        , profit
 from   wsr
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_page
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@promotion
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_returns
POSTHOOK: Input: default@web_sales
POSTHOOK: Input: default@web_site
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 11 <- Map 10 (SIMPLE_EDGE), Map 15 (BROADCAST_EDGE), Map 20 (BROADCAST_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 13 <- Map 10 (SIMPLE_EDGE), Map 15 (BROADCAST_EDGE), Map 24 (BROADCAST_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 18 <- Map 17 (SIMPLE_EDGE), Map 19 (SIMPLE_EDGE), Map 9 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE), Map 9 (BROADCAST_EDGE)
Reducer 22 <- Map 21 (SIMPLE_EDGE), Map 23 (SIMPLE_EDGE), Map 9 (BROADCAST_EDGE)
Reducer 3 <- Map 10 (SIMPLE_EDGE), Map 15 (BROADCAST_EDGE), Map 16 (BROADCAST_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_280]
        Limit [LIM_279] (rows=100 width=619)
          Number of rows:100
          Select Operator [SEL_278] (rows=38846 width=619)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_277]
              Select Operator [SEL_276] (rows=38846 width=619)
                Output:["_col0","_col1","_col2","_col3","_col4"]
                Group By Operator [GBY_275] (rows=38846 width=627)
                  Output:["_col0","_col1","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2
                <-Union 5 [SIMPLE_EDGE]
                  <-Reducer 12 [CONTAINS] vectorized
                    Reduce Output Operator [RS_294]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_293] (rows=59581 width=627)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Top N Key Operator [TNK_292] (rows=39721 width=618)
                          keys:_col0, _col1, 0L,sort order:+++,top n:100
                          Select Operator [SEL_291] (rows=38846 width=619)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Group By Operator [GBY_290] (rows=38846 width=436)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0
                            <-Reducer 11 [SIMPLE_EDGE]
                              SHUFFLE [RS_75]
                                PartitionCols:_col0
                                Group By Operator [GBY_74] (rows=271922 width=436)
                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col1)","sum(_col2)","sum(_col3)"],keys:_col0
                                  Select Operator [SEL_72] (rows=5253195 width=293)
                                    Output:["_col0","_col1","_col2","_col3"]
                                    Map Join Operator [MAPJOIN_213] (rows=5253195 width=293)
                                      Conds:MAPJOIN_212._col1=RS_289._col0(Inner),HybridGraceHashJoin:true,Output:["_col5","_col6","_col9","_col10","_col18"]
                                    <-Map 20 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_289]
                                        PartitionCols:_col0
                                        Select Operator [SEL_288] (rows=46000 width=104)
                                          Output:["_col0","_col1"]
                                          Filter Operator [FIL_287] (rows=46000 width=104)
                                            predicate:cp_catalog_page_sk is not null
                                            TableScan [TS_54] (rows=46000 width=104)
                                              default@catalog_page,catalog_page,Tbl:COMPLETE,Col:COMPLETE,Output:["cp_catalog_page_sk","cp_catalog_page_id"]
                                    <-Map Join Operator [MAPJOIN_212] (rows=5253195 width=196)
                                        Conds:MERGEJOIN_211._col3=RS_265._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col5","_col6","_col9","_col10"]
                                      <-Map 15 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_265]
                                          PartitionCols:_col0
                                          Select Operator [SEL_263] (rows=1150 width=89)
                                            Output:["_col0"]
                                            Filter Operator [FIL_262] (rows=1150 width=89)
                                              predicate:((p_channel_tv = 'N') and p_promo_sk is not null)
                                              TableScan [TS_12] (rows=2300 width=89)
                                                default@promotion,promotion,Tbl:COMPLETE,Col:COMPLETE,Output:["p_promo_sk","p_channel_tv"]
                                      <-Merge Join Operator [MERGEJOIN_211] (rows=10506389 width=215)
                                          Conds:RS_63._col2=RS_260._col0(Inner),Output:["_col1","_col3","_col5","_col6","_col9","_col10"]
                                        <-Map 10 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_260]
                                            PartitionCols:_col0
                                            Select Operator [SEL_258] (rows=154000 width=115)
                                              Output:["_col0"]
                                              Filter Operator [FIL_257] (rows=154000 width=115)
                                                predicate:((i_current_price > 50) and i_item_sk is not null)
                                                TableScan [TS_9] (rows=462000 width=115)
                                                  default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_current_price"]
                                        <-Reducer 18 [SIMPLE_EDGE]
                                          SHUFFLE [RS_63]
                                            PartitionCols:_col2
                                            Map Join Operator [MAPJOIN_210] (rows=31519166 width=230)
                                              Conds:MERGEJOIN_209._col0=RS_255._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col5","_col6","_col9","_col10"]
                                            <-Map 9 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_255]
                                                PartitionCols:_col0
                                                Select Operator [SEL_253] (rows=8116 width=98)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_252] (rows=8116 width=98)
                                                    predicate:(CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'1998-08-04 00:00:00' AND TIMESTAMP'1998-09-03 00:00:00' and d_date_sk is not null)
                                                    TableScan [TS_6] (rows=73049 width=98)
                                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date"]
                                            <-Merge Join Operator [MERGEJOIN_209] (rows=283691906 width=383)
                                                Conds:RS_283._col2, _col4=RS_286._col0, _col1(Left Outer),Output:["_col0","_col1","_col2","_col3","_col5","_col6","_col9","_col10"]
                                              <-Map 17 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_283]
                                                  PartitionCols:_col2, _col4
                                                  Select Operator [SEL_282] (rows=283691906 width=243)
                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                                    Filter Operator [FIL_281] (rows=283691906 width=243)
                                                      predicate:(cs_catalog_page_sk is not null and cs_item_sk is not null and cs_promo_sk is not null and cs_sold_date_sk is not null)
                                                      TableScan [TS_39] (rows=287989836 width=243)
                                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_catalog_page_sk","cs_item_sk","cs_promo_sk","cs_order_number","cs_ext_sales_price","cs_net_profit"]
                                              <-Map 19 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_286]
                                                  PartitionCols:_col0, _col1
                                                  Select Operator [SEL_285] (rows=28798881 width=227)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_284] (rows=28798881 width=227)
                                                      predicate:cr_item_sk is not null
                                                      TableScan [TS_42] (rows=28798881 width=227)
                                                        default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_item_sk","cr_order_number","cr_return_amount","cr_net_loss"]
                  <-Reducer 14 [CONTAINS] vectorized
                    Reduce Output Operator [RS_308]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_307] (rows=59581 width=627)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Top N Key Operator [TNK_306] (rows=39721 width=618)
                          keys:_col0, _col1, 0L,sort order:+++,top n:100
                          Select Operator [SEL_305] (rows=53 width=615)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Group By Operator [GBY_304] (rows=53 width=436)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0
                            <-Reducer 13 [SIMPLE_EDGE]
                              SHUFFLE [RS_115]
                                PartitionCols:_col0
                                Group By Operator [GBY_114] (rows=212 width=436)
                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col1)","sum(_col2)","sum(_col3)"],keys:_col0
                                  Select Operator [SEL_112] (rows=2664536 width=322)
                                    Output:["_col0","_col1","_col2","_col3"]
                                    Map Join Operator [MAPJOIN_218] (rows=2664536 width=322)
                                      Conds:MAPJOIN_217._col2=RS_303._col0(Inner),HybridGraceHashJoin:true,Output:["_col5","_col6","_col9","_col10","_col18"]
                                    <-Map 24 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_303]
                                        PartitionCols:_col0
                                        Select Operator [SEL_302] (rows=84 width=104)
                                          Output:["_col0","_col1"]
                                          Filter Operator [FIL_301] (rows=84 width=104)
                                            predicate:web_site_sk is not null
                                            TableScan [TS_94] (rows=84 width=104)
                                              default@web_site,web_site,Tbl:COMPLETE,Col:COMPLETE,Output:["web_site_sk","web_site_id"]
                                    <-Map Join Operator [MAPJOIN_217] (rows=2664536 width=226)
                                        Conds:MERGEJOIN_216._col3=RS_266._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col5","_col6","_col9","_col10"]
                                      <-Map 15 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_266]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_263]
                                      <-Merge Join Operator [MERGEJOIN_216] (rows=5329072 width=313)
                                          Conds:RS_103._col1=RS_261._col0(Inner),Output:["_col2","_col3","_col5","_col6","_col9","_col10"]
                                        <-Map 10 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_261]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_258]
                                        <-Reducer 22 [SIMPLE_EDGE]
                                          SHUFFLE [RS_103]
                                            PartitionCols:_col1
                                            Map Join Operator [MAPJOIN_215] (rows=15987214 width=412)
                                              Conds:MERGEJOIN_214._col0=RS_256._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col5","_col6","_col9","_col10"]
                                            <-Map 9 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_256]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_253]
                                            <-Merge Join Operator [MERGEJOIN_214] (rows=143894769 width=458)
                                                Conds:RS_297._col1, _col4=RS_300._col0, _col1(Left Outer),Output:["_col0","_col1","_col2","_col3","_col5","_col6","_col9","_col10"]
                                              <-Map 21 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_297]
                                                  PartitionCols:_col1, _col4
                                                  Select Operator [SEL_296] (rows=143894769 width=243)
                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                                    Filter Operator [FIL_295] (rows=143894769 width=243)
                                                      predicate:(ws_item_sk is not null and ws_promo_sk is not null and ws_sold_date_sk is not null and ws_web_site_sk is not null)
                                                      TableScan [TS_79] (rows=144002668 width=243)
                                                        default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_web_site_sk","ws_promo_sk","ws_order_number","ws_ext_sales_price","ws_net_profit"]
                                              <-Map 23 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_300]
                                                  PartitionCols:_col0, _col1
                                                  Select Operator [SEL_299] (rows=14398467 width=221)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_298] (rows=14398467 width=221)
                                                      predicate:wr_item_sk is not null
                                                      TableScan [TS_82] (rows=14398467 width=221)
                                                        default@web_returns,web_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["wr_item_sk","wr_order_number","wr_return_amt","wr_net_loss"]
                  <-Reducer 4 [CONTAINS] vectorized
                    Reduce Output Operator [RS_274]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_273] (rows=59581 width=627)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Top N Key Operator [TNK_272] (rows=39721 width=618)
                          keys:_col0, _col1, 0L,sort order:+++,top n:100
                          Select Operator [SEL_271] (rows=822 width=617)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Group By Operator [GBY_270] (rows=822 width=436)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0
                            <-Reducer 3 [SIMPLE_EDGE]
                              SHUFFLE [RS_36]
                                PartitionCols:_col0
                                Group By Operator [GBY_35] (rows=10686 width=436)
                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col1)","sum(_col2)","sum(_col3)"],keys:_col0
                                  Select Operator [SEL_33] (rows=10918960 width=282)
                                    Output:["_col0","_col1","_col2","_col3"]
                                    Map Join Operator [MAPJOIN_208] (rows=10918960 width=282)
                                      Conds:MAPJOIN_207._col2=RS_269._col0(Inner),HybridGraceHashJoin:true,Output:["_col5","_col6","_col9","_col10","_col18"]
                                    <-Map 16 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_269]
                                        PartitionCols:_col0
                                        Select Operator [SEL_268] (rows=1704 width=104)
                                          Output:["_col0","_col1"]
                                          Filter Operator [FIL_267] (rows=1704 width=104)
                                            predicate:s_store_sk is not null
                                            TableScan [TS_15] (rows=1704 width=104)
                                              default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_id"]
                                    <-Map Join Operator [MAPJOIN_207] (rows=10918960 width=182)
                                        Conds:MERGEJOIN_206._col3=RS_264._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col5","_col6","_col9","_col10"]
                                      <-Map 15 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_264]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_263]
                                      <-Merge Join Operator [MERGEJOIN_206] (rows=21837920 width=203)
                                          Conds:RS_24._col1=RS_259._col0(Inner),Output:["_col2","_col3","_col5","_col6","_col9","_col10"]
                                        <-Map 10 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_259]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_258]
                                        <-Reducer 2 [SIMPLE_EDGE]
                                          SHUFFLE [RS_24]
                                            PartitionCols:_col1
                                            Map Join Operator [MAPJOIN_205] (rows=65513756 width=373)
                                              Conds:MERGEJOIN_204._col0=RS_254._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col5","_col6","_col9","_col10"]
                                            <-Map 9 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_254]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_253]
                                            <-Merge Join Operator [MERGEJOIN_204] (rows=589664168 width=454)
                                                Conds:RS_248._col1, _col4=RS_251._col0, _col1(Left Outer),Output:["_col0","_col1","_col2","_col3","_col5","_col6","_col9","_col10"]
                                              <-Map 1 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_248]
                                                  PartitionCols:_col1, _col4
                                                  Select Operator [SEL_247] (rows=501693263 width=233)
                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                                    Filter Operator [FIL_246] (rows=501693263 width=233)
                                                      predicate:(ss_item_sk is not null and ss_promo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                      TableScan [TS_0] (rows=575995635 width=233)
                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_store_sk","ss_promo_sk","ss_ticket_number","ss_ext_sales_price","ss_net_profit"]
                                              <-Map 8 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_251]
                                                  PartitionCols:_col0, _col1
                                                  Select Operator [SEL_250] (rows=57591150 width=224)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_249] (rows=57591150 width=224)
                                                      predicate:sr_item_sk is not null
                                                      TableScan [TS_3] (rows=57591150 width=224)
                                                        default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number","sr_return_amt","sr_net_loss"]

