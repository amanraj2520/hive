Warning: Shuffle Join MERGEJOIN[135][tables = [$hdt$_2, $hdt$_3]] in Stage 'Reducer 6' is a cross product
Warning: Shuffle Join MERGEJOIN[136][tables = [$hdt$_2, $hdt$_3, $hdt$_1]] in Stage 'Reducer 7' is a cross product
PREHOOK: query: explain
select  asceding.rnk, i1.i_product_name best_performing, i2.i_product_name worst_performing
from(select *
     from (select item_sk,rank() over (order by rank_col asc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col 
                 from store_sales ss1
                 where ss_store_sk = 410
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 410
                                                    and ss_hdemo_sk is null
                                                  group by ss_store_sk))V1)V11
     where rnk  < 11) asceding,
    (select *
     from (select item_sk,rank() over (order by rank_col desc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col
                 from store_sales ss1
                 where ss_store_sk = 410
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 410
                                                    and ss_hdemo_sk is null
                                                  group by ss_store_sk))V2)V21
     where rnk  < 11) descending,
item i1,
item i2
where asceding.rnk = descending.rnk 
  and i1.i_item_sk=asceding.item_sk
  and i2.i_item_sk=descending.item_sk
order by asceding.rnk
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  asceding.rnk, i1.i_product_name best_performing, i2.i_product_name worst_performing
from(select *
     from (select item_sk,rank() over (order by rank_col asc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col 
                 from store_sales ss1
                 where ss_store_sk = 410
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 410
                                                    and ss_hdemo_sk is null
                                                  group by ss_store_sk))V1)V11
     where rnk  < 11) asceding,
    (select *
     from (select item_sk,rank() over (order by rank_col desc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col
                 from store_sales ss1
                 where ss_store_sk = 410
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 410
                                                    and ss_hdemo_sk is null
                                                  group by ss_store_sk))V2)V21
     where rnk  < 11) descending,
item i1,
item i2
where asceding.rnk = descending.rnk 
  and i1.i_item_sk=asceding.item_sk
  and i2.i_item_sk=descending.item_sk
order by asceding.rnk
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 14 (BROADCAST_EDGE), Reducer 8 (BROADCAST_EDGE)
Map 14 <- Reducer 9 (BROADCAST_EDGE)
Reducer 11 <- Map 10 (SIMPLE_EDGE)
Reducer 13 <- Map 12 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 4 <- Map 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Reducer 11 (XPROD_EDGE), Reducer 5 (XPROD_EDGE)
Reducer 7 <- Reducer 13 (XPROD_EDGE), Reducer 6 (XPROD_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 7 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 2 vectorized
      File Output Operator [FS_193]
        Limit [LIM_192] (rows=77 width=218)
          Number of rows:100
          Select Operator [SEL_191] (rows=77 width=218)
            Output:["_col0","_col1","_col2"]
          <-Map 1 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_190]
              Select Operator [SEL_189] (rows=77 width=218)
                Output:["_col0","_col1","_col2"]
                Map Join Operator [MAPJOIN_188] (rows=77 width=218)
                  Conds:MAPJOIN_187._col3=RS_184._col3(Inner),HybridGraceHashJoin:true,Output:["_col1","_col3","_col5"]
                <-Map 14 [BROADCAST_EDGE] vectorized
                  BROADCAST [RS_184]
                    PartitionCols:_col3
                    Map Join Operator [MAPJOIN_183] (rows=77 width=111)
                      Conds:SEL_182._col0=RS_180._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col3"]
                    <-Reducer 9 [BROADCAST_EDGE] vectorized
                      BROADCAST [RS_180]
                        PartitionCols:_col0
                        Select Operator [SEL_179] (rows=77 width=8)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_178] (rows=77 width=116)
                            predicate:((rank_window_0 < 11) and _col2 is not null)
                            PTF Operator [PTF_177] (rows=232 width=116)
                              Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col3 DESC NULLS LAST","partition by:":"0"}]
                              Select Operator [SEL_176] (rows=232 width=116)
                                Output:["_col2","_col3"]
                              <-Reducer 7 [SIMPLE_EDGE]
                                SHUFFLE [RS_87]
                                  PartitionCols:0
                                  Filter Operator [FIL_39] (rows=232 width=228)
                                    predicate:(_col3 > (0.9 * _col1))
                                    Merge Join Operator [MERGEJOIN_136] (rows=696 width=228)
                                      Conds:(Inner),Output:["_col1","_col2","_col3"]
                                    <-Reducer 13 [XPROD_EDGE] vectorized
                                      XPROD_EDGE [RS_170]
                                        Select Operator [SEL_169] (rows=696 width=116)
                                          Output:["_col0","_col1"]
                                          Group By Operator [GBY_168] (rows=696 width=124)
                                            Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0
                                          <-Map 12 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_167]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_166] (rows=180264 width=124)
                                                Output:["_col0","_col1","_col2"],aggregations:["sum(ss_net_profit)","count(ss_net_profit)"],keys:ss_item_sk
                                                Select Operator [SEL_165] (rows=6399952 width=114)
                                                  Output:["ss_item_sk","ss_net_profit"]
                                                  Filter Operator [FIL_164] (rows=6399952 width=114)
                                                    predicate:(ss_store_sk = 410)
                                                    TableScan [TS_26] (rows=575995635 width=114)
                                                      default@store_sales,ss1,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_item_sk","ss_store_sk","ss_net_profit"]
                                    <-Reducer 6 [XPROD_EDGE]
                                      XPROD_EDGE [RS_36]
                                        Merge Join Operator [MERGEJOIN_135] (rows=1 width=112)
                                          Conds:(Inner),Output:["_col1"]
                                        <-Reducer 11 [XPROD_EDGE] vectorized
                                          XPROD_EDGE [RS_163]
                                            Select Operator [SEL_162] (rows=1 width=112)
                                              Output:["_col0"]
                                              Group By Operator [GBY_161] (rows=1 width=124)
                                                Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0
                                              <-Map 10 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_160]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_159] (rows=258 width=124)
                                                    Output:["_col0","_col1","_col2"],aggregations:["sum(_col1)","count(_col1)"],keys:410
                                                    Select Operator [SEL_158] (rows=287946 width=114)
                                                      Output:["_col1"]
                                                      Filter Operator [FIL_157] (rows=287946 width=114)
                                                        predicate:((ss_store_sk = 410) and ss_hdemo_sk is null)
                                                        TableScan [TS_18] (rows=575995635 width=114)
                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_hdemo_sk","ss_store_sk","ss_net_profit"]
                                        <-Reducer 5 [XPROD_EDGE] vectorized
                                          XPROD_EDGE [RS_156]
                                            Select Operator [SEL_155] (rows=1 width=8)
                                              Filter Operator [FIL_154] (rows=1 width=8)
                                                predicate:(sq_count_check(_col0) <= 1)
                                                Group By Operator [GBY_153] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                                <-Reducer 4 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_152]
                                                    Group By Operator [GBY_151] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count()"]
                                                      Select Operator [SEL_150] (rows=1 width=4)
                                                        Group By Operator [GBY_149] (rows=1 width=4)
                                                          Output:["_col0"],keys:KEY._col0
                                                        <-Map 3 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_148]
                                                            PartitionCols:_col0
                                                            Group By Operator [GBY_147] (rows=18 width=4)
                                                              Output:["_col0"],keys:410
                                                              Select Operator [SEL_146] (rows=287946 width=7)
                                                                Filter Operator [FIL_145] (rows=287946 width=7)
                                                                  predicate:((ss_store_sk = 410) and ss_hdemo_sk is null)
                                                                  TableScan [TS_3] (rows=575995635 width=7)
                                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_hdemo_sk","ss_store_sk"]
                    <-Select Operator [SEL_182] (rows=462000 width=111)
                        Output:["_col0","_col1"]
                        Filter Operator [FIL_181] (rows=462000 width=111)
                          predicate:i_item_sk is not null
                          TableScan [TS_47] (rows=462000 width=111)
                            default@item,i2,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_product_name"]
                <-Map Join Operator [MAPJOIN_187] (rows=77 width=111)
                    Conds:SEL_186._col0=RS_175._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col3"]
                  <-Reducer 8 [BROADCAST_EDGE] vectorized
                    BROADCAST [RS_175]
                      PartitionCols:_col0
                      Select Operator [SEL_174] (rows=77 width=8)
                        Output:["_col0","_col1"]
                        Filter Operator [FIL_173] (rows=77 width=116)
                          predicate:((rank_window_0 < 11) and _col2 is not null)
                          PTF Operator [PTF_172] (rows=232 width=116)
                            Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col3 ASC NULLS FIRST","partition by:":"0"}]
                            Select Operator [SEL_171] (rows=232 width=116)
                              Output:["_col2","_col3"]
                            <-Reducer 7 [SIMPLE_EDGE]
                              SHUFFLE [RS_40]
                                PartitionCols:0
                                 Please refer to the previous Filter Operator [FIL_39]
                  <-Select Operator [SEL_186] (rows=462000 width=111)
                      Output:["_col0","_col1"]
                      Filter Operator [FIL_185] (rows=462000 width=111)
                        predicate:i_item_sk is not null
                        TableScan [TS_0] (rows=462000 width=111)
                          default@item,i1,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_product_name"]

