PREHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(ss_ext_list_price-ss_ext_discount_amt) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year 
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(ws_ext_list_price-ws_ext_discount_amt) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.c_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.dyear = 2001
         and t_s_secyear.dyear = 2001+1
         and t_w_firstyear.dyear = 2001
         and t_w_secyear.dyear = 2001+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
             > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
 order by t_s_secyear.c_preferred_cust_flag
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(ss_ext_list_price-ss_ext_discount_amt) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year 
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(ws_ext_list_price-ws_ext_discount_amt) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.c_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.dyear = 2001
         and t_s_secyear.dyear = 2001+1
         and t_w_firstyear.dyear = 2001
         and t_w_secyear.dyear = 2001+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
             > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
 order by t_s_secyear.c_preferred_cust_flag
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 10 (BROADCAST_EDGE), Map 16 (BROADCAST_EDGE)
Map 11 <- Map 10 (BROADCAST_EDGE), Map 16 (BROADCAST_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Map 11 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 15 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (ONE_TO_ONE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 6 <- Reducer 13 (SIMPLE_EDGE), Reducer 5 (ONE_TO_ONE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 1 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_221]
        Limit [LIM_220] (rows=100 width=85)
          Number of rows:100
          Select Operator [SEL_219] (rows=80517939 width=85)
            Output:["_col0"]
          <-Reducer 6 [SIMPLE_EDGE]
            SHUFFLE [RS_97]
              Select Operator [SEL_96] (rows=80517939 width=85)
                Output:["_col0"]
                Filter Operator [FIL_95] (rows=80517939 width=533)
                  predicate:CASE WHEN (_col3 is not null) THEN (CASE WHEN (_col5 is not null) THEN (((_col1 / _col5) > (_col8 / _col3))) ELSE ((null > (_col8 / _col3))) END) ELSE (CASE WHEN (_col5 is not null) THEN (((_col1 / _col5) > null)) ELSE (null) END) END
                  Merge Join Operator [MERGEJOIN_172] (rows=161035879 width=533)
                    Conds:RS_92._col2=RS_218._col0(Inner),Output:["_col1","_col3","_col5","_col7","_col8"]
                  <-Reducer 13 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_218]
                      PartitionCols:_col0
                      Select Operator [SEL_217] (rows=187573258 width=297)
                        Output:["_col0","_col1","_col2"]
                        Group By Operator [GBY_216] (rows=187573258 width=764)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                        <-Reducer 12 [SIMPLE_EDGE]
                          SHUFFLE [RS_83]
                            PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                            Group By Operator [GBY_82] (rows=187573258 width=764)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                              Select Operator [SEL_80] (rows=187573258 width=847)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                Merge Join Operator [MERGEJOIN_169] (rows=187573258 width=847)
                                  Conds:RS_204._col1=RS_193._col0(Inner),Output:["_col2","_col3","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                <-Map 17 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_193]
                                    PartitionCols:_col0
                                    Select Operator [SEL_192] (rows=80000000 width=656)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                      Filter Operator [FIL_191] (rows=80000000 width=656)
                                        predicate:(c_customer_id is not null and c_customer_sk is not null)
                                        TableScan [TS_71] (rows=80000000 width=656)
                                          default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_customer_id","c_first_name","c_last_name","c_preferred_cust_flag","c_birth_country","c_login","c_email_address"]
                                <-Map 11 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_204]
                                    PartitionCols:_col1
                                    Map Join Operator [MAPJOIN_202] (rows=187573258 width=199)
                                      Conds:SEL_201._col0=RS_183._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3"]
                                    <-Map 16 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_183]
                                        PartitionCols:_col0
                                        Select Operator [SEL_182] (rows=652 width=8)
                                          Output:["_col0"]
                                          Filter Operator [FIL_181] (rows=652 width=8)
                                            predicate:((d_year = 2002) and d_date_sk is not null)
                                            TableScan [TS_68] (rows=73049 width=8)
                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                    <-Select Operator [SEL_201] (rows=525327388 width=221)
                                        Output:["_col0","_col1","_col2","_col3"]
                                        Filter Operator [FIL_200] (rows=525327388 width=221)
                                          predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                          TableScan [TS_65] (rows=575995635 width=221)
                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_discount_amt","ss_ext_list_price"]
                                          <-Map 10 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_179]
                                              PartitionCols:_col0
                                              Select Operator [SEL_178] (rows=652 width=8)
                                                Output:["_col0"]
                                                Filter Operator [FIL_177] (rows=652 width=8)
                                                  predicate:((d_year = 2001) and d_date_sk is not null)
                                                  TableScan [TS_24] (rows=73049 width=8)
                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                  <-Reducer 5 [ONE_TO_ONE_EDGE]
                    FORWARD [RS_92]
                      PartitionCols:_col2
                      Merge Join Operator [MERGEJOIN_171] (rows=57435371 width=436)
                        Conds:RS_89._col2=RS_215._col0(Inner),Output:["_col1","_col2","_col3","_col5"]
                      <-Reducer 4 [ONE_TO_ONE_EDGE]
                        FORWARD [RS_89]
                          PartitionCols:_col2
                          Merge Join Operator [MERGEJOIN_170] (rows=74767343 width=324)
                            Conds:RS_199._col0=RS_210._col0(Inner),Output:["_col1","_col2","_col3"]
                          <-Reducer 15 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_210]
                              PartitionCols:_col0
                              Select Operator [SEL_209] (rows=62524419 width=212)
                                Output:["_col0","_col1"]
                                Filter Operator [FIL_208] (rows=62524419 width=212)
                                  predicate:(_col7 > 0)
                                  Select Operator [SEL_207] (rows=187573258 width=212)
                                    Output:["_col0","_col7"]
                                    Group By Operator [GBY_206] (rows=187573258 width=764)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                    <-Reducer 14 [SIMPLE_EDGE]
                                      SHUFFLE [RS_39]
                                        PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                        Group By Operator [GBY_38] (rows=187573258 width=764)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                          Select Operator [SEL_36] (rows=187573258 width=847)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                            Merge Join Operator [MERGEJOIN_165] (rows=187573258 width=847)
                                              Conds:RS_205._col1=RS_195._col0(Inner),Output:["_col2","_col3","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                            <-Map 17 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_195]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_192]
                                            <-Map 11 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_205]
                                                PartitionCols:_col1
                                                Map Join Operator [MAPJOIN_203] (rows=187573258 width=199)
                                                  Conds:SEL_201._col0=RS_179._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3"]
                                                <-Map 10 [BROADCAST_EDGE] vectorized
                                                   Please refer to the previous BROADCAST [RS_179]
                                                   Please refer to the previous Select Operator [SEL_201]
                          <-Reducer 3 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_199]
                              PartitionCols:_col0
                              Select Operator [SEL_198] (rows=51391963 width=212)
                                Output:["_col0","_col1"]
                                Group By Operator [GBY_197] (rows=51391963 width=764)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_18]
                                    PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                    Group By Operator [GBY_17] (rows=51391963 width=764)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                      Select Operator [SEL_15] (rows=51391963 width=875)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                        Merge Join Operator [MERGEJOIN_163] (rows=51391963 width=875)
                                          Conds:RS_189._col1=RS_194._col0(Inner),Output:["_col2","_col3","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                        <-Map 17 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_194]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_192]
                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_189]
                                            PartitionCols:_col1
                                            Map Join Operator [MAPJOIN_187] (rows=51391963 width=227)
                                              Conds:SEL_186._col0=RS_184._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3"]
                                            <-Map 16 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_184]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_182]
                                            <-Select Operator [SEL_186] (rows=143930993 width=231)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                Filter Operator [FIL_185] (rows=143930993 width=231)
                                                  predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                                  TableScan [TS_0] (rows=144002668 width=231)
                                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_ext_discount_amt","ws_ext_list_price"]
                      <-Reducer 9 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_215]
                          PartitionCols:_col0
                          Select Operator [SEL_214] (rows=17130654 width=212)
                            Output:["_col0","_col1"]
                            Filter Operator [FIL_213] (rows=17130654 width=212)
                              predicate:(_col7 > 0)
                              Select Operator [SEL_212] (rows=51391963 width=212)
                                Output:["_col0","_col7"]
                                Group By Operator [GBY_211] (rows=51391963 width=764)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                <-Reducer 8 [SIMPLE_EDGE]
                                  SHUFFLE [RS_61]
                                    PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                    Group By Operator [GBY_60] (rows=51391963 width=764)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                      Select Operator [SEL_58] (rows=51391963 width=875)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                        Merge Join Operator [MERGEJOIN_167] (rows=51391963 width=875)
                                          Conds:RS_190._col1=RS_196._col0(Inner),Output:["_col2","_col3","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                        <-Map 17 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_196]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_192]
                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_190]
                                            PartitionCols:_col1
                                            Map Join Operator [MAPJOIN_188] (rows=51391963 width=227)
                                              Conds:SEL_186._col0=RS_180._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3"]
                                            <-Map 10 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_180]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_178]
                                               Please refer to the previous Select Operator [SEL_186]

