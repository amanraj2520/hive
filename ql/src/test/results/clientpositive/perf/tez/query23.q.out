Warning: Shuffle Join MERGEJOIN[381][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 12' is a cross product
Warning: Shuffle Join MERGEJOIN[395][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 13' is a cross product
Warning: Shuffle Join MERGEJOIN[384][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 18' is a cross product
Warning: Shuffle Join MERGEJOIN[404][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 19' is a cross product
PREHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 2 (BROADCAST_EDGE), Reducer 5 (BROADCAST_EDGE)
Map 27 <- Map 2 (BROADCAST_EDGE), Reducer 5 (BROADCAST_EDGE)
Map 3 <- Map 6 (BROADCAST_EDGE)
Map 8 <- Map 21 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (XPROD_EDGE), Reducer 16 (XPROD_EDGE)
Reducer 13 <- Map 1 (BROADCAST_EDGE), Reducer 12 (XPROD_EDGE), Reducer 24 (XPROD_EDGE), Union 14 (CONTAINS)
Reducer 15 <- Union 14 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Reducer 10 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Reducer 10 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (XPROD_EDGE), Reducer 20 (XPROD_EDGE)
Reducer 19 <- Map 27 (BROADCAST_EDGE), Reducer 18 (XPROD_EDGE), Reducer 25 (XPROD_EDGE), Union 14 (CONTAINS)
Reducer 20 <- Reducer 10 (CUSTOM_SIMPLE_EDGE)
Reducer 23 <- Map 22 (SIMPLE_EDGE), Map 26 (SIMPLE_EDGE)
Reducer 24 <- Reducer 23 (SIMPLE_EDGE)
Reducer 25 <- Reducer 23 (SIMPLE_EDGE)
Reducer 4 <- Map 3 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 9 <- Map 26 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 15 vectorized
      File Output Operator [FS_478]
        Limit [LIM_477] (rows=1 width=112)
          Number of rows:100
          Group By Operator [GBY_476] (rows=1 width=112)
            Output:["_col0"],aggregations:["sum(VALUE._col0)"]
          <-Union 14 [CUSTOM_SIMPLE_EDGE]
            <-Reducer 13 [CONTAINS]
              Reduce Output Operator [RS_403]
                Group By Operator [GBY_402] (rows=1 width=112)
                  Output:["_col0"],aggregations:["sum(_col0)"]
                  Select Operator [SEL_400] (rows=1 width=112)
                    Output:["_col0"]
                    Map Join Operator [MAPJOIN_398] (rows=1 width=116)
                      Conds:RS_470._col1=SEL_399._col0(Inner),HybridGraceHashJoin:true,Output:["_col3","_col4"]
                    <-Map 1 [BROADCAST_EDGE] vectorized
                      BROADCAST [RS_470]
                        PartitionCols:_col1
                        Map Join Operator [MAPJOIN_469] (rows=1260 width=0)
                          Conds:MAPJOIN_468._col2=RS_464._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col3","_col4"]
                        <-Reducer 5 [BROADCAST_EDGE] vectorized
                          BROADCAST [RS_464]
                            PartitionCols:_col0
                            Group By Operator [GBY_463] (rows=712 width=4)
                              Output:["_col0"],keys:_col1
                              Select Operator [SEL_462] (rows=6548799 width=12)
                                Output:["_col1"]
                                Filter Operator [FIL_461] (rows=6548799 width=12)
                                  predicate:(_col3 > 4L)
                                  Select Operator [SEL_460] (rows=19646398 width=12)
                                    Output:["_col0","_col3"]
                                    Group By Operator [GBY_459] (rows=19646398 width=290)
                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 4 [SIMPLE_EDGE]
                                      SHUFFLE [RS_24]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_23] (rows=19646398 width=290)
                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                          Select Operator [SEL_21] (rows=19646398 width=282)
                                            Output:["_col0","_col1","_col2"]
                                            Merge Join Operator [MERGEJOIN_365] (rows=19646398 width=282)
                                              Conds:RS_455._col1=RS_458._col0(Inner),Output:["_col3","_col5","_col6"]
                                            <-Map 3 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_455]
                                                PartitionCols:_col1
                                                Map Join Operator [MAPJOIN_454] (rows=19646398 width=98)
                                                  Conds:SEL_453._col0=RS_451._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col3"]
                                                <-Map 6 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_451]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_450] (rows=2609 width=102)
                                                      Output:["_col0","_col1"]
                                                      Filter Operator [FIL_449] (rows=2609 width=102)
                                                        predicate:((d_year) IN (1999, 2000, 2001, 2002) and d_date_sk is not null)
                                                        TableScan [TS_9] (rows=73049 width=102)
                                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date","d_year"]
                                                <-Select Operator [SEL_453] (rows=550076554 width=7)
                                                    Output:["_col0","_col1"]
                                                    Filter Operator [FIL_452] (rows=550076554 width=7)
                                                      predicate:(ss_item_sk is not null and ss_sold_date_sk is not null)
                                                      TableScan [TS_6] (rows=575995635 width=7)
                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                            <-Map 7 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_458]
                                                PartitionCols:_col0
                                                Select Operator [SEL_457] (rows=462000 width=188)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_456] (rows=462000 width=188)
                                                    predicate:i_item_sk is not null
                                                    TableScan [TS_12] (rows=462000 width=188)
                                                      default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_desc"]
                        <-Map Join Operator [MAPJOIN_468] (rows=101084444 width=122)
                            Conds:SEL_467._col0=RS_447._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4"]
                          <-Map 2 [BROADCAST_EDGE] vectorized
                            BROADCAST [RS_447]
                              PartitionCols:_col0
                              Select Operator [SEL_446] (rows=652 width=12)
                                Output:["_col0"]
                                Filter Operator [FIL_445] (rows=652 width=12)
                                  predicate:((d_moy = 1) and (d_year = 1999) and d_date_sk is not null)
                                  TableScan [TS_3] (rows=73049 width=12)
                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                          <-Select Operator [SEL_467] (rows=285117831 width=127)
                              Output:["_col0","_col1","_col2","_col3","_col4"]
                              Filter Operator [FIL_466] (rows=285117831 width=127)
                                predicate:(cs_bill_customer_sk is not null and cs_item_sk is not null and cs_sold_date_sk is not null)
                                TableScan [TS_0] (rows=287989836 width=127)
                                  default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_quantity","cs_list_price"]
                    <-Select Operator [SEL_399] (rows=450644 width=4)
                        Output:["_col0"]
                        Filter Operator [FIL_397] (rows=450644 width=228)
                          predicate:(_col3 > (0.95 * _col1))
                          Merge Join Operator [MERGEJOIN_395] (rows=1351933 width=228)
                            Conds:(Inner),Output:["_col1","_col2","_col3"]
                          <-Reducer 12 [XPROD_EDGE]
                            XPROD_EDGE [RS_111]
                              Merge Join Operator [MERGEJOIN_381] (rows=1 width=112)
                                Conds:(Inner),Output:["_col1"]
                              <-Reducer 11 [XPROD_EDGE] vectorized
                                XPROD_EDGE [RS_442]
                                  Select Operator [SEL_441] (rows=1 width=8)
                                    Filter Operator [FIL_440] (rows=1 width=8)
                                      predicate:(sq_count_check(_col0) <= 1)
                                      Group By Operator [GBY_439] (rows=1 width=8)
                                        Output:["_col0"],aggregations:["count()"]
                                        Select Operator [SEL_438] (rows=1 width=8)
                                          Group By Operator [GBY_437] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                          <-Reducer 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_433]
                                              Group By Operator [GBY_429] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count(_col0)"]
                                                Select Operator [SEL_425] (rows=10815 width=116)
                                                  Output:["_col0"]
                                                  Group By Operator [GBY_424] (rows=10815 width=116)
                                                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                                  <-Reducer 9 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_51]
                                                      PartitionCols:_col0
                                                      Group By Operator [GBY_50] (rows=10815 width=116)
                                                        Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                                        Select Operator [SEL_48] (rows=18762463 width=4)
                                                          Output:["_col0","_col1"]
                                                          Merge Join Operator [MERGEJOIN_367] (rows=18762463 width=4)
                                                            Conds:RS_419._col1=RS_423._col0(Inner),Output:["_col2","_col3","_col6"]
                                                          <-Map 26 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_423]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_421] (rows=80000000 width=4)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_420] (rows=80000000 width=4)
                                                                  predicate:c_customer_sk is not null
                                                                  TableScan [TS_96] (rows=80000000 width=4)
                                                                    default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk"]
                                                          <-Map 8 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_419]
                                                              PartitionCols:_col1
                                                              Map Join Operator [MAPJOIN_418] (rows=18762463 width=0)
                                                                Conds:SEL_417._col0=RS_415._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3"]
                                                              <-Map 21 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_415]
                                                                  PartitionCols:_col0
                                                                  Select Operator [SEL_414] (rows=2609 width=8)
                                                                    Output:["_col0"]
                                                                    Filter Operator [FIL_413] (rows=2609 width=8)
                                                                      predicate:((d_year) IN (1999, 2000, 2001, 2002) and d_date_sk is not null)
                                                                      TableScan [TS_36] (rows=73049 width=8)
                                                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                              <-Select Operator [SEL_417] (rows=525327388 width=118)
                                                                  Output:["_col0","_col1","_col2","_col3"]
                                                                  Filter Operator [FIL_416] (rows=525327388 width=118)
                                                                    predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                                    TableScan [TS_33] (rows=575995635 width=118)
                                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_quantity","ss_sales_price"]
                              <-Reducer 16 [XPROD_EDGE] vectorized
                                XPROD_EDGE [RS_444]
                                  Group By Operator [GBY_443] (rows=1 width=112)
                                    Output:["_col0"],aggregations:["max(VALUE._col0)"]
                                  <-Reducer 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_434]
                                      Group By Operator [GBY_430] (rows=1 width=112)
                                        Output:["_col0"],aggregations:["max(_col1)"]
                                        Select Operator [SEL_426] (rows=10815 width=116)
                                          Output:["_col1"]
                                           Please refer to the previous Group By Operator [GBY_424]
                          <-Reducer 24 [XPROD_EDGE] vectorized
                            XPROD_EDGE [RS_475]
                              Group By Operator [GBY_474] (rows=1351933 width=116)
                                Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                              <-Reducer 23 [SIMPLE_EDGE]
                                SHUFFLE [RS_105]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_104] (rows=550080312 width=116)
                                    Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                    Select Operator [SEL_102] (rows=550080312 width=114)
                                      Output:["_col0","_col1"]
                                      Merge Join Operator [MERGEJOIN_370] (rows=550080312 width=114)
                                        Conds:RS_473._col0=RS_422._col0(Inner),Output:["_col1","_col2","_col3"]
                                      <-Map 26 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_422]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_421]
                                      <-Map 22 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_473]
                                          PartitionCols:_col0
                                          Select Operator [SEL_472] (rows=550080312 width=114)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_471] (rows=550080312 width=114)
                                              predicate:ss_customer_sk is not null
                                              TableScan [TS_93] (rows=575995635 width=114)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_customer_sk","ss_quantity","ss_sales_price"]
            <-Reducer 19 [CONTAINS]
              Reduce Output Operator [RS_412]
                Group By Operator [GBY_411] (rows=1 width=112)
                  Output:["_col0"],aggregations:["sum(_col0)"]
                  Select Operator [SEL_409] (rows=1 width=112)
                    Output:["_col0"]
                    Map Join Operator [MAPJOIN_407] (rows=1 width=116)
                      Conds:RS_493._col2=SEL_408._col0(Inner),HybridGraceHashJoin:true,Output:["_col3","_col4"]
                    <-Map 27 [BROADCAST_EDGE] vectorized
                      BROADCAST [RS_493]
                        PartitionCols:_col2
                        Map Join Operator [MAPJOIN_492] (rows=641 width=0)
                          Conds:MAPJOIN_491._col1=RS_465._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col3","_col4"]
                        <-Reducer 5 [BROADCAST_EDGE] vectorized
                          BROADCAST [RS_465]
                            PartitionCols:_col0
                             Please refer to the previous Group By Operator [GBY_463]
                        <-Map Join Operator [MAPJOIN_491] (rows=51391963 width=123)
                            Conds:SEL_490._col0=RS_448._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4"]
                          <-Map 2 [BROADCAST_EDGE] vectorized
                            BROADCAST [RS_448]
                              PartitionCols:_col0
                               Please refer to the previous Select Operator [SEL_446]
                          <-Select Operator [SEL_490] (rows=143930993 width=127)
                              Output:["_col0","_col1","_col2","_col3","_col4"]
                              Filter Operator [FIL_489] (rows=143930993 width=127)
                                predicate:(ws_bill_customer_sk is not null and ws_item_sk is not null and ws_sold_date_sk is not null)
                                TableScan [TS_126] (rows=144002668 width=127)
                                  default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_customer_sk","ws_quantity","ws_list_price"]
                    <-Select Operator [SEL_408] (rows=450644 width=4)
                        Output:["_col0"]
                        Filter Operator [FIL_406] (rows=450644 width=228)
                          predicate:(_col3 > (0.95 * _col1))
                          Merge Join Operator [MERGEJOIN_404] (rows=1351933 width=228)
                            Conds:(Inner),Output:["_col1","_col2","_col3"]
                          <-Reducer 18 [XPROD_EDGE]
                            XPROD_EDGE [RS_237]
                              Merge Join Operator [MERGEJOIN_384] (rows=1 width=112)
                                Conds:(Inner),Output:["_col1"]
                              <-Reducer 17 [XPROD_EDGE] vectorized
                                XPROD_EDGE [RS_484]
                                  Select Operator [SEL_483] (rows=1 width=8)
                                    Filter Operator [FIL_482] (rows=1 width=8)
                                      predicate:(sq_count_check(_col0) <= 1)
                                      Group By Operator [GBY_481] (rows=1 width=8)
                                        Output:["_col0"],aggregations:["count()"]
                                        Select Operator [SEL_480] (rows=1 width=8)
                                          Group By Operator [GBY_479] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                          <-Reducer 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_435]
                                              Group By Operator [GBY_431] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count(_col0)"]
                                                Select Operator [SEL_427] (rows=10815 width=116)
                                                  Output:["_col0"]
                                                   Please refer to the previous Group By Operator [GBY_424]
                              <-Reducer 20 [XPROD_EDGE] vectorized
                                XPROD_EDGE [RS_486]
                                  Group By Operator [GBY_485] (rows=1 width=112)
                                    Output:["_col0"],aggregations:["max(VALUE._col0)"]
                                  <-Reducer 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_436]
                                      Group By Operator [GBY_432] (rows=1 width=112)
                                        Output:["_col0"],aggregations:["max(_col1)"]
                                        Select Operator [SEL_428] (rows=10815 width=116)
                                          Output:["_col1"]
                                           Please refer to the previous Group By Operator [GBY_424]
                          <-Reducer 25 [XPROD_EDGE] vectorized
                            XPROD_EDGE [RS_488]
                              Group By Operator [GBY_487] (rows=1351933 width=116)
                                Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                              <-Reducer 23 [SIMPLE_EDGE]
                                SHUFFLE [RS_231]
                                  PartitionCols:_col0
                                   Please refer to the previous Group By Operator [GBY_104]

