PREHOOK: query: explain
select 
	s_store_name,
	i_item_desc,
	sc.revenue,
	i_current_price,
	i_wholesale_cost,
	i_brand
 from store, item,
     (select ss_store_sk, avg(revenue) as ave
 	from
 	    (select  ss_store_sk, ss_item_sk, 
 		     sum(ss_sales_price) as revenue
 		from store_sales, date_dim
 		where ss_sold_date_sk = d_date_sk and d_month_seq between 1212 and 1212+11
 		group by ss_store_sk, ss_item_sk) sa
 	group by ss_store_sk) sb,
     (select  ss_store_sk, ss_item_sk, sum(ss_sales_price) as revenue
 	from store_sales, date_dim
 	where ss_sold_date_sk = d_date_sk and d_month_seq between 1212 and 1212+11
 	group by ss_store_sk, ss_item_sk) sc
 where sb.ss_store_sk = sc.ss_store_sk and 
       sc.revenue <= 0.1 * sb.ave and
       s_store_sk = sc.ss_store_sk and
       i_item_sk = sc.ss_item_sk
 order by s_store_name, i_item_desc
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select 
	s_store_name,
	i_item_desc,
	sc.revenue,
	i_current_price,
	i_wholesale_cost,
	i_brand
 from store, item,
     (select ss_store_sk, avg(revenue) as ave
 	from
 	    (select  ss_store_sk, ss_item_sk, 
 		     sum(ss_sales_price) as revenue
 		from store_sales, date_dim
 		where ss_sold_date_sk = d_date_sk and d_month_seq between 1212 and 1212+11
 		group by ss_store_sk, ss_item_sk) sa
 	group by ss_store_sk) sb,
     (select  ss_store_sk, ss_item_sk, sum(ss_sales_price) as revenue
 	from store_sales, date_dim
 	where ss_sold_date_sk = d_date_sk and d_month_seq between 1212 and 1212+11
 	group by ss_store_sk, ss_item_sk) sc
 where sb.ss_store_sk = sc.ss_store_sk and 
       sc.revenue <= 0.1 * sb.ave and
       s_store_sk = sc.ss_store_sk and
       i_item_sk = sc.ss_item_sk
 order by s_store_name, i_item_desc
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 4 (BROADCAST_EDGE)
Map 6 <- Reducer 2 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 5 (BROADCAST_EDGE), Reducer 3 (BROADCAST_EDGE)
Reducer 3 <- Map 1 (SIMPLE_EDGE)
Reducer 7 <- Map 6 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_113]
        Limit [LIM_112] (rows=100 width=705)
          Number of rows:100
          Select Operator [SEL_111] (rows=61787 width=703)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Map 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_110]
              Select Operator [SEL_109] (rows=61787 width=703)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Map Join Operator [MAPJOIN_108] (rows=61787 width=703)
                  Conds:RS_106._col1=SEL_107._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col6","_col8","_col9","_col10","_col11"]
                <-Reducer 2 [BROADCAST_EDGE] vectorized
                  BROADCAST [RS_106]
                    PartitionCols:_col1
                    Map Join Operator [MAPJOIN_105] (rows=61787 width=204)
                      Conds:FIL_104._col0=RS_101._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col6"]
                    <-Map 5 [BROADCAST_EDGE] vectorized
                      BROADCAST [RS_101]
                        PartitionCols:_col0
                        Select Operator [SEL_100] (rows=1704 width=92)
                          Output:["_col0","_col1"]
                          TableScan [TS_33] (rows=1704 width=92)
                            default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_name"]
                    <-Filter Operator [FIL_104] (rows=61787 width=231)
                        predicate:(_col2 <= _col4)
                        Map Join Operator [MAPJOIN_103] (rows=185361 width=231)
                          Conds:GBY_102._col0=RS_99._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col2","_col4"]
                        <-Reducer 3 [BROADCAST_EDGE] vectorized
                          BROADCAST [RS_99]
                            PartitionCols:_col0
                            Select Operator [SEL_98] (rows=16 width=115)
                              Output:["_col0","_col1"]
                              Group By Operator [GBY_97] (rows=16 width=123)
                                Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","count(_col2)"],keys:_col1
                                Select Operator [SEL_96] (rows=173776 width=118)
                                  Output:["_col1","_col2"]
                                  Group By Operator [GBY_95] (rows=173776 width=118)
                                    Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_94]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_92] (rows=5734608 width=118)
                                        Output:["_col0","_col1","_col2"],aggregations:["sum(_col3)"],keys:_col2, _col1
                                        Map Join Operator [MAPJOIN_91] (rows=91197860 width=89)
                                          Conds:SEL_90._col0=RS_88._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3"]
                                        <-Map 4 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_88]
                                            PartitionCols:_col0
                                            Select Operator [SEL_87] (rows=317 width=4)
                                              Output:["_col0"]
                                              Filter Operator [FIL_86] (rows=317 width=8)
                                                predicate:d_month_seq BETWEEN 1212 AND 1223
                                                TableScan [TS_3] (rows=73049 width=8)
                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_month_seq"]
                                        <-Select Operator [SEL_90] (rows=525329897 width=118)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Filter Operator [FIL_89] (rows=525329897 width=118)
                                              predicate:(ss_sold_date_sk is not null and ss_store_sk is not null)
                                              TableScan [TS_0] (rows=575995635 width=118)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_store_sk","ss_sales_price"]
                        <-Group By Operator [GBY_102] (rows=173776 width=118)
                            Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                          <-Map 1 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_93]
                              PartitionCols:_col0, _col1
                               Please refer to the previous Group By Operator [GBY_92]
                <-Select Operator [SEL_107] (rows=462000 width=511)
                    Output:["_col0","_col1","_col2","_col3","_col4"]
                    TableScan [TS_35] (rows=462000 width=511)
                      default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_desc","i_current_price","i_wholesale_cost","i_brand"]

