PREHOOK: query: explain
with ssr as
 (select s_store_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as returns,
        sum(net_loss) as profit_loss
 from
  ( select  ss_store_sk as store_sk,
            ss_sold_date_sk  as date_sk,
            ss_ext_sales_price as sales_price,
            ss_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from store_sales
    union all
    select sr_store_sk as store_sk,
           sr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           sr_return_amt as return_amt,
           sr_net_loss as net_loss
    from store_returns
   ) salesreturns,
     date_dim,
     store
 where date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date) 
                  and (cast('1998-08-04' as date) +  14 days)
       and store_sk = s_store_sk
 group by s_store_id)
 ,
 csr as
 (select cp_catalog_page_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as returns,
        sum(net_loss) as profit_loss
 from
  ( select  cs_catalog_page_sk as page_sk,
            cs_sold_date_sk  as date_sk,
            cs_ext_sales_price as sales_price,
            cs_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from catalog_sales
    union all
    select cr_catalog_page_sk as page_sk,
           cr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           cr_return_amount as return_amt,
           cr_net_loss as net_loss
    from catalog_returns
   ) salesreturns,
     date_dim,
     catalog_page
 where date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  14 days)
       and page_sk = cp_catalog_page_sk
 group by cp_catalog_page_id)
 ,
 wsr as
 (select web_site_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as returns,
        sum(net_loss) as profit_loss
 from
  ( select  ws_web_site_sk as wsr_web_site_sk,
            ws_sold_date_sk  as date_sk,
            ws_ext_sales_price as sales_price,
            ws_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from web_sales
    union all
    select ws_web_site_sk as wsr_web_site_sk,
           wr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           wr_return_amt as return_amt,
           wr_net_loss as net_loss
    from web_returns left outer join web_sales on
         ( wr_item_sk = ws_item_sk
           and wr_order_number = ws_order_number)
   ) salesreturns,
     date_dim,
     web_site
 where date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  14 days)
       and wsr_web_site_sk = web_site_sk
 group by web_site_id)
  select  channel
        , id
        , sum(sales) as sales
        , sum(returns) as returns
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , 'store' || s_store_id as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from   ssr
 union all
 select 'catalog channel' as channel
        , 'catalog_page' || cp_catalog_page_id as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from  csr
 union all
 select 'web channel' as channel
        , 'web_site' || web_site_id as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from   wsr
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_page
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_returns
PREHOOK: Input: default@web_sales
PREHOOK: Input: default@web_site
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ssr as
 (select s_store_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as returns,
        sum(net_loss) as profit_loss
 from
  ( select  ss_store_sk as store_sk,
            ss_sold_date_sk  as date_sk,
            ss_ext_sales_price as sales_price,
            ss_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from store_sales
    union all
    select sr_store_sk as store_sk,
           sr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           sr_return_amt as return_amt,
           sr_net_loss as net_loss
    from store_returns
   ) salesreturns,
     date_dim,
     store
 where date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date) 
                  and (cast('1998-08-04' as date) +  14 days)
       and store_sk = s_store_sk
 group by s_store_id)
 ,
 csr as
 (select cp_catalog_page_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as returns,
        sum(net_loss) as profit_loss
 from
  ( select  cs_catalog_page_sk as page_sk,
            cs_sold_date_sk  as date_sk,
            cs_ext_sales_price as sales_price,
            cs_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from catalog_sales
    union all
    select cr_catalog_page_sk as page_sk,
           cr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           cr_return_amount as return_amt,
           cr_net_loss as net_loss
    from catalog_returns
   ) salesreturns,
     date_dim,
     catalog_page
 where date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  14 days)
       and page_sk = cp_catalog_page_sk
 group by cp_catalog_page_id)
 ,
 wsr as
 (select web_site_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as returns,
        sum(net_loss) as profit_loss
 from
  ( select  ws_web_site_sk as wsr_web_site_sk,
            ws_sold_date_sk  as date_sk,
            ws_ext_sales_price as sales_price,
            ws_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from web_sales
    union all
    select ws_web_site_sk as wsr_web_site_sk,
           wr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           wr_return_amt as return_amt,
           wr_net_loss as net_loss
    from web_returns left outer join web_sales on
         ( wr_item_sk = ws_item_sk
           and wr_order_number = ws_order_number)
   ) salesreturns,
     date_dim,
     web_site
 where date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  14 days)
       and wsr_web_site_sk = web_site_sk
 group by web_site_id)
  select  channel
        , id
        , sum(sales) as sales
        , sum(returns) as returns
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , 'store' || s_store_id as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from   ssr
 union all
 select 'catalog channel' as channel
        , 'catalog_page' || cp_catalog_page_id as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from  csr
 union all
 select 'web channel' as channel
        , 'web_site' || web_site_id as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from   wsr
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_page
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_returns
POSTHOOK: Input: default@web_sales
POSTHOOK: Input: default@web_site
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 8 (BROADCAST_EDGE), Map 9 (BROADCAST_EDGE), Union 2 (CONTAINS)
Map 10 <- Map 14 (BROADCAST_EDGE), Map 8 (BROADCAST_EDGE), Union 11 (CONTAINS)
Map 13 <- Map 14 (BROADCAST_EDGE), Map 8 (BROADCAST_EDGE), Union 11 (CONTAINS)
Map 15 <- Map 21 (BROADCAST_EDGE), Map 8 (BROADCAST_EDGE), Union 16 (CONTAINS)
Map 7 <- Map 8 (BROADCAST_EDGE), Map 9 (BROADCAST_EDGE), Union 2 (CONTAINS)
Reducer 12 <- Union 11 (SIMPLE_EDGE), Union 4 (CONTAINS)
Reducer 17 <- Union 16 (SIMPLE_EDGE), Union 4 (CONTAINS)
Reducer 19 <- Map 18 (SIMPLE_EDGE), Map 20 (SIMPLE_EDGE), Map 21 (BROADCAST_EDGE), Map 8 (BROADCAST_EDGE), Union 16 (CONTAINS)
Reducer 3 <- Union 2 (SIMPLE_EDGE), Union 4 (CONTAINS)
Reducer 5 <- Union 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_252]
        Limit [LIM_251] (rows=100 width=619)
          Number of rows:100
          Select Operator [SEL_250] (rows=38846 width=619)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Reducer 5 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_249]
              Select Operator [SEL_248] (rows=38846 width=619)
                Output:["_col0","_col1","_col2","_col3","_col4"]
                Group By Operator [GBY_247] (rows=38846 width=627)
                  Output:["_col0","_col1","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2
                <-Union 4 [SIMPLE_EDGE]
                  <-Reducer 12 [CONTAINS] vectorized
                    Reduce Output Operator [RS_272]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_271] (rows=59581 width=627)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Top N Key Operator [TNK_270] (rows=39721 width=618)
                          keys:_col0, _col1, 0L,sort order:+++,top n:100
                          Select Operator [SEL_269] (rows=38846 width=619)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Group By Operator [GBY_268] (rows=38846 width=548)
                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0
                            <-Union 11 [SIMPLE_EDGE]
                              <-Map 10 [CONTAINS] vectorized
                                Reduce Output Operator [RS_267]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_266] (rows=2835758 width=548)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col2)","sum(_col4)","sum(_col3)","sum(_col5)"],keys:_col8
                                    Map Join Operator [MAPJOIN_265] (rows=34813117 width=535)
                                      Conds:MAPJOIN_264._col0=RS_260._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col3","_col4","_col5","_col8"]
                                    <-Map 14 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_260]
                                        PartitionCols:_col0
                                        Select Operator [SEL_259] (rows=46000 width=104)
                                          Output:["_col0","_col1"]
                                          TableScan [TS_35] (rows=46000 width=104)
                                            default@catalog_page,catalog_page,Tbl:COMPLETE,Col:COMPLETE,Output:["cp_catalog_page_sk","cp_catalog_page_id"]
                                    <-Map Join Operator [MAPJOIN_264] (rows=34813117 width=438)
                                        Conds:SEL_263._col1=RS_228._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col2","_col3","_col4","_col5"]
                                      <-Map 8 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_228]
                                          PartitionCols:_col0
                                          Select Operator [SEL_226] (rows=8116 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_225] (rows=8116 width=98)
                                              predicate:CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'1998-08-04 00:00:00' AND TIMESTAMP'1998-08-18 00:00:00'
                                              TableScan [TS_8] (rows=73049 width=98)
                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date"]
                                      <-Select Operator [SEL_263] (rows=285117694 width=455)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                          Filter Operator [FIL_262] (rows=285117694 width=231)
                                            predicate:(cs_catalog_page_sk is not null and cs_sold_date_sk is not null)
                                            TableScan [TS_174] (rows=287989836 width=231)
                                              Output:["cs_sold_date_sk","cs_catalog_page_sk","cs_ext_sales_price","cs_net_profit"]
                              <-Map 13 [CONTAINS] vectorized
                                Reduce Output Operator [RS_278]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_277] (rows=2835758 width=548)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col2)","sum(_col4)","sum(_col3)","sum(_col5)"],keys:_col8
                                    Map Join Operator [MAPJOIN_276] (rows=34813117 width=535)
                                      Conds:MAPJOIN_275._col0=RS_261._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col3","_col4","_col5","_col8"]
                                    <-Map 14 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_261]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_259]
                                    <-Map Join Operator [MAPJOIN_275] (rows=34813117 width=438)
                                        Conds:SEL_274._col1=RS_231._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col2","_col3","_col4","_col5"]
                                      <-Map 8 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_231]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_226]
                                      <-Select Operator [SEL_274] (rows=28221805 width=451)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                          Filter Operator [FIL_273] (rows=28221805 width=227)
                                            predicate:(cr_catalog_page_sk is not null and cr_returned_date_sk is not null)
                                            TableScan [TS_190] (rows=28798881 width=227)
                                              Output:["cr_returned_date_sk","cr_catalog_page_sk","cr_return_amount","cr_net_loss"]
                  <-Reducer 17 [CONTAINS] vectorized
                    Reduce Output Operator [RS_292]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_291] (rows=59581 width=627)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Top N Key Operator [TNK_290] (rows=39721 width=618)
                          keys:_col0, _col1, 0L,sort order:+++,top n:100
                          Select Operator [SEL_289] (rows=53 width=615)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Group By Operator [GBY_288] (rows=53 width=548)
                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0
                            <-Union 16 [SIMPLE_EDGE]
                              <-Map 15 [CONTAINS] vectorized
                                Reduce Output Operator [RS_287]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_286] (rows=3498 width=548)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col2)","sum(_col4)","sum(_col3)","sum(_col5)"],keys:_col8
                                    Map Join Operator [MAPJOIN_285] (rows=30969803 width=543)
                                      Conds:MAPJOIN_284._col0=RS_280._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col3","_col4","_col5","_col8"]
                                    <-Map 21 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_280]
                                        PartitionCols:_col0
                                        Select Operator [SEL_279] (rows=84 width=104)
                                          Output:["_col0","_col1"]
                                          TableScan [TS_67] (rows=84 width=104)
                                            default@web_site,web_site,Tbl:COMPLETE,Col:COMPLETE,Output:["web_site_sk","web_site_id"]
                                    <-Map Join Operator [MAPJOIN_284] (rows=30969803 width=447)
                                        Conds:SEL_283._col1=RS_229._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col2","_col3","_col4","_col5"]
                                      <-Map 8 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_229]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_226]
                                      <-Select Operator [SEL_283] (rows=143930874 width=455)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                          Filter Operator [FIL_282] (rows=143930874 width=231)
                                            predicate:(ws_sold_date_sk is not null and ws_web_site_sk is not null)
                                            TableScan [TS_200] (rows=144002668 width=231)
                                              Output:["ws_sold_date_sk","ws_web_site_sk","ws_ext_sales_price","ws_net_profit"]
                              <-Reducer 19 [CONTAINS]
                                Reduce Output Operator [RS_224]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_223] (rows=3498 width=548)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col2)","sum(_col4)","sum(_col3)","sum(_col5)"],keys:_col8
                                    Map Join Operator [MAPJOIN_221] (rows=30969803 width=543)
                                      Conds:MAPJOIN_220._col0=RS_281._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col3","_col4","_col5","_col8"]
                                    <-Map 21 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_281]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_279]
                                    <-Map Join Operator [MAPJOIN_220] (rows=30969803 width=447)
                                        Conds:SEL_219._col1=RS_232._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col2","_col3","_col4","_col5"]
                                      <-Map 8 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_232]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_226]
                                      <-Select Operator [SEL_219] (rows=134816432 width=454)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                          Merge Join Operator [MERGEJOIN_216] (rows=134816432 width=230)
                                            Conds:RS_295._col0, _col2=RS_298._col1, _col2(Inner),Output:["_col1","_col3","_col6","_col7"]
                                          <-Map 18 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_295]
                                              PartitionCols:_col0, _col2
                                              Select Operator [SEL_294] (rows=143966669 width=11)
                                                Output:["_col0","_col1","_col2"]
                                                Filter Operator [FIL_293] (rows=143966669 width=11)
                                                  predicate:ws_web_site_sk is not null
                                                  TableScan [TS_52] (rows=144002668 width=11)
                                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_item_sk","ws_web_site_sk","ws_order_number"]
                                          <-Map 20 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_298]
                                              PartitionCols:_col1, _col2
                                              Select Operator [SEL_297] (rows=13749816 width=225)
                                                Output:["_col0","_col1","_col2","_col3","_col4"]
                                                Filter Operator [FIL_296] (rows=13749816 width=225)
                                                  predicate:wr_returned_date_sk is not null
                                                  TableScan [TS_55] (rows=14398467 width=225)
                                                    default@web_returns,web_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["wr_returned_date_sk","wr_item_sk","wr_order_number","wr_return_amt","wr_net_loss"]
                  <-Reducer 3 [CONTAINS] vectorized
                    Reduce Output Operator [RS_246]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_245] (rows=59581 width=627)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Top N Key Operator [TNK_244] (rows=39721 width=618)
                          keys:_col0, _col1, 0L,sort order:+++,top n:100
                          Select Operator [SEL_243] (rows=822 width=617)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Group By Operator [GBY_242] (rows=822 width=548)
                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0
                            <-Union 2 [SIMPLE_EDGE]
                              <-Map 1 [CONTAINS] vectorized
                                Reduce Output Operator [RS_241]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_240] (rows=78090 width=548)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col2)","sum(_col4)","sum(_col3)","sum(_col5)"],keys:_col8
                                    Map Join Operator [MAPJOIN_239] (rows=64325014 width=376)
                                      Conds:MAPJOIN_238._col0=RS_234._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col3","_col4","_col5","_col8"]
                                    <-Map 9 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_234]
                                        PartitionCols:_col0
                                        Select Operator [SEL_233] (rows=1704 width=104)
                                          Output:["_col0","_col1"]
                                          TableScan [TS_11] (rows=1704 width=104)
                                            default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_id"]
                                    <-Map Join Operator [MAPJOIN_238] (rows=64325014 width=277)
                                        Conds:SEL_237._col1=RS_227._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col2","_col3","_col4","_col5"]
                                      <-Map 8 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_227]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_226]
                                      <-Select Operator [SEL_237] (rows=525329897 width=445)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                          Filter Operator [FIL_236] (rows=525329897 width=221)
                                            predicate:(ss_sold_date_sk is not null and ss_store_sk is not null)
                                            TableScan [TS_148] (rows=575995635 width=221)
                                              Output:["ss_sold_date_sk","ss_store_sk","ss_ext_sales_price","ss_net_profit"]
                              <-Map 7 [CONTAINS] vectorized
                                Reduce Output Operator [RS_258]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_257] (rows=78090 width=548)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col2)","sum(_col4)","sum(_col3)","sum(_col5)"],keys:_col8
                                    Map Join Operator [MAPJOIN_256] (rows=64325014 width=376)
                                      Conds:MAPJOIN_255._col0=RS_235._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col3","_col4","_col5","_col8"]
                                    <-Map 9 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_235]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_233]
                                    <-Map Join Operator [MAPJOIN_255] (rows=64325014 width=277)
                                        Conds:SEL_254._col1=RS_230._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col2","_col3","_col4","_col5"]
                                      <-Map 8 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_230]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_226]
                                      <-Select Operator [SEL_254] (rows=53634860 width=447)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                          Filter Operator [FIL_253] (rows=53634860 width=223)
                                            predicate:(sr_returned_date_sk is not null and sr_store_sk is not null)
                                            TableScan [TS_164] (rows=57591150 width=223)
                                              Output:["sr_returned_date_sk","sr_store_sk","sr_return_amt","sr_net_loss"]

