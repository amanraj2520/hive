PREHOOK: query: explain
select  c_customer_id as customer_id
       ,c_last_name || ', ' || c_first_name as customername
 from customer
     ,customer_address
     ,customer_demographics
     ,household_demographics
     ,income_band
     ,store_returns
 where ca_city	        =  'Hopewell'
   and c_current_addr_sk = ca_address_sk
   and ib_lower_bound   >=  32287
   and ib_upper_bound   <=  32287 + 50000
   and ib_income_band_sk = hd_income_band_sk
   and cd_demo_sk = c_current_cdemo_sk
   and hd_demo_sk = c_current_hdemo_sk
   and sr_cdemo_sk = cd_demo_sk
 order by c_customer_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@income_band
PREHOOK: Input: default@store_returns
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  c_customer_id as customer_id
       ,c_last_name || ', ' || c_first_name as customername
 from customer
     ,customer_address
     ,customer_demographics
     ,household_demographics
     ,income_band
     ,store_returns
 where ca_city	        =  'Hopewell'
   and c_current_addr_sk = ca_address_sk
   and ib_lower_bound   >=  32287
   and ib_upper_bound   <=  32287 + 50000
   and ib_income_band_sk = hd_income_band_sk
   and cd_demo_sk = c_current_cdemo_sk
   and hd_demo_sk = c_current_hdemo_sk
   and sr_cdemo_sk = cd_demo_sk
 order by c_customer_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@income_band
POSTHOOK: Input: default@store_returns
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 6 (BROADCAST_EDGE)
Map 3 <- Map 4 (BROADCAST_EDGE)
Map 5 <- Map 7 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 6 <- Map 3 (BROADCAST_EDGE), Map 5 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 2 vectorized
      File Output Operator [FS_96]
        Limit [LIM_95] (rows=100 width=384)
          Number of rows:100
          Select Operator [SEL_94] (rows=264547 width=384)
            Output:["_col0","_col1"]
          <-Map 1 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_93]
              Select Operator [SEL_92] (rows=264547 width=384)
                Output:["_col1","_col2"]
                Map Join Operator [MAPJOIN_91] (rows=264547 width=284)
                  Conds:SEL_90._col0=RS_32._col1(Inner),HybridGraceHashJoin:true,Output:["_col1","_col3"]
                <-Reducer 6 [BROADCAST_EDGE]
                  BROADCAST [RS_32]
                    PartitionCols:_col1
                    Select Operator [SEL_30] (rows=8433 width=288)
                      Output:["_col0","_col1","_col2"]
                      Map Join Operator [MAPJOIN_67] (rows=8433 width=288)
                        Conds:RS_86._col0=SEL_23._col1(Inner),HybridGraceHashJoin:true,Output:["_col3","_col5","_col6"]
                      <-Map 3 [BROADCAST_EDGE] vectorized
                        BROADCAST [RS_86]
                          PartitionCols:_col0
                          Map Join Operator [MAPJOIN_85] (rows=721 width=4)
                            Conds:SEL_84._col1=RS_82._col0(Inner),HybridGraceHashJoin:true,Output:["_col0"]
                          <-Map 4 [BROADCAST_EDGE] vectorized
                            BROADCAST [RS_82]
                              PartitionCols:_col0
                              Select Operator [SEL_81] (rows=2 width=4)
                                Output:["_col0"]
                                Filter Operator [FIL_80] (rows=2 width=12)
                                  predicate:((ib_lower_bound >= 32287) and (ib_upper_bound <= 82287))
                                  TableScan [TS_6] (rows=20 width=12)
                                    default@income_band,income_band,Tbl:COMPLETE,Col:COMPLETE,Output:["ib_income_band_sk","ib_lower_bound","ib_upper_bound"]
                          <-Select Operator [SEL_84] (rows=7200 width=8)
                              Output:["_col0","_col1"]
                              Filter Operator [FIL_83] (rows=7200 width=8)
                                predicate:hd_income_band_sk is not null
                                TableScan [TS_3] (rows=7200 width=8)
                                  default@household_demographics,household_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_income_band_sk"]
                      <-Select Operator [SEL_23] (rows=84323 width=288)
                          Output:["_col0","_col1","_col2","_col3"]
                          Merge Join Operator [MERGEJOIN_65] (rows=84323 width=288)
                            Conds:RS_79._col1=RS_88._col0(Inner),Output:["_col0","_col2","_col4","_col6"]
                          <-Map 5 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_79]
                              PartitionCols:_col1
                              Map Join Operator [MAPJOIN_78] (rows=83148 width=284)
                                Conds:SEL_77._col3=RS_75._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col2","_col4"]
                              <-Map 7 [BROADCAST_EDGE] vectorized
                                BROADCAST [RS_75]
                                  PartitionCols:_col0
                                  Select Operator [SEL_74] (rows=44643 width=4)
                                    Output:["_col0"]
                                    Filter Operator [FIL_73] (rows=44643 width=97)
                                      predicate:(ca_city = 'Hopewell')
                                      TableScan [TS_12] (rows=40000000 width=97)
                                        default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_city"]
                              <-Select Operator [SEL_77] (rows=74500295 width=295)
                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                  Filter Operator [FIL_76] (rows=74500295 width=291)
                                    predicate:(c_current_addr_sk is not null and c_current_cdemo_sk is not null and c_current_hdemo_sk is not null)
                                    TableScan [TS_9] (rows=80000000 width=291)
                                      default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_id","c_current_cdemo_sk","c_current_hdemo_sk","c_current_addr_sk","c_first_name","c_last_name"]
                          <-Map 8 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_88]
                              PartitionCols:_col0
                              Select Operator [SEL_87] (rows=1861800 width=4)
                                Output:["_col0"]
                                TableScan [TS_15] (rows=1861800 width=4)
                                  default@customer_demographics,customer_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk"]
                <-Select Operator [SEL_90] (rows=55577698 width=3)
                    Output:["_col0"]
                    Filter Operator [FIL_89] (rows=55577698 width=3)
                      predicate:sr_cdemo_sk is not null
                      TableScan [TS_0] (rows=57591150 width=3)
                        default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_cdemo_sk"]

