PREHOOK: query: explain
select avg(ss_quantity)
       ,avg(ss_ext_sales_price)
       ,avg(ss_ext_wholesale_cost)
       ,sum(ss_ext_wholesale_cost)
 from store_sales
     ,store
     ,customer_demographics
     ,household_demographics
     ,customer_address
     ,date_dim
 where s_store_sk = ss_store_sk
 and  ss_sold_date_sk = d_date_sk and d_year = 2001
 and((ss_hdemo_sk=hd_demo_sk
  and cd_demo_sk = ss_cdemo_sk
  and cd_marital_status = 'M'
  and cd_education_status = '4 yr Degree'
  and ss_sales_price between 100.00 and 150.00
  and hd_dep_count = 3   
     )or
     (ss_hdemo_sk=hd_demo_sk
  and cd_demo_sk = ss_cdemo_sk
  and cd_marital_status = 'D'
  and cd_education_status = 'Primary'
  and ss_sales_price between 50.00 and 100.00   
  and hd_dep_count = 1
     ) or 
     (ss_hdemo_sk=hd_demo_sk
  and cd_demo_sk = ss_cdemo_sk
  and cd_marital_status = 'U'
  and cd_education_status = 'Advanced Degree'
  and ss_sales_price between 150.00 and 200.00 
  and hd_dep_count = 1  
     ))
 and((ss_addr_sk = ca_address_sk
  and ca_country = 'United States'
  and ca_state in ('KY', 'GA', 'NM')
  and ss_net_profit between 100 and 200  
     ) or
     (ss_addr_sk = ca_address_sk
  and ca_country = 'United States'
  and ca_state in ('MT', 'OR', 'IN')
  and ss_net_profit between 150 and 300  
     ) or
     (ss_addr_sk = ca_address_sk
  and ca_country = 'United States'
  and ca_state in ('WI', 'MO', 'WV')
  and ss_net_profit between 50 and 250  
     ))
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select avg(ss_quantity)
       ,avg(ss_ext_sales_price)
       ,avg(ss_ext_wholesale_cost)
       ,sum(ss_ext_wholesale_cost)
 from store_sales
     ,store
     ,customer_demographics
     ,household_demographics
     ,customer_address
     ,date_dim
 where s_store_sk = ss_store_sk
 and  ss_sold_date_sk = d_date_sk and d_year = 2001
 and((ss_hdemo_sk=hd_demo_sk
  and cd_demo_sk = ss_cdemo_sk
  and cd_marital_status = 'M'
  and cd_education_status = '4 yr Degree'
  and ss_sales_price between 100.00 and 150.00
  and hd_dep_count = 3   
     )or
     (ss_hdemo_sk=hd_demo_sk
  and cd_demo_sk = ss_cdemo_sk
  and cd_marital_status = 'D'
  and cd_education_status = 'Primary'
  and ss_sales_price between 50.00 and 100.00   
  and hd_dep_count = 1
     ) or 
     (ss_hdemo_sk=hd_demo_sk
  and cd_demo_sk = ss_cdemo_sk
  and cd_marital_status = 'U'
  and cd_education_status = 'Advanced Degree'
  and ss_sales_price between 150.00 and 200.00 
  and hd_dep_count = 1  
     ))
 and((ss_addr_sk = ca_address_sk
  and ca_country = 'United States'
  and ca_state in ('KY', 'GA', 'NM')
  and ss_net_profit between 100 and 200  
     ) or
     (ss_addr_sk = ca_address_sk
  and ca_country = 'United States'
  and ca_state in ('MT', 'OR', 'IN')
  and ss_net_profit between 150 and 300  
     ) or
     (ss_addr_sk = ca_address_sk
  and ca_country = 'United States'
  and ca_state in ('WI', 'MO', 'WV')
  and ss_net_profit between 50 and 250  
     ))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 3 <- Map 2 (BROADCAST_EDGE)
Reducer 4 <- Map 1 (BROADCAST_EDGE), Map 3 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 5 <- Map 8 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_79]
        Select Operator [SEL_78] (rows=1 width=344)
          Output:["_col0","_col1","_col2","_col3"]
          Group By Operator [GBY_77] (rows=1 width=256)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)","sum(VALUE._col2)","count(VALUE._col3)","sum(VALUE._col4)","count(VALUE._col5)"]
          <-Reducer 5 [CUSTOM_SIMPLE_EDGE]
            PARTITION_ONLY_SHUFFLE [RS_32]
              Group By Operator [GBY_31] (rows=1 width=256)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col3)","count(_col3)","sum(_col4)","count(_col4)","sum(_col5)","count(_col5)"]
                Select Operator [SEL_30] (rows=83121 width=24)
                  Output:["_col3","_col4","_col5"]
                  Filter Operator [FIL_29] (rows=83121 width=24)
                    predicate:((_col10 and _col6) or (_col11 and _col7) or (_col12 and _col8))
                    Merge Join Operator [MERGEJOIN_58] (rows=110831 width=24)
                      Conds:RS_26._col2=RS_76._col0(Inner),Output:["_col3","_col4","_col5","_col6","_col7","_col8","_col10","_col11","_col12"]
                    <-Map 8 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_76]
                        PartitionCols:_col0
                        Select Operator [SEL_75] (rows=7058824 width=16)
                          Output:["_col0","_col1","_col2","_col3"]
                          Filter Operator [FIL_74] (rows=7058824 width=187)
                            predicate:((ca_country = 'United States') and (ca_state) IN ('KY', 'GA', 'NM', 'MT', 'OR', 'IN', 'WI', 'MO', 'WV'))
                            TableScan [TS_20] (rows=40000000 width=187)
                              default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_state","ca_country"]
                    <-Reducer 4 [SIMPLE_EDGE]
                      SHUFFLE [RS_26]
                        PartitionCols:_col2
                        Map Join Operator [MAPJOIN_57] (rows=628038 width=85)
                          Conds:RS_70._col0=SEL_19._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                        <-Map 1 [BROADCAST_EDGE] vectorized
                          BROADCAST [RS_70]
                            PartitionCols:_col0
                            Select Operator [SEL_69] (rows=652 width=4)
                              Output:["_col0"]
                              Filter Operator [FIL_68] (rows=652 width=8)
                                predicate:(d_year = 2001)
                                TableScan [TS_0] (rows=73049 width=8)
                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                        <-Select Operator [SEL_19] (rows=1758915 width=190)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                            Filter Operator [FIL_18] (rows=1758915 width=234)
                              predicate:((_col17 and _col18 and _col13 and _col1) or (_col19 and _col20 and _col14 and _col2) or (_col21 and _col22 and _col15 and _col2))
                              Merge Join Operator [MERGEJOIN_56] (rows=9380880 width=234)
                                Conds:RS_67._col4=RS_73._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col17","_col18","_col19","_col20","_col21","_col22"]
                              <-Map 3 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_67]
                                  PartitionCols:_col4
                                  Map Join Operator [MAPJOIN_66] (rows=9250082 width=212)
                                    Conds:RS_63._col0=SEL_65._col2(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                  <-Map 2 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_63]
                                      PartitionCols:_col0
                                      Select Operator [SEL_62] (rows=1310 width=12)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_61] (rows=1310 width=8)
                                          predicate:((hd_dep_count = 1) or (hd_dep_count = 3))
                                          TableScan [TS_3] (rows=7200 width=8)
                                            default@household_demographics,household_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_dep_count"]
                                  <-Select Operator [SEL_65] (rows=50840141 width=257)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                                      Filter Operator [FIL_64] (rows=50840141 width=450)
                                        predicate:((ss_net_profit BETWEEN 100 AND 200 or ss_net_profit BETWEEN 150 AND 300 or ss_net_profit BETWEEN 50 AND 250) and (ss_sales_price BETWEEN 100 AND 150 or ss_sales_price BETWEEN 50 AND 100 or ss_sales_price BETWEEN 150 AND 200) and ss_addr_sk is not null and ss_cdemo_sk is not null and ss_hdemo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                        TableScan [TS_6] (rows=575995635 width=450)
                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_cdemo_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_quantity","ss_sales_price","ss_ext_sales_price","ss_ext_wholesale_cost","ss_net_profit"]
                              <-Map 7 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_73]
                                  PartitionCols:_col0
                                  Select Operator [SEL_72] (rows=598434 width=28)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                    Filter Operator [FIL_71] (rows=598434 width=183)
                                      predicate:(((cd_education_status = '4 yr Degree') or (cd_education_status = 'Primary') or (cd_education_status = 'Advanced Degree')) and ((cd_marital_status = 'M') or (cd_marital_status = 'D') or (cd_marital_status = 'U')))
                                      TableScan [TS_9] (rows=1861800 width=183)
                                        default@customer_demographics,customer_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_marital_status","cd_education_status"]

