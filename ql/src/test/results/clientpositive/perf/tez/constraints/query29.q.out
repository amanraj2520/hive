PREHOOK: query: explain
select   
     i_item_id
    ,i_item_desc
    ,s_store_id
    ,s_store_name
    ,sum(ss_quantity)        as store_sales_quantity
    ,sum(sr_return_quantity) as store_returns_quantity
    ,sum(cs_quantity)        as catalog_sales_quantity
 from
    store_sales
   ,store_returns
   ,catalog_sales
   ,date_dim             d1
   ,date_dim             d2
   ,date_dim             d3
   ,store
   ,item
 where
     d1.d_moy               = 4 
 and d1.d_year              = 1999
 and d1.d_date_sk           = ss_sold_date_sk
 and i_item_sk              = ss_item_sk
 and s_store_sk             = ss_store_sk
 and ss_customer_sk         = sr_customer_sk
 and ss_item_sk             = sr_item_sk
 and ss_ticket_number       = sr_ticket_number
 and sr_returned_date_sk    = d2.d_date_sk
 and d2.d_moy               between 4 and  4 + 3 
 and d2.d_year              = 1999
 and sr_customer_sk         = cs_bill_customer_sk
 and sr_item_sk             = cs_item_sk
 and cs_sold_date_sk        = d3.d_date_sk     
 and d3.d_year              in (1999,1999+1,1999+2)
 group by
    i_item_id
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 order by
    i_item_id 
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select   
     i_item_id
    ,i_item_desc
    ,s_store_id
    ,s_store_name
    ,sum(ss_quantity)        as store_sales_quantity
    ,sum(sr_return_quantity) as store_returns_quantity
    ,sum(cs_quantity)        as catalog_sales_quantity
 from
    store_sales
   ,store_returns
   ,catalog_sales
   ,date_dim             d1
   ,date_dim             d2
   ,date_dim             d3
   ,store
   ,item
 where
     d1.d_moy               = 4 
 and d1.d_year              = 1999
 and d1.d_date_sk           = ss_sold_date_sk
 and i_item_sk              = ss_item_sk
 and s_store_sk             = ss_store_sk
 and ss_customer_sk         = sr_customer_sk
 and ss_item_sk             = sr_item_sk
 and ss_ticket_number       = sr_ticket_number
 and sr_returned_date_sk    = d2.d_date_sk
 and d2.d_moy               between 4 and  4 + 3 
 and d2.d_year              = 1999
 and sr_customer_sk         = cs_bill_customer_sk
 and sr_item_sk             = cs_item_sk
 and cs_sold_date_sk        = d3.d_date_sk     
 and d3.d_year              in (1999,1999+1,1999+2)
 group by
    i_item_id
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 order by
    i_item_id 
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 7 <- Map 6 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 8 <- Map 10 (SIMPLE_EDGE), Map 11 (BROADCAST_EDGE), Map 12 (BROADCAST_EDGE), Map 13 (BROADCAST_EDGE), Map 5 (BROADCAST_EDGE), Reducer 7 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 4 vectorized
      File Output Operator [FS_136]
        Limit [LIM_135] (rows=100 width=496)
          Number of rows:100
          Select Operator [SEL_134] (rows=318765931 width=496)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
          <-Reducer 3 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_133]
              Group By Operator [GBY_132] (rows=318765931 width=496)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
              <-Reducer 2 [SIMPLE_EDGE]
                SHUFFLE [RS_48]
                  PartitionCols:_col0, _col1, _col2, _col3
                  Group By Operator [GBY_47] (rows=318765931 width=496)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)","sum(_col6)"],keys:_col1, _col2, _col7, _col8
                    Top N Key Operator [TNK_98] (rows=318765931 width=483)
                      keys:_col1, _col2, _col7, _col8,sort order:++++,top n:100
                      Merge Join Operator [MERGEJOIN_105] (rows=318765931 width=483)
                        Conds:RS_111._col0=RS_44._col0(Inner),Output:["_col1","_col2","_col4","_col5","_col6","_col7","_col8"]
                      <-Map 1 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_111]
                          PartitionCols:_col0
                          Select Operator [SEL_110] (rows=462000 width=288)
                            Output:["_col0","_col1","_col2"]
                            TableScan [TS_0] (rows=462000 width=288)
                              default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_id","i_item_desc"]
                      <-Reducer 8 [SIMPLE_EDGE]
                        SHUFFLE [RS_44]
                          PartitionCols:_col0
                          Select Operator [SEL_42] (rows=318765931 width=203)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Map Join Operator [MAPJOIN_104] (rows=318765931 width=203)
                              Conds:MAPJOIN_103._col2=RS_131._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col3","_col4","_col6","_col8","_col9"]
                            <-Map 13 [BROADCAST_EDGE] vectorized
                              BROADCAST [RS_131]
                                PartitionCols:_col0
                                Select Operator [SEL_130] (rows=1704 width=192)
                                  Output:["_col0","_col1","_col2"]
                                  TableScan [TS_34] (rows=1704 width=192)
                                    default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_id","s_store_name"]
                            <-Map Join Operator [MAPJOIN_103] (rows=318765931 width=19)
                                Conds:RS_120._col0=SEL_33._col4(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col6"]
                              <-Map 5 [BROADCAST_EDGE] vectorized
                                BROADCAST [RS_120]
                                  PartitionCols:_col0
                                  Select Operator [SEL_119] (rows=1957 width=4)
                                    Output:["_col0"]
                                    Filter Operator [FIL_118] (rows=1957 width=8)
                                      predicate:(d_year) IN (1999, 2000, 2001)
                                      TableScan [TS_2] (rows=73049 width=8)
                                        default@date_dim,d3,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                              <-Select Operator [SEL_33] (rows=11898585650 width=23)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                  Map Join Operator [MAPJOIN_102] (rows=11898585650 width=23)
                                    Conds:MAPJOIN_101._col4=RS_129._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col5","_col6","_col7"]
                                  <-Map 12 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_129]
                                      PartitionCols:_col0
                                      Select Operator [SEL_128] (rows=624 width=4)
                                        Output:["_col0"]
                                        Filter Operator [FIL_127] (rows=624 width=12)
                                          predicate:((d_year = 1999) and d_moy BETWEEN 4 AND 7)
                                          TableScan [TS_24] (rows=73049 width=12)
                                            default@date_dim,d2,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                  <-Map Join Operator [MAPJOIN_101] (rows=38175151953 width=27)
                                      Conds:SEL_20._col0=RS_126._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                    <-Map 11 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_126]
                                        PartitionCols:_col0
                                        Select Operator [SEL_125] (rows=624 width=4)
                                          Output:["_col0"]
                                          Filter Operator [FIL_124] (rows=624 width=12)
                                            predicate:((d_moy = 4) and (d_year = 1999))
                                            TableScan [TS_21] (rows=73049 width=12)
                                              default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                    <-Select Operator [SEL_20] (rows=111712792155 width=31)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                        Merge Join Operator [MERGEJOIN_100] (rows=111712792155 width=31)
                                          Conds:RS_17._col8, _col7=RS_123._col1, _col2(Inner),Output:["_col0","_col1","_col3","_col5","_col6","_col10","_col11","_col14"]
                                        <-Map 10 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_123]
                                            PartitionCols:_col1, _col2
                                            Select Operator [SEL_122] (rows=285117831 width=15)
                                              Output:["_col0","_col1","_col2","_col3"]
                                              Filter Operator [FIL_121] (rows=285117831 width=15)
                                                predicate:(cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                                TableScan [TS_11] (rows=287989836 width=15)
                                                  default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_quantity"]
                                        <-Reducer 7 [SIMPLE_EDGE]
                                          SHUFFLE [RS_17]
                                            PartitionCols:_col8, _col7
                                            Merge Join Operator [MERGEJOIN_99] (rows=549128658 width=31)
                                              Conds:RS_114._col2, _col1, _col4=RS_117._col2, _col1, _col3(Inner),Output:["_col0","_col1","_col3","_col5","_col6","_col7","_col8","_col10"]
                                            <-Map 6 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_114]
                                                PartitionCols:_col2, _col1, _col4
                                                Select Operator [SEL_113] (rows=501694138 width=23)
                                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                  Filter Operator [FIL_112] (rows=501694138 width=23)
                                                    predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                    TableScan [TS_5] (rows=575995635 width=23)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number","ss_quantity"]
                                            <-Map 9 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_117]
                                                PartitionCols:_col2, _col1, _col3
                                                Select Operator [SEL_116] (rows=53632139 width=19)
                                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                                  Filter Operator [FIL_115] (rows=53632139 width=19)
                                                    predicate:(sr_customer_sk is not null and sr_returned_date_sk is not null)
                                                    TableScan [TS_8] (rows=57591150 width=19)
                                                      default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_returned_date_sk","sr_item_sk","sr_customer_sk","sr_ticket_number","sr_return_quantity"]

