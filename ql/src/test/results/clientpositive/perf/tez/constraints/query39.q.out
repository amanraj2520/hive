PREHOOK: query: explain
with inv as
(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
       ,stdev,mean, case mean when 0 then null else stdev/mean end cov
 from(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
            ,stddev_samp(inv_quantity_on_hand) stdev,avg(inv_quantity_on_hand) mean
      from inventory
          ,item
          ,warehouse
          ,date_dim
      where inv_item_sk = i_item_sk
        and inv_warehouse_sk = w_warehouse_sk
        and inv_date_sk = d_date_sk
        and d_year =1999
      group by w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy) foo
 where case mean when 0 then 0 else stdev/mean end > 1)
select inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean, inv1.cov
        ,inv2.w_warehouse_sk,inv2.i_item_sk,inv2.d_moy,inv2.mean, inv2.cov
from inv inv1,inv inv2
where inv1.i_item_sk = inv2.i_item_sk
  and inv1.w_warehouse_sk =  inv2.w_warehouse_sk
  and inv1.d_moy=4
  and inv2.d_moy=4+1
order by inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean,inv1.cov
        ,inv2.d_moy,inv2.mean, inv2.cov
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@inventory
PREHOOK: Input: default@item
PREHOOK: Input: default@warehouse
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with inv as
(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
       ,stdev,mean, case mean when 0 then null else stdev/mean end cov
 from(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
            ,stddev_samp(inv_quantity_on_hand) stdev,avg(inv_quantity_on_hand) mean
      from inventory
          ,item
          ,warehouse
          ,date_dim
      where inv_item_sk = i_item_sk
        and inv_warehouse_sk = w_warehouse_sk
        and inv_date_sk = d_date_sk
        and d_year =1999
      group by w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy) foo
 where case mean when 0 then 0 else stdev/mean end > 1)
select inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean, inv1.cov
        ,inv2.w_warehouse_sk,inv2.i_item_sk,inv2.d_moy,inv2.mean, inv2.cov
from inv inv1,inv inv2
where inv1.i_item_sk = inv2.i_item_sk
  and inv1.w_warehouse_sk =  inv2.w_warehouse_sk
  and inv1.d_moy=4
  and inv2.d_moy=4+1
order by inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean,inv1.cov
        ,inv2.d_moy,inv2.mean, inv2.cov
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@inventory
POSTHOOK: Input: default@item
POSTHOOK: Input: default@warehouse
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (SIMPLE_EDGE)
Reducer 3 <- Map 11 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Map 1 (SIMPLE_EDGE), Map 10 (SIMPLE_EDGE)
Reducer 8 <- Map 11 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_96]
        Select Operator [SEL_95] (rows=859 width=56)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
        <-Reducer 5 [SIMPLE_EDGE]
          SHUFFLE [RS_44]
            Select Operator [SEL_43] (rows=859 width=48)
              Output:["_col0","_col1","_col2","_col3","_col6","_col7"]
              Merge Join Operator [MERGEJOIN_74] (rows=859 width=40)
                Conds:RS_90._col0, _col1=RS_94._col0, _col1(Inner),Output:["_col0","_col1","_col2","_col3","_col6","_col7"]
              <-Reducer 4 [SIMPLE_EDGE] vectorized
                SHUFFLE [RS_90]
                  PartitionCols:_col0, _col1
                  Select Operator [SEL_89] (rows=859 width=24)
                    Output:["_col0","_col1","_col2","_col3"]
                    Filter Operator [FIL_88] (rows=859 width=40)
                      predicate:CASE WHEN (((UDFToDouble(_col2) / _col3) = 0)) THEN (false) ELSE (((power(((_col4 - ((_col5 * _col5) / _col3)) / CASE WHEN ((_col3 = 1L)) THEN (null) ELSE ((_col3 - 1)) END), 0.5) / (UDFToDouble(_col2) / _col3)) > 1.0D)) END
                      Group By Operator [GBY_87] (rows=1719 width=40)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1
                      <-Reducer 3 [SIMPLE_EDGE]
                        SHUFFLE [RS_16]
                          PartitionCols:_col0, _col1
                          Group By Operator [GBY_15] (rows=1719 width=40)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col3)","count(_col3)","sum(_col5)","sum(_col4)"],keys:_col1, _col2
                            Select Operator [SEL_13] (rows=1032514 width=8)
                              Output:["_col1","_col2","_col3","_col4","_col5"]
                              Merge Join Operator [MERGEJOIN_71] (rows=1032514 width=8)
                                Conds:RS_10._col1=RS_85._col0(Inner),Output:["_col2","_col3","_col5"]
                              <-Map 11 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_85]
                                  PartitionCols:_col0
                                  Select Operator [SEL_84] (rows=27 width=4)
                                    Output:["_col0"]
                                    TableScan [TS_5] (rows=27 width=4)
                                      default@warehouse,warehouse,Tbl:COMPLETE,Col:COMPLETE,Output:["w_warehouse_sk"]
                              <-Reducer 2 [SIMPLE_EDGE]
                                SHUFFLE [RS_10]
                                  PartitionCols:_col1
                                  Merge Join Operator [MERGEJOIN_70] (rows=1032514 width=8)
                                    Conds:RS_76._col0=RS_82._col0(Inner),Output:["_col1","_col2","_col3"]
                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_76]
                                      PartitionCols:_col0
                                      Select Operator [SEL_75] (rows=37584000 width=15)
                                        Output:["_col0","_col1","_col2","_col3"]
                                        TableScan [TS_0] (rows=37584000 width=15)
                                          default@inventory,inventory,Tbl:COMPLETE,Col:COMPLETE,Output:["inv_date_sk","inv_item_sk","inv_warehouse_sk","inv_quantity_on_hand"]
                                  <-Map 10 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_82]
                                      PartitionCols:_col0
                                      Select Operator [SEL_80] (rows=50 width=4)
                                        Output:["_col0"]
                                        Filter Operator [FIL_78] (rows=50 width=12)
                                          predicate:((d_moy = 5) and (d_year = 1999))
                                          TableScan [TS_2] (rows=73049 width=12)
                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
              <-Reducer 9 [SIMPLE_EDGE] vectorized
                SHUFFLE [RS_94]
                  PartitionCols:_col0, _col1
                  Select Operator [SEL_93] (rows=859 width=24)
                    Output:["_col0","_col1","_col2","_col3"]
                    Filter Operator [FIL_92] (rows=859 width=40)
                      predicate:CASE WHEN (((UDFToDouble(_col2) / _col3) = 0)) THEN (false) ELSE (((power(((_col4 - ((_col5 * _col5) / _col3)) / CASE WHEN ((_col3 = 1L)) THEN (null) ELSE ((_col3 - 1)) END), 0.5) / (UDFToDouble(_col2) / _col3)) > 1.0D)) END
                      Group By Operator [GBY_91] (rows=1719 width=40)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1
                      <-Reducer 8 [SIMPLE_EDGE]
                        SHUFFLE [RS_36]
                          PartitionCols:_col0, _col1
                          Group By Operator [GBY_35] (rows=1719 width=40)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col3)","count(_col3)","sum(_col5)","sum(_col4)"],keys:_col1, _col2
                            Select Operator [SEL_33] (rows=1032514 width=8)
                              Output:["_col1","_col2","_col3","_col4","_col5"]
                              Merge Join Operator [MERGEJOIN_73] (rows=1032514 width=8)
                                Conds:RS_30._col1=RS_86._col0(Inner),Output:["_col2","_col3","_col5"]
                              <-Map 11 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_86]
                                  PartitionCols:_col0
                                   Please refer to the previous Select Operator [SEL_84]
                              <-Reducer 7 [SIMPLE_EDGE]
                                SHUFFLE [RS_30]
                                  PartitionCols:_col1
                                  Merge Join Operator [MERGEJOIN_72] (rows=1032514 width=8)
                                    Conds:RS_77._col0=RS_83._col0(Inner),Output:["_col1","_col2","_col3"]
                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_77]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_75]
                                  <-Map 10 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_83]
                                      PartitionCols:_col0
                                      Select Operator [SEL_81] (rows=50 width=4)
                                        Output:["_col0"]
                                        Filter Operator [FIL_79] (rows=50 width=12)
                                          predicate:((d_moy = 4) and (d_year = 1999))
                                           Please refer to the previous TableScan [TS_2]

PREHOOK: query: with inv as
(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
       ,stdev,mean, case mean when 0 then null else stdev/mean end cov
 from(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
            ,stddev_samp(inv_quantity_on_hand) stdev,avg(inv_quantity_on_hand) mean
      from inventory
          ,item
          ,warehouse
          ,date_dim
      where inv_item_sk = i_item_sk
        and inv_warehouse_sk = w_warehouse_sk
        and inv_date_sk = d_date_sk
        and d_year =1999
      group by w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy) foo
 where case mean when 0 then 0 else stdev/mean end > 1)
select inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean, inv1.cov
        ,inv2.w_warehouse_sk,inv2.i_item_sk,inv2.d_moy,inv2.mean, inv2.cov
from inv inv1,inv inv2
where inv1.i_item_sk = inv2.i_item_sk
  and inv1.w_warehouse_sk =  inv2.w_warehouse_sk
  and inv1.d_moy=4
  and inv2.d_moy=4+1
  and inv1.cov > 1.5
order by inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean,inv1.cov
        ,inv2.d_moy,inv2.mean, inv2.cov
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@inventory
PREHOOK: Input: default@item
PREHOOK: Input: default@warehouse
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: with inv as
(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
       ,stdev,mean, case mean when 0 then null else stdev/mean end cov
 from(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
            ,stddev_samp(inv_quantity_on_hand) stdev,avg(inv_quantity_on_hand) mean
      from inventory
          ,item
          ,warehouse
          ,date_dim
      where inv_item_sk = i_item_sk
        and inv_warehouse_sk = w_warehouse_sk
        and inv_date_sk = d_date_sk
        and d_year =1999
      group by w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy) foo
 where case mean when 0 then 0 else stdev/mean end > 1)
select inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean, inv1.cov
        ,inv2.w_warehouse_sk,inv2.i_item_sk,inv2.d_moy,inv2.mean, inv2.cov
from inv inv1,inv inv2
where inv1.i_item_sk = inv2.i_item_sk
  and inv1.w_warehouse_sk =  inv2.w_warehouse_sk
  and inv1.d_moy=4
  and inv2.d_moy=4+1
  and inv1.cov > 1.5
order by inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean,inv1.cov
        ,inv2.d_moy,inv2.mean, inv2.cov
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@inventory
POSTHOOK: Input: default@item
POSTHOOK: Input: default@warehouse
POSTHOOK: Output: hdfs://### HDFS PATH ###
