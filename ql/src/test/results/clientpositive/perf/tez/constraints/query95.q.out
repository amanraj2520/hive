PREHOOK: query: explain
with ws_wh as
(select ws1.ws_order_number,ws1.ws_warehouse_sk wh1,ws2.ws_warehouse_sk wh2
 from web_sales ws1,web_sales ws2
 where ws1.ws_order_number = ws2.ws_order_number
   and ws1.ws_warehouse_sk <> ws2.ws_warehouse_sk)
 select  
   count(distinct ws_order_number) as `order count`
  ,sum(ws_ext_ship_cost) as `total shipping cost`
  ,sum(ws_net_profit) as `total net profit`
from
   web_sales ws1
  ,date_dim
  ,customer_address
  ,web_site
where
    d_date between '1999-5-01' and 
           (cast('1999-5-01' as date) + 60 days)
and ws1.ws_ship_date_sk = d_date_sk
and ws1.ws_ship_addr_sk = ca_address_sk
and ca_state = 'TX'
and ws1.ws_web_site_sk = web_site_sk
and web_company_name = 'pri'
and ws1.ws_order_number in (select ws_order_number
                            from ws_wh)
and ws1.ws_order_number in (select wr_order_number
                            from web_returns,ws_wh
                            where wr_order_number = ws_wh.ws_order_number)
order by count(distinct ws_order_number)
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@web_returns
PREHOOK: Input: default@web_sales
PREHOOK: Input: default@web_site
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ws_wh as
(select ws1.ws_order_number,ws1.ws_warehouse_sk wh1,ws2.ws_warehouse_sk wh2
 from web_sales ws1,web_sales ws2
 where ws1.ws_order_number = ws2.ws_order_number
   and ws1.ws_warehouse_sk <> ws2.ws_warehouse_sk)
 select  
   count(distinct ws_order_number) as `order count`
  ,sum(ws_ext_ship_cost) as `total shipping cost`
  ,sum(ws_net_profit) as `total net profit`
from
   web_sales ws1
  ,date_dim
  ,customer_address
  ,web_site
where
    d_date between '1999-5-01' and 
           (cast('1999-5-01' as date) + 60 days)
and ws1.ws_ship_date_sk = d_date_sk
and ws1.ws_ship_addr_sk = ca_address_sk
and ca_state = 'TX'
and ws1.ws_web_site_sk = web_site_sk
and web_company_name = 'pri'
and ws1.ws_order_number in (select ws_order_number
                            from ws_wh)
and ws1.ws_order_number in (select wr_order_number
                            from web_returns,ws_wh
                            where wr_order_number = ws_wh.ws_order_number)
order by count(distinct ws_order_number)
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@web_returns
POSTHOOK: Input: default@web_sales
POSTHOOK: Input: default@web_site
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 8 (BROADCAST_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 13 <- Map 18 (SIMPLE_EDGE), Reducer 12 (ONE_TO_ONE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Map 11 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (BROADCAST_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 3 <- Reducer 16 (ONE_TO_ONE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 14 (ONE_TO_ONE_EDGE), Reducer 3 (ONE_TO_ONE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_156]
        Limit [LIM_155] (rows=1 width=240)
          Number of rows:100
          Select Operator [SEL_154] (rows=1 width=240)
            Output:["_col0","_col1","_col2"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_153]
              Select Operator [SEL_152] (rows=1 width=240)
                Output:["_col1","_col2","_col3"]
                Group By Operator [GBY_151] (rows=1 width=232)
                  Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"]
                <-Reducer 5 [CUSTOM_SIMPLE_EDGE] vectorized
                  PARTITION_ONLY_SHUFFLE [RS_150]
                    Group By Operator [GBY_149] (rows=1 width=232)
                      Output:["_col0","_col1","_col2"],aggregations:["count(_col0)","sum(_col1)","sum(_col2)"]
                      Group By Operator [GBY_148] (rows=2511437 width=228)
                        Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                      <-Reducer 4 [SIMPLE_EDGE]
                        SHUFFLE [RS_109]
                          PartitionCols:_col0
                          Group By Operator [GBY_108] (rows=2511437 width=228)
                            Output:["_col0","_col2","_col3"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col3
                            Merge Join Operator [MERGEJOIN_121] (rows=5022875 width=227)
                              Conds:RS_55._col3=RS_147._col0(Inner),Output:["_col3","_col4","_col5"]
                            <-Reducer 14 [ONE_TO_ONE_EDGE] vectorized
                              FORWARD [RS_147]
                                PartitionCols:_col0
                                Group By Operator [GBY_146] (rows=8007986 width=4)
                                  Output:["_col0"],keys:KEY._col0
                                <-Reducer 13 [SIMPLE_EDGE]
                                  SHUFFLE [RS_40]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_39] (rows=1384229738 width=4)
                                      Output:["_col0"],keys:_col14
                                      Merge Join Operator [MERGEJOIN_115] (rows=1384229738 width=4)
                                        Conds:RS_35._col0=RS_145.wr_order_number(Inner),Output:["_col14"]
                                      <-Map 18 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_145]
                                          PartitionCols:wr_order_number
                                          TableScan [TS_34] (rows=14398467 width=4)
                                            default@web_returns,web_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["wr_order_number"]
                                      <-Reducer 12 [ONE_TO_ONE_EDGE]
                                        FORWARD [RS_35]
                                          PartitionCols:_col0
                                          Select Operator [SEL_33] (rows=1411940834 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_32] (rows=1411940834 width=11)
                                              predicate:(_col0 <> _col2)
                                              Merge Join Operator [MERGEJOIN_114] (rows=1411940834 width=11)
                                                Conds:RS_138._col1=RS_141._col1(Inner),Output:["_col0","_col1","_col2"]
                                              <-Map 11 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_138]
                                                  PartitionCols:_col1
                                                  Select Operator [SEL_137] (rows=144002668 width=7)
                                                    Output:["_col0","_col1"]
                                                    TableScan [TS_25] (rows=144002668 width=7)
                                                      default@web_sales,ws1,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_warehouse_sk","ws_order_number"]
                                              <-Map 17 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_141]
                                                  PartitionCols:_col1
                                                  Select Operator [SEL_140] (rows=144002668 width=7)
                                                    Output:["_col0","_col1"]
                                                    TableScan [TS_27] (rows=144002668 width=7)
                                                      default@web_sales,ws2,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_warehouse_sk","ws_order_number"]
                            <-Reducer 3 [ONE_TO_ONE_EDGE]
                              FORWARD [RS_55]
                                PartitionCols:_col3
                                Merge Join Operator [MERGEJOIN_120] (rows=5022875 width=227)
                                  Conds:RS_52._col3=RS_144._col0(Inner),Output:["_col3","_col4","_col5"]
                                <-Reducer 16 [ONE_TO_ONE_EDGE] vectorized
                                  FORWARD [RS_144]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_143] (rows=14686712 width=4)
                                      Output:["_col0"],keys:KEY._col0
                                    <-Reducer 15 [SIMPLE_EDGE]
                                      SHUFFLE [RS_22]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_21] (rows=1411940834 width=4)
                                          Output:["_col0"],keys:_col1
                                          Select Operator [SEL_20] (rows=1411940834 width=11)
                                            Output:["_col1"]
                                            Filter Operator [FIL_19] (rows=1411940834 width=11)
                                              predicate:(_col0 <> _col2)
                                              Merge Join Operator [MERGEJOIN_116] (rows=1411940834 width=11)
                                                Conds:RS_139._col1=RS_142._col1(Inner),Output:["_col0","_col1","_col2"]
                                              <-Map 11 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_139]
                                                  PartitionCols:_col1
                                                   Please refer to the previous Select Operator [SEL_137]
                                              <-Map 17 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_142]
                                                  PartitionCols:_col1
                                                   Please refer to the previous Select Operator [SEL_140]
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_52]
                                    PartitionCols:_col3
                                    Map Join Operator [MAPJOIN_119] (rows=5022875 width=227)
                                      Conds:MERGEJOIN_118._col2=RS_136._col0(Inner),HybridGraceHashJoin:true,Output:["_col3","_col4","_col5"]
                                    <-Map 10 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_136]
                                        PartitionCols:_col0
                                        Select Operator [SEL_135] (rows=12 width=4)
                                          Output:["_col0"]
                                          Filter Operator [FIL_134] (rows=12 width=92)
                                            predicate:(web_company_name = 'pri')
                                            TableScan [TS_9] (rows=84 width=92)
                                              default@web_site,web_site,Tbl:COMPLETE,Col:COMPLETE,Output:["web_site_sk","web_company_name"]
                                    <-Merge Join Operator [MERGEJOIN_118] (rows=15673790 width=231)
                                        Conds:RS_130._col1=RS_133._col0(Inner),Output:["_col2","_col3","_col4","_col5"]
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_130]
                                          PartitionCols:_col1
                                          Map Join Operator [MAPJOIN_129] (rows=15987241 width=235)
                                            Conds:SEL_128._col0=RS_126._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col5"]
                                          <-Map 8 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_126]
                                              PartitionCols:_col0
                                              Select Operator [SEL_125] (rows=8116 width=98)
                                                Output:["_col0"]
                                                Filter Operator [FIL_124] (rows=8116 width=98)
                                                  predicate:CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'1999-05-01 00:00:00' AND TIMESTAMP'1999-06-30 00:00:00'
                                                  TableScan [TS_3] (rows=73049 width=98)
                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date"]
                                          <-Select Operator [SEL_128] (rows=143895019 width=239)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                              Filter Operator [FIL_127] (rows=143895019 width=239)
                                                predicate:(ws_ship_addr_sk is not null and ws_ship_date_sk is not null and ws_web_site_sk is not null)
                                                TableScan [TS_0] (rows=144002668 width=239)
                                                  default@web_sales,ws1,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_ship_date_sk","ws_ship_addr_sk","ws_web_site_sk","ws_order_number","ws_ext_ship_cost","ws_net_profit"]
                                      <-Map 9 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_133]
                                          PartitionCols:_col0
                                          Select Operator [SEL_132] (rows=784314 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_131] (rows=784314 width=90)
                                              predicate:(ca_state = 'TX')
                                              TableScan [TS_6] (rows=40000000 width=90)
                                                default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_state"]

