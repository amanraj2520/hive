PREHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.customer_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  2001
   and t_s_secyear.dyear = 2001+1
   and t_c_firstyear.dyear =  2001
   and t_c_secyear.dyear =  2001+1
   and t_w_firstyear.dyear = 2001
   and t_w_secyear.dyear = 2001+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_preferred_cust_flag
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.customer_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  2001
   and t_s_secyear.dyear = 2001+1
   and t_c_firstyear.dyear =  2001
   and t_c_secyear.dyear =  2001+1
   and t_w_firstyear.dyear = 2001
   and t_w_secyear.dyear = 2001+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_preferred_cust_flag
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 19 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 13 <- Map 12 (SIMPLE_EDGE), Map 29 (SIMPLE_EDGE)
Reducer 14 <- Map 27 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Map 12 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 17 <- Map 27 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (SIMPLE_EDGE), Reducer 23 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 12 (SIMPLE_EDGE)
Reducer 20 <- Map 12 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 21 <- Map 27 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Reducer 22 (SIMPLE_EDGE), Reducer 26 (SIMPLE_EDGE)
Reducer 24 <- Map 12 (SIMPLE_EDGE), Map 29 (SIMPLE_EDGE)
Reducer 25 <- Map 27 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE)
Reducer 26 <- Reducer 25 (SIMPLE_EDGE)
Reducer 3 <- Map 27 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 11 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Map 1 (SIMPLE_EDGE), Map 12 (SIMPLE_EDGE)
Reducer 8 <- Map 27 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_319]
        Limit [LIM_318] (rows=100 width=85)
          Number of rows:100
          Select Operator [SEL_317] (rows=7323197 width=85)
            Output:["_col0"]
          <-Reducer 5 [SIMPLE_EDGE]
            SHUFFLE [RS_137]
              Select Operator [SEL_136] (rows=7323197 width=85)
                Output:["_col0"]
                Filter Operator [FIL_135] (rows=7323197 width=433)
                  predicate:CASE WHEN (_col5) THEN (CASE WHEN (_col6) THEN ((_col7 > (_col1 / _col4))) ELSE ((null > (_col1 / _col4))) END) ELSE (_col8) END
                  Merge Join Operator [MERGEJOIN_268] (rows=14646395 width=433)
                    Conds:RS_293._col0=RS_133._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6","_col7","_col8"]
                  <-Reducer 11 [SIMPLE_EDGE]
                    SHUFFLE [RS_133]
                      PartitionCols:_col0
                      Select Operator [SEL_131] (rows=12248093 width=421)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                        Filter Operator [FIL_130] (rows=12248093 width=649)
                          predicate:CASE WHEN (_col4) THEN (CASE WHEN (_col3) THEN (((_col11 / _col2) > _col5)) ELSE (_col6) END) ELSE (CASE WHEN (_col3) THEN (((_col11 / _col2) > null)) ELSE (null) END) END
                          Merge Join Operator [MERGEJOIN_267] (rows=24496186 width=649)
                            Conds:RS_127._col0=RS_316._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col8","_col9","_col11"]
                          <-Reducer 10 [SIMPLE_EDGE]
                            SHUFFLE [RS_127]
                              PartitionCols:_col0
                              Merge Join Operator [MERGEJOIN_266] (rows=20485011 width=537)
                                Conds:RS_124._col0=RS_298._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col8","_col9"]
                              <-Reducer 19 [SIMPLE_EDGE]
                                SHUFFLE [RS_124]
                                  PartitionCols:_col0
                                  Select Operator [SEL_84] (rows=31888273 width=421)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                    Merge Join Operator [MERGEJOIN_265] (rows=31888273 width=529)
                                      Conds:RS_81._col0=RS_302._col0(Inner),Output:["_col0","_col1","_col2","_col4","_col5","_col7","_col8"]
                                    <-Reducer 18 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_302]
                                        PartitionCols:_col0
                                        Select Operator [SEL_301] (rows=80000000 width=297)
                                          Output:["_col0","_col1","_col2"]
                                          Group By Operator [GBY_300] (rows=80000000 width=764)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                          <-Reducer 17 [SIMPLE_EDGE]
                                            SHUFFLE [RS_75]
                                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                              Group By Operator [GBY_74] (rows=80000000 width=764)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col2)"],keys:_col5, _col6, _col7, _col8, _col9, _col10, _col11
                                                Merge Join Operator [MERGEJOIN_259] (rows=187573258 width=764)
                                                  Conds:RS_70._col1=RS_287._col0(Inner),Output:["_col2","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                                <-Map 27 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_287]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_284] (rows=80000000 width=656)
                                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                                      TableScan [TS_6] (rows=80000000 width=656)
                                                        default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_customer_id","c_first_name","c_last_name","c_preferred_cust_flag","c_birth_country","c_login","c_email_address"]
                                                <-Reducer 16 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_70]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_258] (rows=187573258 width=115)
                                                      Conds:RS_67._col0=RS_280._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 12 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_280]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_274] (rows=652 width=4)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_270] (rows=652 width=8)
                                                            predicate:(d_year = 2002)
                                                            TableScan [TS_3] (rows=73049 width=8)
                                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                    <-Map 28 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_67]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_61] (rows=525327388 width=119)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_240] (rows=525327388 width=435)
                                                            predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                            TableScan [TS_59] (rows=575995635 width=435)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_discount_amt","ss_ext_sales_price","ss_ext_wholesale_cost","ss_ext_list_price"]
                                    <-Reducer 23 [SIMPLE_EDGE]
                                      SHUFFLE [RS_81]
                                        PartitionCols:_col0
                                        Merge Join Operator [MERGEJOIN_264] (rows=26666666 width=332)
                                          Conds:RS_307._col0=RS_313._col0(Inner),Output:["_col0","_col1","_col2","_col4","_col5"]
                                        <-Reducer 22 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_307]
                                            PartitionCols:_col0
                                            Select Operator [SEL_306] (rows=26666666 width=216)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_305] (rows=26666666 width=212)
                                                predicate:(_col7 > 0)
                                                Select Operator [SEL_304] (rows=80000000 width=212)
                                                  Output:["_col0","_col7"]
                                                  Group By Operator [GBY_303] (rows=80000000 width=764)
                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                                  <-Reducer 21 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_35]
                                                      PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                                      Group By Operator [GBY_34] (rows=80000000 width=764)
                                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col2)"],keys:_col5, _col6, _col7, _col8, _col9, _col10, _col11
                                                        Merge Join Operator [MERGEJOIN_255] (rows=187573258 width=764)
                                                          Conds:RS_30._col1=RS_288._col0(Inner),Output:["_col2","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                                        <-Map 27 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_288]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_284]
                                                        <-Reducer 20 [SIMPLE_EDGE]
                                                          SHUFFLE [RS_30]
                                                            PartitionCols:_col1
                                                            Merge Join Operator [MERGEJOIN_254] (rows=187573258 width=115)
                                                              Conds:RS_27._col0=RS_281._col0(Inner),Output:["_col1","_col2"]
                                                            <-Map 12 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_281]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_275] (rows=652 width=4)
                                                                  Output:["_col0"]
                                                                  Filter Operator [FIL_271] (rows=652 width=8)
                                                                    predicate:(d_year = 2001)
                                                                     Please refer to the previous TableScan [TS_3]
                                                            <-Map 28 [SIMPLE_EDGE]
                                                              SHUFFLE [RS_27]
                                                                PartitionCols:_col0
                                                                 Please refer to the previous Select Operator [SEL_61]
                                        <-Reducer 26 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_313]
                                            PartitionCols:_col0
                                            Select Operator [SEL_312] (rows=26666666 width=216)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_311] (rows=26666666 width=212)
                                                predicate:(_col7 > 0)
                                                Select Operator [SEL_310] (rows=80000000 width=212)
                                                  Output:["_col0","_col7"]
                                                  Group By Operator [GBY_309] (rows=80000000 width=764)
                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                                  <-Reducer 25 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_55]
                                                      PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                                      Group By Operator [GBY_54] (rows=80000000 width=764)
                                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col2)"],keys:_col5, _col6, _col7, _col8, _col9, _col10, _col11
                                                        Merge Join Operator [MERGEJOIN_257] (rows=101084444 width=764)
                                                          Conds:RS_50._col1=RS_289._col0(Inner),Output:["_col2","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                                        <-Map 27 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_289]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_284]
                                                        <-Reducer 24 [SIMPLE_EDGE]
                                                          SHUFFLE [RS_50]
                                                            PartitionCols:_col1
                                                            Merge Join Operator [MERGEJOIN_256] (rows=101084444 width=115)
                                                              Conds:RS_47._col0=RS_282._col0(Inner),Output:["_col1","_col2"]
                                                            <-Map 12 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_282]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_276] (rows=652 width=4)
                                                                  Output:["_col0"]
                                                                  Filter Operator [FIL_272] (rows=652 width=8)
                                                                    predicate:(d_year = 2001)
                                                                     Please refer to the previous TableScan [TS_3]
                                                            <-Map 29 [SIMPLE_EDGE]
                                                              SHUFFLE [RS_47]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_107] (rows=285117831 width=119)
                                                                  Output:["_col0","_col1","_col2"]
                                                                  Filter Operator [FIL_246] (rows=285117831 width=453)
                                                                    predicate:(cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                                                    TableScan [TS_105] (rows=287989836 width=453)
                                                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_ext_discount_amt","cs_ext_sales_price","cs_ext_wholesale_cost","cs_ext_list_price"]
                              <-Reducer 9 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_298]
                                  PartitionCols:_col0
                                  Select Operator [SEL_297] (rows=17130654 width=216)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_296] (rows=17130654 width=212)
                                      predicate:(_col7 > 0)
                                      Select Operator [SEL_295] (rows=51391963 width=212)
                                        Output:["_col0","_col7"]
                                        Group By Operator [GBY_294] (rows=51391963 width=764)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                        <-Reducer 8 [SIMPLE_EDGE]
                                          SHUFFLE [RS_101]
                                            PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                            Group By Operator [GBY_100] (rows=51391963 width=764)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col2)"],keys:_col5, _col6, _col7, _col8, _col9, _col10, _col11
                                              Merge Join Operator [MERGEJOIN_261] (rows=51391963 width=764)
                                                Conds:RS_96._col1=RS_290._col0(Inner),Output:["_col2","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                              <-Map 27 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_290]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_284]
                                              <-Reducer 7 [SIMPLE_EDGE]
                                                SHUFFLE [RS_96]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_260] (rows=51391963 width=115)
                                                    Conds:RS_93._col0=RS_283._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 12 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_283]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_277] (rows=652 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_273] (rows=652 width=8)
                                                          predicate:(d_year = 2001)
                                                           Please refer to the previous TableScan [TS_3]
                                                  <-Map 1 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_93]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_2] (rows=143930993 width=119)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_231] (rows=143930993 width=455)
                                                          predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                                          TableScan [TS_0] (rows=144002668 width=455)
                                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_ext_discount_amt","ws_ext_sales_price","ws_ext_wholesale_cost","ws_ext_list_price"]
                          <-Reducer 15 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_316]
                              PartitionCols:_col0
                              Select Operator [SEL_315] (rows=80000000 width=212)
                                Output:["_col0","_col1"]
                                Group By Operator [GBY_314] (rows=80000000 width=764)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                <-Reducer 14 [SIMPLE_EDGE]
                                  SHUFFLE [RS_121]
                                    PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                    Group By Operator [GBY_120] (rows=80000000 width=764)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col2)"],keys:_col5, _col6, _col7, _col8, _col9, _col10, _col11
                                      Merge Join Operator [MERGEJOIN_263] (rows=101084444 width=764)
                                        Conds:RS_116._col1=RS_286._col0(Inner),Output:["_col2","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                      <-Map 27 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_286]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_284]
                                      <-Reducer 13 [SIMPLE_EDGE]
                                        SHUFFLE [RS_116]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_262] (rows=101084444 width=115)
                                            Conds:RS_113._col0=RS_279._col0(Inner),Output:["_col1","_col2"]
                                          <-Map 12 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_279]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_274]
                                          <-Map 29 [SIMPLE_EDGE]
                                            SHUFFLE [RS_113]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_107]
                  <-Reducer 4 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_293]
                      PartitionCols:_col0
                      Select Operator [SEL_292] (rows=51391963 width=212)
                        Output:["_col0","_col1"]
                        Group By Operator [GBY_291] (rows=51391963 width=764)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                        <-Reducer 3 [SIMPLE_EDGE]
                          SHUFFLE [RS_16]
                            PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                            Group By Operator [GBY_15] (rows=51391963 width=764)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col2)"],keys:_col5, _col6, _col7, _col8, _col9, _col10, _col11
                              Merge Join Operator [MERGEJOIN_253] (rows=51391963 width=764)
                                Conds:RS_11._col1=RS_285._col0(Inner),Output:["_col2","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                              <-Map 27 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_285]
                                  PartitionCols:_col0
                                   Please refer to the previous Select Operator [SEL_284]
                              <-Reducer 2 [SIMPLE_EDGE]
                                SHUFFLE [RS_11]
                                  PartitionCols:_col1
                                  Merge Join Operator [MERGEJOIN_252] (rows=51391963 width=115)
                                    Conds:RS_8._col0=RS_278._col0(Inner),Output:["_col1","_col2"]
                                  <-Map 12 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_278]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_274]
                                  <-Map 1 [SIMPLE_EDGE]
                                    SHUFFLE [RS_8]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_2]

