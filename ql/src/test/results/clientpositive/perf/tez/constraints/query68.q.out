PREHOOK: query: explain
select  c_last_name
       ,c_first_name
       ,ca_city
       ,bought_city
       ,ss_ticket_number
       ,extended_price
       ,extended_tax
       ,list_price
 from (select ss_ticket_number
             ,ss_customer_sk
             ,ca_city bought_city
             ,sum(ss_ext_sales_price) extended_price 
             ,sum(ss_ext_list_price) list_price
             ,sum(ss_ext_tax) extended_tax 
       from store_sales
           ,date_dim
           ,store
           ,household_demographics
           ,customer_address 
       where store_sales.ss_sold_date_sk = date_dim.d_date_sk
         and store_sales.ss_store_sk = store.s_store_sk  
        and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
        and store_sales.ss_addr_sk = customer_address.ca_address_sk
        and date_dim.d_dom between 1 and 2 
        and (household_demographics.hd_dep_count = 2 or
             household_demographics.hd_vehicle_count= 1)
        and date_dim.d_year in (1998,1998+1,1998+2)
        and store.s_city in ('Cedar Grove','Wildwood')
       group by ss_ticket_number
               ,ss_customer_sk
               ,ss_addr_sk,ca_city) dn
      ,customer
      ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
   and customer.c_current_addr_sk = current_addr.ca_address_sk
   and current_addr.ca_city <> bought_city
 order by c_last_name
         ,ss_ticket_number
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  c_last_name
       ,c_first_name
       ,ca_city
       ,bought_city
       ,ss_ticket_number
       ,extended_price
       ,extended_tax
       ,list_price
 from (select ss_ticket_number
             ,ss_customer_sk
             ,ca_city bought_city
             ,sum(ss_ext_sales_price) extended_price 
             ,sum(ss_ext_list_price) list_price
             ,sum(ss_ext_tax) extended_tax 
       from store_sales
           ,date_dim
           ,store
           ,household_demographics
           ,customer_address 
       where store_sales.ss_sold_date_sk = date_dim.d_date_sk
         and store_sales.ss_store_sk = store.s_store_sk  
        and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
        and store_sales.ss_addr_sk = customer_address.ca_address_sk
        and date_dim.d_dom between 1 and 2 
        and (household_demographics.hd_dep_count = 2 or
             household_demographics.hd_vehicle_count= 1)
        and date_dim.d_year in (1998,1998+1,1998+2)
        and store.s_city in ('Cedar Grove','Wildwood')
       group by ss_ticket_number
               ,ss_customer_sk
               ,ss_addr_sk,ca_city) dn
      ,customer
      ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
   and customer.c_current_addr_sk = current_addr.ca_address_sk
   and current_addr.ca_city <> bought_city
 order by c_last_name
         ,ss_ticket_number
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 8 <- Map 10 (BROADCAST_EDGE), Map 11 (BROADCAST_EDGE), Map 9 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 5 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 6 <- Map 5 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 4 vectorized
      File Output Operator [FS_115]
        Limit [LIM_114] (rows=100 width=706)
          Number of rows:100
          Select Operator [SEL_113] (rows=4418634 width=706)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
          <-Reducer 3 [SIMPLE_EDGE]
            SHUFFLE [RS_45]
              Select Operator [SEL_44] (rows=4418634 width=706)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                Filter Operator [FIL_43] (rows=4418634 width=706)
                  predicate:(_col5 <> _col8)
                  Merge Join Operator [MERGEJOIN_84] (rows=4418634 width=706)
                    Conds:RS_40._col0=RS_112._col1(Inner),Output:["_col2","_col3","_col5","_col6","_col8","_col9","_col10","_col11"]
                  <-Reducer 2 [SIMPLE_EDGE]
                    SHUFFLE [RS_40]
                      PartitionCols:_col0
                      Merge Join Operator [MERGEJOIN_79] (rows=80000000 width=277)
                        Conds:RS_90._col1=RS_92._col0(Inner),Output:["_col0","_col2","_col3","_col5"]
                      <-Map 5 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_92]
                          PartitionCols:_col0
                          Select Operator [SEL_91] (rows=40000000 width=97)
                            Output:["_col0","_col1"]
                            TableScan [TS_3] (rows=40000000 width=97)
                              default@customer_address,current_addr,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_city"]
                      <-Map 1 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_90]
                          PartitionCols:_col1
                          Select Operator [SEL_89] (rows=80000000 width=188)
                            Output:["_col0","_col1","_col2","_col3"]
                            Filter Operator [FIL_88] (rows=80000000 width=188)
                              predicate:c_current_addr_sk is not null
                              TableScan [TS_0] (rows=80000000 width=188)
                                default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_addr_sk","c_first_name","c_last_name"]
                  <-Reducer 7 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_112]
                      PartitionCols:_col1
                      Select Operator [SEL_111] (rows=4418634 width=433)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                        Group By Operator [GBY_110] (rows=4418634 width=433)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                        <-Reducer 6 [SIMPLE_EDGE]
                          SHUFFLE [RS_34]
                            PartitionCols:_col0, _col1, _col2, _col3
                            Group By Operator [GBY_33] (rows=4418634 width=433)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)","sum(_col6)"],keys:_col0, _col9, _col2, _col3
                              Merge Join Operator [MERGEJOIN_83] (rows=4418634 width=97)
                                Conds:RS_109._col2=RS_93._col0(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col9"]
                              <-Map 5 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_93]
                                  PartitionCols:_col0
                                   Please refer to the previous Select Operator [SEL_91]
                              <-Map 8 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_109]
                                  PartitionCols:_col2
                                  Map Join Operator [MAPJOIN_108] (rows=4418634 width=4)
                                    Conds:SEL_107._col1=RS_102._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col2","_col3","_col4","_col5","_col6"]
                                  <-Map 11 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_102]
                                      PartitionCols:_col0
                                      Select Operator [SEL_101] (rows=1855 width=4)
                                        Output:["_col0"]
                                        Filter Operator [FIL_100] (rows=1855 width=12)
                                          predicate:((hd_dep_count = 2) or (hd_vehicle_count = 1))
                                          TableScan [TS_21] (rows=7200 width=12)
                                            default@household_demographics,household_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_dep_count","hd_vehicle_count"]
                                  <-Select Operator [SEL_107] (rows=17150490 width=4)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                      Map Join Operator [MAPJOIN_106] (rows=17150490 width=4)
                                        Conds:MAPJOIN_105._col4=RS_99._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col5","_col6","_col7","_col8"]
                                      <-Map 10 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_99]
                                          PartitionCols:_col0
                                          Select Operator [SEL_98] (rows=85 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_97] (rows=85 width=97)
                                              predicate:(s_city) IN ('Cedar Grove', 'Wildwood')
                                              TableScan [TS_11] (rows=1704 width=97)
                                                default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_city"]
                                      <-Map Join Operator [MAPJOIN_105] (rows=42598570 width=185)
                                          Conds:SEL_104._col0=RS_96._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                        <-Map 9 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_96]
                                            PartitionCols:_col0
                                            Select Operator [SEL_95] (rows=170 width=4)
                                              Output:["_col0"]
                                              Filter Operator [FIL_94] (rows=170 width=12)
                                                predicate:((d_year) IN (1998, 1999, 2000) and d_dom BETWEEN 1 AND 2)
                                                TableScan [TS_8] (rows=73049 width=12)
                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_dom"]
                                        <-Select Operator [SEL_104] (rows=457565061 width=343)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                            Filter Operator [FIL_103] (rows=457565061 width=343)
                                              predicate:(ss_addr_sk is not null and ss_customer_sk is not null and ss_hdemo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                              TableScan [TS_5] (rows=575995635 width=343)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_ticket_number","ss_ext_sales_price","ss_ext_list_price","ss_ext_tax"]

