PREHOOK: query: explain
select  
 'web' as channel
 ,web.item
 ,web.return_ratio
 ,web.return_rank
 ,web.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select ws.ws_item_sk as item
 		,(cast(sum(coalesce(wr.wr_return_quantity,0)) as dec(15,4))/
 		cast(sum(coalesce(ws.ws_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(wr.wr_return_amt,0)) as dec(15,4))/
 		cast(sum(coalesce(ws.ws_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		 web_sales ws left outer join web_returns wr 
 			on (ws.ws_order_number = wr.wr_order_number and 
 			ws.ws_item_sk = wr.wr_item_sk)
                 ,date_dim
 		where 
 			wr.wr_return_amt > 10000 
 			and ws.ws_net_profit > 1
                         and ws.ws_net_paid > 0
                         and ws.ws_quantity > 0
                         and ws_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
 		group by ws.ws_item_sk
 	) in_web
 ) web
 where 
 (
 web.return_rank <= 10
 or
 web.currency_rank <= 10
 )
 union
 select 
 'catalog' as channel
 ,catalog.item
 ,catalog.return_ratio
 ,catalog.return_rank
 ,catalog.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select 
 		cs.cs_item_sk as item
 		,(cast(sum(coalesce(cr.cr_return_quantity,0)) as dec(15,4))/
 		cast(sum(coalesce(cs.cs_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(cr.cr_return_amount,0)) as dec(15,4))/
 		cast(sum(coalesce(cs.cs_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		catalog_sales cs left outer join catalog_returns cr
 			on (cs.cs_order_number = cr.cr_order_number and 
 			cs.cs_item_sk = cr.cr_item_sk)
                ,date_dim
 		where 
 			cr.cr_return_amount > 10000 
 			and cs.cs_net_profit > 1
                         and cs.cs_net_paid > 0
                         and cs.cs_quantity > 0
                         and cs_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
                 group by cs.cs_item_sk
 	) in_cat
 ) catalog
 where 
 (
 catalog.return_rank <= 10
 or
 catalog.currency_rank <=10
 )
 union
 select 
 'store' as channel
 ,store.item
 ,store.return_ratio
 ,store.return_rank
 ,store.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select sts.ss_item_sk as item
 		,(cast(sum(coalesce(sr.sr_return_quantity,0)) as dec(15,4))/cast(sum(coalesce(sts.ss_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(sr.sr_return_amt,0)) as dec(15,4))/cast(sum(coalesce(sts.ss_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		store_sales sts left outer join store_returns sr
 			on (sts.ss_ticket_number = sr.sr_ticket_number and sts.ss_item_sk = sr.sr_item_sk)
                ,date_dim
 		where 
 			sr.sr_return_amt > 10000 
 			and sts.ss_net_profit > 1
                         and sts.ss_net_paid > 0 
                         and sts.ss_quantity > 0
                         and ss_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
 		group by sts.ss_item_sk
 	) in_store
 ) store
 where  (
 store.return_rank <= 10
 or 
 store.currency_rank <= 10
 )
 order by 1,4,5
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_returns
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  
 'web' as channel
 ,web.item
 ,web.return_ratio
 ,web.return_rank
 ,web.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select ws.ws_item_sk as item
 		,(cast(sum(coalesce(wr.wr_return_quantity,0)) as dec(15,4))/
 		cast(sum(coalesce(ws.ws_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(wr.wr_return_amt,0)) as dec(15,4))/
 		cast(sum(coalesce(ws.ws_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		 web_sales ws left outer join web_returns wr 
 			on (ws.ws_order_number = wr.wr_order_number and 
 			ws.ws_item_sk = wr.wr_item_sk)
                 ,date_dim
 		where 
 			wr.wr_return_amt > 10000 
 			and ws.ws_net_profit > 1
                         and ws.ws_net_paid > 0
                         and ws.ws_quantity > 0
                         and ws_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
 		group by ws.ws_item_sk
 	) in_web
 ) web
 where 
 (
 web.return_rank <= 10
 or
 web.currency_rank <= 10
 )
 union
 select 
 'catalog' as channel
 ,catalog.item
 ,catalog.return_ratio
 ,catalog.return_rank
 ,catalog.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select 
 		cs.cs_item_sk as item
 		,(cast(sum(coalesce(cr.cr_return_quantity,0)) as dec(15,4))/
 		cast(sum(coalesce(cs.cs_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(cr.cr_return_amount,0)) as dec(15,4))/
 		cast(sum(coalesce(cs.cs_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		catalog_sales cs left outer join catalog_returns cr
 			on (cs.cs_order_number = cr.cr_order_number and 
 			cs.cs_item_sk = cr.cr_item_sk)
                ,date_dim
 		where 
 			cr.cr_return_amount > 10000 
 			and cs.cs_net_profit > 1
                         and cs.cs_net_paid > 0
                         and cs.cs_quantity > 0
                         and cs_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
                 group by cs.cs_item_sk
 	) in_cat
 ) catalog
 where 
 (
 catalog.return_rank <= 10
 or
 catalog.currency_rank <=10
 )
 union
 select 
 'store' as channel
 ,store.item
 ,store.return_ratio
 ,store.return_rank
 ,store.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select sts.ss_item_sk as item
 		,(cast(sum(coalesce(sr.sr_return_quantity,0)) as dec(15,4))/cast(sum(coalesce(sts.ss_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(sr.sr_return_amt,0)) as dec(15,4))/cast(sum(coalesce(sts.ss_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		store_sales sts left outer join store_returns sr
 			on (sts.ss_ticket_number = sr.sr_ticket_number and sts.ss_item_sk = sr.sr_item_sk)
                ,date_dim
 		where 
 			sr.sr_return_amt > 10000 
 			and sts.ss_net_profit > 1
                         and sts.ss_net_paid > 0 
                         and sts.ss_quantity > 0
                         and ss_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
 		group by sts.ss_item_sk
 	) in_store
 ) store
 where  (
 store.return_rank <= 10
 or 
 store.currency_rank <= 10
 )
 order by 1,4,5
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_returns
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 11 (BROADCAST_EDGE)
Map 13 <- Map 11 (BROADCAST_EDGE)
Map 19 <- Map 11 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 14 <- Map 13 (SIMPLE_EDGE), Map 18 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE), Union 6 (CONTAINS)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 12 (SIMPLE_EDGE)
Reducer 20 <- Map 19 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Reducer 22 (SIMPLE_EDGE), Union 8 (CONTAINS)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE), Union 6 (CONTAINS)
Reducer 7 <- Union 6 (SIMPLE_EDGE), Union 8 (CONTAINS)
Reducer 9 <- Union 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 10 vectorized
      File Output Operator [FS_213]
        Limit [LIM_212] (rows=100 width=215)
          Number of rows:100
          Select Operator [SEL_211] (rows=4868 width=215)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Reducer 9 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_210]
              Select Operator [SEL_209] (rows=4868 width=215)
                Output:["_col0","_col1","_col2","_col3","_col4"]
                Group By Operator [GBY_208] (rows=4868 width=215)
                  Output:["_col0","_col1","_col2","_col3","_col4"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                <-Union 8 [SIMPLE_EDGE]
                  <-Reducer 23 [CONTAINS] vectorized
                    Reduce Output Operator [RS_252]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_251] (rows=4868 width=215)
                        Output:["_col0","_col1","_col2","_col3","_col4"],keys:_col0, _col3, _col4, _col1, _col2
                        Top N Key Operator [TNK_250] (rows=4868 width=214)
                          keys:_col0, _col3, _col4, _col1, _col2,sort order:+++++,top n:100
                          Select Operator [SEL_249] (rows=1580 width=213)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Filter Operator [FIL_248] (rows=1580 width=248)
                              predicate:((_col0 <= 10) or (rank_window_1 <= 10))
                              PTF Operator [PTF_247] (rows=2371 width=248)
                                Function definitions:[{},{"name:":"windowingtablefunction","order by:":"(CAST( _col4 AS decimal(15,4)) / CAST( _col5 AS decimal(15,4))) ASC NULLS LAST","partition by:":"0"}]
                                Select Operator [SEL_246] (rows=2371 width=248)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                <-Reducer 22 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_245]
                                    PartitionCols:0
                                    Select Operator [SEL_244] (rows=2371 width=244)
                                      Output:["rank_window_0","_col0","_col1","_col2","_col3","_col4"]
                                      PTF Operator [PTF_243] (rows=2371 width=244)
                                        Function definitions:[{},{"name:":"windowingtablefunction","order by:":"(CAST( _col1 AS decimal(15,4)) / CAST( _col2 AS decimal(15,4))) ASC NULLS LAST","partition by:":"0"}]
                                        Select Operator [SEL_242] (rows=2371 width=244)
                                          Output:["_col0","_col1","_col2","_col3","_col4"]
                                        <-Reducer 21 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_241]
                                            PartitionCols:0
                                            Group By Operator [GBY_240] (rows=2371 width=244)
                                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0
                                            <-Reducer 20 [SIMPLE_EDGE]
                                              SHUFFLE [RS_89]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_88] (rows=75872 width=244)
                                                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)","sum(_col5)"],keys:_col1
                                                  Select Operator [SEL_86] (rows=35980334 width=224)
                                                    Output:["_col1","_col2","_col3","_col4","_col5"]
                                                    Merge Join Operator [MERGEJOIN_147] (rows=35980334 width=224)
                                                      Conds:RS_236._col1, _col2=RS_239._col0, _col1(Inner),Output:["_col1","_col3","_col4","_col9","_col10"]
                                                    <-Map 19 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_236]
                                                        PartitionCols:_col1, _col2
                                                        Map Join Operator [MAPJOIN_235] (rows=21823355 width=109)
                                                          Conds:SEL_234._col0=RS_183._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4"]
                                                        <-Map 11 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_183]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_180] (rows=652 width=4)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_179] (rows=652 width=12)
                                                                predicate:((d_moy = 12) and (d_year = 2000))
                                                                TableScan [TS_3] (rows=73049 width=12)
                                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                        <-Select Operator [SEL_234] (rows=61119617 width=229)
                                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                                            Filter Operator [FIL_233] (rows=61119617 width=229)
                                                              predicate:((ss_net_paid > 0) and (ss_net_profit > 1) and (ss_quantity > 0) and ss_sold_date_sk is not null)
                                                              TableScan [TS_71] (rows=575995635 width=229)
                                                                default@store_sales,sts,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_ticket_number","ss_quantity","ss_net_paid","ss_net_profit"]
                                                    <-Map 24 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_239]
                                                        PartitionCols:_col0, _col1
                                                        Select Operator [SEL_238] (rows=19197050 width=119)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_237] (rows=19197050 width=119)
                                                            predicate:(sr_return_amt > 10000)
                                                            TableScan [TS_77] (rows=57591150 width=119)
                                                              default@store_returns,sr,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number","sr_return_quantity","sr_return_amt"]
                  <-Reducer 7 [CONTAINS] vectorized
                    Reduce Output Operator [RS_207]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_206] (rows=4868 width=215)
                        Output:["_col0","_col1","_col2","_col3","_col4"],keys:_col0, _col3, _col4, _col1, _col2
                        Top N Key Operator [TNK_205] (rows=4868 width=214)
                          keys:_col0, _col3, _col4, _col1, _col2,sort order:+++++,top n:100
                          Select Operator [SEL_204] (rows=3288 width=215)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Group By Operator [GBY_203] (rows=3288 width=215)
                              Output:["_col0","_col1","_col2","_col3","_col4"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                            <-Union 6 [SIMPLE_EDGE]
                              <-Reducer 17 [CONTAINS] vectorized
                                Reduce Output Operator [RS_232]
                                  PartitionCols:_col0, _col1, _col2, _col3, _col4
                                  Group By Operator [GBY_231] (rows=3288 width=215)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],keys:_col0, _col3, _col4, _col1, _col2
                                    Select Operator [SEL_230] (rows=1634 width=215)
                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                      Filter Operator [FIL_229] (rows=1634 width=248)
                                        predicate:((_col0 <= 10) or (rank_window_1 <= 10))
                                        PTF Operator [PTF_228] (rows=2453 width=248)
                                          Function definitions:[{},{"name:":"windowingtablefunction","order by:":"(CAST( _col4 AS decimal(15,4)) / CAST( _col5 AS decimal(15,4))) ASC NULLS LAST","partition by:":"0"}]
                                          Select Operator [SEL_227] (rows=2453 width=248)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                          <-Reducer 16 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_226]
                                              PartitionCols:0
                                              Select Operator [SEL_225] (rows=2453 width=244)
                                                Output:["rank_window_0","_col0","_col1","_col2","_col3","_col4"]
                                                PTF Operator [PTF_224] (rows=2453 width=244)
                                                  Function definitions:[{},{"name:":"windowingtablefunction","order by:":"(CAST( _col1 AS decimal(15,4)) / CAST( _col2 AS decimal(15,4))) ASC NULLS LAST","partition by:":"0"}]
                                                  Select Operator [SEL_223] (rows=2453 width=244)
                                                    Output:["_col0","_col1","_col2","_col3","_col4"]
                                                  <-Reducer 15 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_222]
                                                      PartitionCols:0
                                                      Group By Operator [GBY_221] (rows=2453 width=244)
                                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0
                                                      <-Reducer 14 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_50]
                                                          PartitionCols:_col0
                                                          Group By Operator [GBY_49] (rows=41701 width=244)
                                                            Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)","sum(_col5)"],keys:_col1
                                                            Select Operator [SEL_47] (rows=17823648 width=233)
                                                              Output:["_col1","_col2","_col3","_col4","_col5"]
                                                              Merge Join Operator [MERGEJOIN_145] (rows=17823648 width=233)
                                                                Conds:RS_217._col1, _col2=RS_220._col0, _col1(Inner),Output:["_col1","_col3","_col4","_col9","_col10"]
                                                              <-Map 13 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_217]
                                                                  PartitionCols:_col1, _col2
                                                                  Map Join Operator [MAPJOIN_216] (rows=11288012 width=122)
                                                                    Conds:SEL_215._col0=RS_182._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4"]
                                                                  <-Map 11 [BROADCAST_EDGE] vectorized
                                                                    BROADCAST [RS_182]
                                                                      PartitionCols:_col0
                                                                       Please refer to the previous Select Operator [SEL_180]
                                                                  <-Select Operator [SEL_215] (rows=31838858 width=239)
                                                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                                                      Filter Operator [FIL_214] (rows=31838858 width=239)
                                                                        predicate:((cs_net_paid > 0) and (cs_net_profit > 1) and (cs_quantity > 0) and cs_sold_date_sk is not null)
                                                                        TableScan [TS_32] (rows=287989836 width=239)
                                                                          default@catalog_sales,cs,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_order_number","cs_quantity","cs_net_paid","cs_net_profit"]
                                                              <-Map 18 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_220]
                                                                  PartitionCols:_col0, _col1
                                                                  Select Operator [SEL_219] (rows=9599627 width=121)
                                                                    Output:["_col0","_col1","_col2","_col3"]
                                                                    Filter Operator [FIL_218] (rows=9599627 width=121)
                                                                      predicate:(cr_return_amount > 10000)
                                                                      TableScan [TS_38] (rows=28798881 width=121)
                                                                        default@catalog_returns,cr,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_item_sk","cr_order_number","cr_return_quantity","cr_return_amount"]
                              <-Reducer 5 [CONTAINS] vectorized
                                Reduce Output Operator [RS_202]
                                  PartitionCols:_col0, _col1, _col2, _col3, _col4
                                  Group By Operator [GBY_201] (rows=3288 width=215)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],keys:_col0, _col3, _col4, _col1, _col2
                                    Select Operator [SEL_200] (rows=1654 width=211)
                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                      Filter Operator [FIL_199] (rows=1654 width=248)
                                        predicate:((_col0 <= 10) or (rank_window_1 <= 10))
                                        PTF Operator [PTF_198] (rows=2482 width=248)
                                          Function definitions:[{},{"name:":"windowingtablefunction","order by:":"(CAST( _col4 AS decimal(15,4)) / CAST( _col5 AS decimal(15,4))) ASC NULLS LAST","partition by:":"0"}]
                                          Select Operator [SEL_197] (rows=2482 width=248)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                          <-Reducer 4 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_196]
                                              PartitionCols:0
                                              Select Operator [SEL_195] (rows=2482 width=244)
                                                Output:["rank_window_0","_col0","_col1","_col2","_col3","_col4"]
                                                PTF Operator [PTF_194] (rows=2482 width=244)
                                                  Function definitions:[{},{"name:":"windowingtablefunction","order by:":"(CAST( _col1 AS decimal(15,4)) / CAST( _col2 AS decimal(15,4))) ASC NULLS LAST","partition by:":"0"}]
                                                  Select Operator [SEL_193] (rows=2482 width=244)
                                                    Output:["_col0","_col1","_col2","_col3","_col4"]
                                                  <-Reducer 3 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_192]
                                                      PartitionCols:0
                                                      Group By Operator [GBY_191] (rows=2482 width=244)
                                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0
                                                      <-Reducer 2 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_18]
                                                          PartitionCols:_col0
                                                          Group By Operator [GBY_17] (rows=24820 width=244)
                                                            Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)","sum(_col5)"],keys:_col1
                                                            Select Operator [SEL_15] (rows=10269608 width=233)
                                                              Output:["_col1","_col2","_col3","_col4","_col5"]
                                                              Merge Join Operator [MERGEJOIN_143] (rows=10269608 width=233)
                                                                Conds:RS_187._col1, _col2=RS_190._col0, _col1(Inner),Output:["_col1","_col3","_col4","_col9","_col10"]
                                                              <-Map 1 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_187]
                                                                  PartitionCols:_col1, _col2
                                                                  Map Join Operator [MAPJOIN_186] (rows=5711642 width=123)
                                                                    Conds:SEL_185._col0=RS_181._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4"]
                                                                  <-Map 11 [BROADCAST_EDGE] vectorized
                                                                    BROADCAST [RS_181]
                                                                      PartitionCols:_col0
                                                                       Please refer to the previous Select Operator [SEL_180]
                                                                  <-Select Operator [SEL_185] (rows=15996318 width=239)
                                                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                                                      Filter Operator [FIL_184] (rows=15996318 width=239)
                                                                        predicate:((ws_net_paid > 0) and (ws_net_profit > 1) and (ws_quantity > 0) and ws_sold_date_sk is not null)
                                                                        TableScan [TS_0] (rows=144002668 width=239)
                                                                          default@web_sales,ws,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_order_number","ws_quantity","ws_net_paid","ws_net_profit"]
                                                              <-Map 12 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_190]
                                                                  PartitionCols:_col0, _col1
                                                                  Select Operator [SEL_189] (rows=4799489 width=118)
                                                                    Output:["_col0","_col1","_col2","_col3"]
                                                                    Filter Operator [FIL_188] (rows=4799489 width=118)
                                                                      predicate:(wr_return_amt > 10000)
                                                                      TableScan [TS_6] (rows=14398467 width=118)
                                                                        default@web_returns,wr,Tbl:COMPLETE,Col:COMPLETE,Output:["wr_item_sk","wr_order_number","wr_return_quantity","wr_return_amt"]

