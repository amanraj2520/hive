Warning: Shuffle Join MERGEJOIN[518][tables = [$hdt$_2, $hdt$_3, $hdt$_4, $hdt$_1]] in Stage 'Reducer 3' is a cross product
Warning: Shuffle Join MERGEJOIN[519][tables = [$hdt$_2, $hdt$_3, $hdt$_4, $hdt$_1, $hdt$_5]] in Stage 'Reducer 4' is a cross product
Warning: Shuffle Join MERGEJOIN[533][tables = [$hdt$_3, $hdt$_4, $hdt$_5, $hdt$_2]] in Stage 'Reducer 7' is a cross product
Warning: Shuffle Join MERGEJOIN[534][tables = [$hdt$_3, $hdt$_4, $hdt$_5, $hdt$_2, $hdt$_6]] in Stage 'Reducer 8' is a cross product
PREHOOK: query: explain
with cs_ui as
 (select cs_item_sk
        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
  from catalog_sales
      ,catalog_returns
  where cs_item_sk = cr_item_sk
    and cs_order_number = cr_order_number
  group by cs_item_sk
  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
cross_sales as
 (select i_product_name product_name
     ,i_item_sk item_sk
     ,s_store_name store_name
     ,s_zip store_zip
     ,ad1.ca_street_number b_street_number
     ,ad1.ca_street_name b_streen_name
     ,ad1.ca_city b_city
     ,ad1.ca_zip b_zip
     ,ad2.ca_street_number c_street_number
     ,ad2.ca_street_name c_street_name
     ,ad2.ca_city c_city
     ,ad2.ca_zip c_zip
     ,d1.d_year as syear
     ,d2.d_year as fsyear
     ,d3.d_year s2year
     ,count(*) cnt
     ,sum(ss_wholesale_cost) s1
     ,sum(ss_list_price) s2
     ,sum(ss_coupon_amt) s3
  FROM   store_sales
        ,store_returns
        ,cs_ui
        ,date_dim d1
        ,date_dim d2
        ,date_dim d3
        ,store
        ,customer
        ,customer_demographics cd1
        ,customer_demographics cd2
        ,promotion
        ,household_demographics hd1
        ,household_demographics hd2
        ,customer_address ad1
        ,customer_address ad2
        ,income_band ib1
        ,income_band ib2
        ,item
  WHERE  ss_store_sk = s_store_sk AND
         ss_sold_date_sk = d1.d_date_sk AND
         ss_customer_sk = c_customer_sk AND
         ss_cdemo_sk= cd1.cd_demo_sk AND
         ss_hdemo_sk = hd1.hd_demo_sk AND
         ss_addr_sk = ad1.ca_address_sk and
         ss_item_sk = i_item_sk and
         ss_item_sk = sr_item_sk and
         ss_ticket_number = sr_ticket_number and
         ss_item_sk = cs_ui.cs_item_sk and
         c_current_cdemo_sk = cd2.cd_demo_sk AND
         c_current_hdemo_sk = hd2.hd_demo_sk AND
         c_current_addr_sk = ad2.ca_address_sk and
         c_first_sales_date_sk = d2.d_date_sk and
         c_first_shipto_date_sk = d3.d_date_sk and
         ss_promo_sk = p_promo_sk and
         hd1.hd_income_band_sk = ib1.ib_income_band_sk and
         hd2.hd_income_band_sk = ib2.ib_income_band_sk and
         cd1.cd_marital_status <> cd2.cd_marital_status and
         i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
         i_current_price between 35 and 35 + 10 and
         i_current_price between 35 + 1 and 35 + 15
group by i_product_name
       ,i_item_sk
       ,s_store_name
       ,s_zip
       ,ad1.ca_street_number
       ,ad1.ca_street_name
       ,ad1.ca_city
       ,ad1.ca_zip
       ,ad2.ca_street_number
       ,ad2.ca_street_name
       ,ad2.ca_city
       ,ad2.ca_zip
       ,d1.d_year
       ,d2.d_year
       ,d3.d_year
)
select cs1.product_name
     ,cs1.store_name
     ,cs1.store_zip
     ,cs1.b_street_number
     ,cs1.b_streen_name
     ,cs1.b_city
     ,cs1.b_zip
     ,cs1.c_street_number
     ,cs1.c_street_name
     ,cs1.c_city
     ,cs1.c_zip
     ,cs1.syear
     ,cs1.cnt
     ,cs1.s1
     ,cs1.s2
     ,cs1.s3
     ,cs2.s1
     ,cs2.s2
     ,cs2.s3
     ,cs2.syear
     ,cs2.cnt
from cross_sales cs1,cross_sales cs2
where cs1.item_sk=cs2.item_sk and
     cs1.syear = 2000 and
     cs2.syear = 2000 + 1 and
     cs2.cnt <= cs1.cnt and
     cs1.store_name = cs2.store_name and
     cs1.store_zip = cs2.store_zip
order by cs1.product_name
       ,cs1.store_name
       ,cs2.cnt
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@income_band
PREHOOK: Input: default@item
PREHOOK: Input: default@promotion
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with cs_ui as
 (select cs_item_sk
        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
  from catalog_sales
      ,catalog_returns
  where cs_item_sk = cr_item_sk
    and cs_order_number = cr_order_number
  group by cs_item_sk
  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
cross_sales as
 (select i_product_name product_name
     ,i_item_sk item_sk
     ,s_store_name store_name
     ,s_zip store_zip
     ,ad1.ca_street_number b_street_number
     ,ad1.ca_street_name b_streen_name
     ,ad1.ca_city b_city
     ,ad1.ca_zip b_zip
     ,ad2.ca_street_number c_street_number
     ,ad2.ca_street_name c_street_name
     ,ad2.ca_city c_city
     ,ad2.ca_zip c_zip
     ,d1.d_year as syear
     ,d2.d_year as fsyear
     ,d3.d_year s2year
     ,count(*) cnt
     ,sum(ss_wholesale_cost) s1
     ,sum(ss_list_price) s2
     ,sum(ss_coupon_amt) s3
  FROM   store_sales
        ,store_returns
        ,cs_ui
        ,date_dim d1
        ,date_dim d2
        ,date_dim d3
        ,store
        ,customer
        ,customer_demographics cd1
        ,customer_demographics cd2
        ,promotion
        ,household_demographics hd1
        ,household_demographics hd2
        ,customer_address ad1
        ,customer_address ad2
        ,income_band ib1
        ,income_band ib2
        ,item
  WHERE  ss_store_sk = s_store_sk AND
         ss_sold_date_sk = d1.d_date_sk AND
         ss_customer_sk = c_customer_sk AND
         ss_cdemo_sk= cd1.cd_demo_sk AND
         ss_hdemo_sk = hd1.hd_demo_sk AND
         ss_addr_sk = ad1.ca_address_sk and
         ss_item_sk = i_item_sk and
         ss_item_sk = sr_item_sk and
         ss_ticket_number = sr_ticket_number and
         ss_item_sk = cs_ui.cs_item_sk and
         c_current_cdemo_sk = cd2.cd_demo_sk AND
         c_current_hdemo_sk = hd2.hd_demo_sk AND
         c_current_addr_sk = ad2.ca_address_sk and
         c_first_sales_date_sk = d2.d_date_sk and
         c_first_shipto_date_sk = d3.d_date_sk and
         ss_promo_sk = p_promo_sk and
         hd1.hd_income_band_sk = ib1.ib_income_band_sk and
         hd2.hd_income_band_sk = ib2.ib_income_band_sk and
         cd1.cd_marital_status <> cd2.cd_marital_status and
         i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
         i_current_price between 35 and 35 + 10 and
         i_current_price between 35 + 1 and 35 + 15
group by i_product_name
       ,i_item_sk
       ,s_store_name
       ,s_zip
       ,ad1.ca_street_number
       ,ad1.ca_street_name
       ,ad1.ca_city
       ,ad1.ca_zip
       ,ad2.ca_street_number
       ,ad2.ca_street_name
       ,ad2.ca_city
       ,ad2.ca_zip
       ,d1.d_year
       ,d2.d_year
       ,d3.d_year
)
select cs1.product_name
     ,cs1.store_name
     ,cs1.store_zip
     ,cs1.b_street_number
     ,cs1.b_streen_name
     ,cs1.b_city
     ,cs1.b_zip
     ,cs1.c_street_number
     ,cs1.c_street_name
     ,cs1.c_city
     ,cs1.c_zip
     ,cs1.syear
     ,cs1.cnt
     ,cs1.s1
     ,cs1.s2
     ,cs1.s3
     ,cs2.s1
     ,cs2.s2
     ,cs2.s3
     ,cs2.syear
     ,cs2.cnt
from cross_sales cs1,cross_sales cs2
where cs1.item_sk=cs2.item_sk and
     cs1.syear = 2000 and
     cs2.syear = 2000 + 1 and
     cs2.cnt <= cs1.cnt and
     cs1.store_name = cs2.store_name and
     cs1.store_zip = cs2.store_zip
order by cs1.product_name
       ,cs1.store_name
       ,cs2.cnt
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@income_band
POSTHOOK: Input: default@item
POSTHOOK: Input: default@promotion
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 18 <- Map 19 (BROADCAST_EDGE), Map 30 (BROADCAST_EDGE), Reducer 5 (BROADCAST_EDGE), Reducer 9 (BROADCAST_EDGE)
Map 20 <- Map 18 (BROADCAST_EDGE), Map 19 (BROADCAST_EDGE)
Map 21 <- Map 20 (BROADCAST_EDGE), Map 28 (BROADCAST_EDGE), Map 31 (BROADCAST_EDGE), Map 32 (BROADCAST_EDGE)
Map 31 <- Map 18 (BROADCAST_EDGE), Map 19 (BROADCAST_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE), Map 14 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (SIMPLE_EDGE), Map 15 (BROADCAST_EDGE), Map 16 (BROADCAST_EDGE), Reducer 13 (CUSTOM_SIMPLE_EDGE)
Reducer 22 <- Map 21 (SIMPLE_EDGE), Map 29 (SIMPLE_EDGE)
Reducer 23 <- Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Reducer 23 (SIMPLE_EDGE), Reducer 27 (SIMPLE_EDGE)
Reducer 25 <- Reducer 24 (SIMPLE_EDGE)
Reducer 26 <- Map 21 (SIMPLE_EDGE), Map 29 (SIMPLE_EDGE)
Reducer 27 <- Reducer 26 (SIMPLE_EDGE)
Reducer 3 <- Map 16 (XPROD_EDGE), Reducer 2 (XPROD_EDGE)
Reducer 4 <- Map 16 (XPROD_EDGE), Reducer 3 (XPROD_EDGE)
Reducer 5 <- Map 17 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Map 1 (SIMPLE_EDGE), Map 10 (SIMPLE_EDGE), Map 15 (BROADCAST_EDGE), Map 16 (BROADCAST_EDGE), Reducer 13 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Map 16 (XPROD_EDGE), Reducer 6 (XPROD_EDGE)
Reducer 8 <- Map 16 (XPROD_EDGE), Reducer 7 (XPROD_EDGE)
Reducer 9 <- Map 17 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 25 vectorized
      File Output Operator [FS_654]
        Select Operator [SEL_653] (rows=3074457345618258602 width=3)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20"]
        <-Reducer 24 [SIMPLE_EDGE]
          SHUFFLE [RS_207]
            Select Operator [SEL_206] (rows=3074457345618258602 width=3)
              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18"]
              Filter Operator [FIL_205] (rows=3074457345618258602 width=3)
                predicate:(_col19 <= _col12)
                Merge Join Operator [MERGEJOIN_543] (rows=9223372036854775807 width=1)
                  Conds:RS_649._col2, _col1, _col3=RS_652._col1, _col0, _col2(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col19","_col20","_col21","_col22"]
                <-Reducer 23 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_649]
                    PartitionCols:_col2, _col1, _col3
                    Select Operator [SEL_648] (rows=3999350499186360 width=1353)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                      Group By Operator [GBY_647] (rows=3999350499186360 width=1361)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9, KEY._col10, KEY._col11, KEY._col12, KEY._col13
                      <-Reducer 22 [SIMPLE_EDGE]
                        SHUFFLE [RS_98]
                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                          Group By Operator [GBY_97] (rows=3999350499186360 width=1361)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count()","sum(_col1)","sum(_col2)","sum(_col3)"],keys:_col6, _col13, _col7, _col16, _col17, _col18, _col19, _col4, _col5, _col9, _col10, _col11, _col12, _col14
                            Merge Join Operator [MERGEJOIN_527] (rows=3999350499186360 width=1353)
                              Conds:RS_642._col8=RS_645._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col9","_col10","_col11","_col12","_col13","_col14","_col16","_col17","_col18","_col19"]
                            <-Map 21 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_642]
                                PartitionCols:_col8
                                Map Join Operator [MAPJOIN_640] (rows=3999350499186360 width=996)
                                  Conds:SEL_638._col0=RS_625._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"]
                                <-Map 28 [BROADCAST_EDGE] vectorized
                                  BROADCAST [RS_625]
                                    PartitionCols:_col0
                                    Select Operator [SEL_624] (rows=518 width=111)
                                      Output:["_col0","_col1"]
                                      Filter Operator [FIL_623] (rows=518 width=312)
                                        predicate:((i_color) IN ('maroon', 'burnished', 'dim', 'steel', 'navajo', 'chocolate') and i_current_price BETWEEN 35 AND 45 and i_current_price BETWEEN 36 AND 50)
                                        TableScan [TS_85] (rows=462000 width=311)
                                          default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_current_price","i_color","i_product_name"]
                                <-Select Operator [SEL_638] (rows=370589273785214464 width=24)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                                    Map Join Operator [MAPJOIN_636] (rows=370589273785214464 width=24)
                                      Conds:RS_622._col1=SEL_635._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col10","_col13","_col14","_col15","_col16"]
                                    <-Map 20 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_622]
                                        PartitionCols:_col1
                                        Map Join Operator [MAPJOIN_621] (rows=370589273785214464 width=24)
                                          Conds:SEL_620._col9=RS_603._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col10"]
                                        <-Map 19 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_603]
                                            PartitionCols:_col0
                                            Select Operator [SEL_601] (rows=7200 width=4)
                                              Output:["_col0"]
                                              Filter Operator [FIL_600] (rows=7200 width=8)
                                                predicate:hd_income_band_sk is not null
                                                TableScan [TS_60] (rows=7200 width=8)
                                                  default@household_demographics,hd1,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_income_band_sk"]
                                        <-Select Operator [SEL_620] (rows=370589273785214464 width=24)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"]
                                            Filter Operator [FIL_619] (rows=370589273785214464 width=24)
                                              predicate:(_col13 <> _col16)
                                              Map Join Operator [MAPJOIN_618] (rows=370589273785214464 width=24)
                                                Conds:RS_615._col10=SEL_617._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col11","_col12","_col13","_col16"]
                                              <-Map 18 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_615]
                                                  PartitionCols:_col10
                                                  Map Join Operator [MAPJOIN_613] (rows=365421764849379264 width=25)
                                                    Conds:SEL_611._col1=RS_602._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                                  <-Map 19 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_602]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_601]
                                                  <-Select Operator [SEL_611] (rows=365421764849379264 width=25)
                                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                                      Map Join Operator [MAPJOIN_609] (rows=365421764849379264 width=25)
                                                        Conds:RS_56._col2=SEL_608._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col3","_col4","_col5","_col6","_col7","_col9","_col11","_col12","_col13","_col15","_col16","_col17","_col21"]
                                                      <-Reducer 5 [BROADCAST_EDGE]
                                                        BROADCAST [RS_56]
                                                          PartitionCols:_col2
                                                          Merge Join Operator [MERGEJOIN_520] (rows=360326311826898496 width=25)
                                                            Conds:RS_53._col1, _col10, _col8=RS_598._col0, _col4, _col5(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col9","_col11","_col12","_col13","_col15","_col16","_col17"]
                                                          <-Map 17 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_598]
                                                              PartitionCols:_col0, _col4, _col5
                                                              Select Operator [SEL_597] (rows=69376329 width=23)
                                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                                Filter Operator [FIL_596] (rows=69376329 width=23)
                                                                  predicate:(c_current_addr_sk is not null and c_current_cdemo_sk is not null and c_current_hdemo_sk is not null and c_first_sales_date_sk is not null and c_first_shipto_date_sk is not null)
                                                                  TableScan [TS_48] (rows=80000000 width=23)
                                                                    default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_cdemo_sk","c_current_hdemo_sk","c_current_addr_sk","c_first_shipto_date_sk","c_first_sales_date_sk"]
                                                          <-Reducer 4 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_53]
                                                              PartitionCols:_col1, _col10, _col8
                                                              Select Operator [SEL_47] (rows=328596130189174779 width=28)
                                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                                                Merge Join Operator [MERGEJOIN_519] (rows=328596130189174779 width=28)
                                                                  Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7","_col8","_col9","_col12","_col13","_col14","_col15","_col16","_col17"]
                                                                <-Map 16 [XPROD_EDGE] vectorized
                                                                  XPROD_EDGE [RS_590]
                                                                    Select Operator [SEL_584] (rows=73049 width=8)
                                                                      Output:["_col0","_col1"]
                                                                      TableScan [TS_31] (rows=73049 width=8)
                                                                        default@date_dim,d3,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                                <-Reducer 3 [XPROD_EDGE]
                                                                  XPROD_EDGE [RS_44]
                                                                    Merge Join Operator [MERGEJOIN_518] (rows=4498297446771 width=540)
                                                                      Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7","_col8","_col9","_col12","_col13","_col14","_col15"]
                                                                    <-Map 16 [XPROD_EDGE] vectorized
                                                                      XPROD_EDGE [RS_588]
                                                                        Select Operator [SEL_582] (rows=73049 width=8)
                                                                          Output:["_col0","_col1"]
                                                                           Please refer to the previous TableScan [TS_31]
                                                                    <-Reducer 2 [XPROD_EDGE]
                                                                      XPROD_EDGE [RS_41]
                                                                        Map Join Operator [MAPJOIN_517] (rows=61579179 width=425)
                                                                          Conds:MAPJOIN_516._col6=RS_580._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col5","_col7","_col8","_col9","_col12","_col13"]
                                                                        <-Map 15 [BROADCAST_EDGE] vectorized
                                                                          BROADCAST [RS_580]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_579] (rows=1704 width=181)
                                                                              Output:["_col0","_col1","_col2"]
                                                                              Filter Operator [FIL_578] (rows=1704 width=181)
                                                                                predicate:(s_store_name is not null and s_zip is not null)
                                                                                TableScan [TS_28] (rows=1704 width=181)
                                                                                  default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_name","s_zip"]
                                                                        <-Map Join Operator [MAPJOIN_516] (rows=61579179 width=251)
                                                                            Conds:SEL_24._col0=RS_594._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
                                                                          <-Map 16 [BROADCAST_EDGE] vectorized
                                                                            XPROD_EDGE [RS_594]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_589] (rows=652 width=4)
                                                                                Output:["_col0"]
                                                                                Filter Operator [FIL_583] (rows=652 width=8)
                                                                                  predicate:(d_year = 2000)
                                                                                   Please refer to the previous TableScan [TS_31]
                                                                          <-Select Operator [SEL_24] (rows=172461839 width=324)
                                                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
                                                                              Map Join Operator [MAPJOIN_515] (rows=172461839 width=324)
                                                                                BucketMapJoin:true,Conds:MERGEJOIN_513._col1=RS_576._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col8","_col9","_col10"]
                                                                              <-Reducer 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                PARTITION_ONLY_SHUFFLE [RS_576]
                                                                                  PartitionCols:_col0
                                                                                  Select Operator [SEL_575] (rows=13257 width=4)
                                                                                    Output:["_col0"]
                                                                                    Filter Operator [FIL_574] (rows=13257 width=228)
                                                                                      predicate:(_col1 > (2 * _col2))
                                                                                      Group By Operator [GBY_573] (rows=39773 width=228)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                                                                      <-Reducer 12 [SIMPLE_EDGE]
                                                                                        SHUFFLE [RS_14]
                                                                                          PartitionCols:_col0
                                                                                          Group By Operator [GBY_13] (rows=6482999 width=228)
                                                                                            Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","sum(_col5)"],keys:_col0
                                                                                            Merge Join Operator [MERGEJOIN_514] (rows=183085709 width=227)
                                                                                              Conds:RS_570._col0, _col1=RS_572._col0, _col1(Inner),Output:["_col0","_col2","_col5"]
                                                                                            <-Map 11 [SIMPLE_EDGE] vectorized
                                                                                              SHUFFLE [RS_570]
                                                                                                PartitionCols:_col0, _col1
                                                                                                Select Operator [SEL_569] (rows=287989836 width=119)
                                                                                                  Output:["_col0","_col1","_col2"]
                                                                                                  TableScan [TS_5] (rows=287989836 width=119)
                                                                                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_item_sk","cs_order_number","cs_ext_list_price"]
                                                                                            <-Map 14 [SIMPLE_EDGE] vectorized
                                                                                              SHUFFLE [RS_572]
                                                                                                PartitionCols:_col0, _col1
                                                                                                Select Operator [SEL_571] (rows=28798881 width=120)
                                                                                                  Output:["_col0","_col1","_col2"]
                                                                                                  TableScan [TS_7] (rows=28798881 width=337)
                                                                                                    default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_item_sk","cr_order_number","cr_refunded_cash","cr_reversed_charge","cr_store_credit"]
                                                                              <-Merge Join Operator [MERGEJOIN_513] (rows=589664162 width=352)
                                                                                  Conds:RS_564._col1, _col7=RS_567._col0, _col1(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col8","_col9","_col10"]
                                                                                <-Map 1 [SIMPLE_EDGE] vectorized
                                                                                  SHUFFLE [RS_564]
                                                                                    PartitionCols:_col1, _col7
                                                                                    Select Operator [SEL_563] (rows=417313408 width=351)
                                                                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"]
                                                                                      Filter Operator [FIL_562] (rows=417313408 width=355)
                                                                                        predicate:(ss_addr_sk is not null and ss_cdemo_sk is not null and ss_customer_sk is not null and ss_hdemo_sk is not null and ss_promo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                                                        TableScan [TS_0] (rows=575995635 width=355)
                                                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_cdemo_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_promo_sk","ss_ticket_number","ss_wholesale_cost","ss_list_price","ss_coupon_amt"]
                                                                                <-Map 10 [SIMPLE_EDGE] vectorized
                                                                                  SHUFFLE [RS_567]
                                                                                    PartitionCols:_col0, _col1
                                                                                    Select Operator [SEL_566] (rows=57591150 width=8)
                                                                                      Output:["_col0","_col1"]
                                                                                      TableScan [TS_3] (rows=57591150 width=8)
                                                                                        default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number"]
                                                      <-Select Operator [SEL_608] (rows=1861800 width=89)
                                                          Output:["_col0","_col1"]
                                                          TableScan [TS_51] (rows=1861800 width=89)
                                                            default@customer_demographics,cd1,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_marital_status"]
                                                          <-Map 30 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_607]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_606] (rows=7200 width=4)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_605] (rows=7200 width=8)
                                                                  predicate:hd_income_band_sk is not null
                                                                  TableScan [TS_161] (rows=7200 width=8)
                                                                    default@household_demographics,hd1,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_income_band_sk"]
                                                          <-Reducer 9 [BROADCAST_EDGE]
                                                            BROADCAST [RS_157]
                                                              PartitionCols:_col2
                                                              Merge Join Operator [MERGEJOIN_535] (rows=360326311826898496 width=25)
                                                                Conds:RS_154._col1, _col10, _col8=RS_599._col0, _col4, _col5(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col9","_col11","_col12","_col13","_col15","_col16","_col17"]
                                                              <-Map 17 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_599]
                                                                  PartitionCols:_col0, _col4, _col5
                                                                   Please refer to the previous Select Operator [SEL_597]
                                                              <-Reducer 8 [SIMPLE_EDGE]
                                                                SHUFFLE [RS_154]
                                                                  PartitionCols:_col1, _col10, _col8
                                                                  Select Operator [SEL_148] (rows=328596130189174779 width=28)
                                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                                                    Merge Join Operator [MERGEJOIN_534] (rows=328596130189174779 width=28)
                                                                      Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7","_col8","_col9","_col12","_col13","_col14","_col15","_col16","_col17"]
                                                                    <-Reducer 7 [XPROD_EDGE]
                                                                      XPROD_EDGE [RS_145]
                                                                        Merge Join Operator [MERGEJOIN_533] (rows=4498297446771 width=540)
                                                                          Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7","_col8","_col9","_col12","_col13","_col14","_col15"]
                                                                        <-Reducer 6 [XPROD_EDGE]
                                                                          XPROD_EDGE [RS_142]
                                                                            Map Join Operator [MAPJOIN_532] (rows=61579179 width=425)
                                                                              Conds:MAPJOIN_531._col6=RS_581._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col5","_col7","_col8","_col9","_col12","_col13"]
                                                                            <-Map 15 [BROADCAST_EDGE] vectorized
                                                                              BROADCAST [RS_581]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_579]
                                                                            <-Map Join Operator [MAPJOIN_531] (rows=61579179 width=251)
                                                                                Conds:SEL_125._col0=RS_595._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
                                                                              <-Map 16 [BROADCAST_EDGE] vectorized
                                                                                XPROD_EDGE [RS_595]
                                                                                  PartitionCols:_col0
                                                                                  Select Operator [SEL_592] (rows=652 width=4)
                                                                                    Output:["_col0"]
                                                                                    Filter Operator [FIL_586] (rows=652 width=8)
                                                                                      predicate:(d_year = 2001)
                                                                                       Please refer to the previous TableScan [TS_31]
                                                                              <-Select Operator [SEL_125] (rows=172461839 width=324)
                                                                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
                                                                                  Map Join Operator [MAPJOIN_530] (rows=172461839 width=324)
                                                                                    BucketMapJoin:true,Conds:MERGEJOIN_528._col1=RS_577._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col8","_col9","_col10"]
                                                                                  <-Reducer 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                    PARTITION_ONLY_SHUFFLE [RS_577]
                                                                                      PartitionCols:_col0
                                                                                       Please refer to the previous Select Operator [SEL_575]
                                                                                  <-Merge Join Operator [MERGEJOIN_528] (rows=589664162 width=352)
                                                                                      Conds:RS_565._col1, _col7=RS_568._col0, _col1(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col8","_col9","_col10"]
                                                                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                                                                      SHUFFLE [RS_565]
                                                                                        PartitionCols:_col1, _col7
                                                                                         Please refer to the previous Select Operator [SEL_563]
                                                                                    <-Map 10 [SIMPLE_EDGE] vectorized
                                                                                      SHUFFLE [RS_568]
                                                                                        PartitionCols:_col0, _col1
                                                                                         Please refer to the previous Select Operator [SEL_566]
                                              <-Select Operator [SEL_617] (rows=1861800 width=89)
                                                  Output:["_col0","_col1"]
                                                  TableScan [TS_63] (rows=1861800 width=89)
                                                    default@customer_demographics,cd2,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_marital_status"]
                                    <-Select Operator [SEL_635] (rows=40000000 width=365)
                                        Output:["_col0","_col1","_col2","_col3","_col4"]
                                        TableScan [TS_76] (rows=40000000 width=365)
                                          default@customer_address,ad1,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_street_number","ca_street_name","ca_city","ca_zip"]
                                        <-Map 31 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_631]
                                            PartitionCols:_col1
                                            Map Join Operator [MAPJOIN_630] (rows=370589273785214464 width=24)
                                              Conds:SEL_629._col9=RS_604._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col10"]
                                            <-Map 19 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_604]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_601]
                                            <-Select Operator [SEL_629] (rows=370589273785214464 width=24)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"]
                                                Filter Operator [FIL_628] (rows=370589273785214464 width=24)
                                                  predicate:(_col13 <> _col16)
                                                  Map Join Operator [MAPJOIN_627] (rows=370589273785214464 width=24)
                                                    Conds:RS_616._col10=SEL_626._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col11","_col12","_col13","_col16"]
                                                  <-Map 18 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_616]
                                                      PartitionCols:_col10
                                                      Map Join Operator [MAPJOIN_614] (rows=365421764849379264 width=25)
                                                        Conds:SEL_612._col1=RS_607._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                                      <- Please refer to the previous Map 30 [BROADCAST_EDGE]
                                                      <-Select Operator [SEL_612] (rows=365421764849379264 width=25)
                                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                                          Map Join Operator [MAPJOIN_610] (rows=365421764849379264 width=25)
                                                            Conds:RS_157._col2=SEL_608._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col3","_col4","_col5","_col6","_col7","_col9","_col11","_col12","_col13","_col15","_col16","_col17","_col21"]
                                                          <- Please refer to the previous Reducer 9 [BROADCAST_EDGE]
                                                             Please refer to the previous Select Operator [SEL_608]
                                                  <-Select Operator [SEL_626] (rows=1861800 width=89)
                                                      Output:["_col0","_col1"]
                                                      TableScan [TS_164] (rows=1861800 width=89)
                                                        default@customer_demographics,cd2,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_marital_status"]
                                        <-Map 32 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_634]
                                            PartitionCols:_col0
                                            Select Operator [SEL_633] (rows=518 width=111)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_632] (rows=518 width=312)
                                                predicate:((i_color) IN ('maroon', 'burnished', 'dim', 'steel', 'navajo', 'chocolate') and i_current_price BETWEEN 35 AND 45 and i_current_price BETWEEN 36 AND 50)
                                                TableScan [TS_186] (rows=462000 width=311)
                                                  default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_current_price","i_color","i_product_name"]
                            <-Map 29 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_645]
                                PartitionCols:_col0
                                Select Operator [SEL_644] (rows=40000000 width=365)
                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                  TableScan [TS_88] (rows=40000000 width=365)
                                    default@customer_address,ad2,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_street_number","ca_street_name","ca_city","ca_zip"]
                <-Reducer 27 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_652]
                    PartitionCols:_col1, _col0, _col2
                    Select Operator [SEL_651] (rows=3999350499186360 width=525)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                      Group By Operator [GBY_650] (rows=3999350499186360 width=1361)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9, KEY._col10, KEY._col11, KEY._col12, KEY._col13
                      <-Reducer 26 [SIMPLE_EDGE]
                        SHUFFLE [RS_199]
                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                          Group By Operator [GBY_198] (rows=3999350499186360 width=1361)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count()","sum(_col1)","sum(_col2)","sum(_col3)"],keys:_col6, _col13, _col7, _col16, _col17, _col18, _col19, _col4, _col5, _col9, _col10, _col11, _col12, _col14
                            Merge Join Operator [MERGEJOIN_542] (rows=3999350499186360 width=1353)
                              Conds:RS_643._col8=RS_646._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col9","_col10","_col11","_col12","_col13","_col14","_col16","_col17","_col18","_col19"]
                            <-Map 21 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_643]
                                PartitionCols:_col8
                                Map Join Operator [MAPJOIN_641] (rows=3999350499186360 width=996)
                                  Conds:SEL_639._col0=RS_634._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"]
                                <- Please refer to the previous Map 32 [BROADCAST_EDGE]
                                <-Select Operator [SEL_639] (rows=370589273785214464 width=24)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                                    Map Join Operator [MAPJOIN_637] (rows=370589273785214464 width=24)
                                      Conds:RS_631._col1=SEL_635._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col10","_col13","_col14","_col15","_col16"]
                                    <- Please refer to the previous Map 31 [BROADCAST_EDGE]
                                       Please refer to the previous Select Operator [SEL_635]
                            <-Map 29 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_646]
                                PartitionCols:_col0
                                 Please refer to the previous Select Operator [SEL_644]

