PREHOOK: query: explain
select  
    sum(ss_net_profit) as total_sum
   ,s_state
   ,s_county
   ,grouping(s_state)+grouping(s_county) as lochierarchy
   ,rank() over (
 	partition by grouping(s_state)+grouping(s_county),
 	case when grouping(s_county) = 0 then s_state end 
 	order by sum(ss_net_profit) desc) as rank_within_parent
 from
    store_sales
   ,date_dim       d1
   ,store
 where
    d1.d_month_seq between 1212 and 1212+11
 and d1.d_date_sk = ss_sold_date_sk
 and s_store_sk  = ss_store_sk
 and s_state in
             ( select s_state
               from  (select s_state as s_state,
 			    rank() over ( partition by s_state order by sum(ss_net_profit) desc) as ranking
                      from   store_sales, store, date_dim
                      where  d_month_seq between 1212 and 1212+11
 			    and d_date_sk = ss_sold_date_sk
 			    and s_store_sk  = ss_store_sk
                      group by s_state
                     ) tmp1 
               where ranking <= 5
             )
 group by rollup(s_state,s_county)
 order by
   lochierarchy desc
  ,case when lochierarchy = 0 then s_state end
  ,rank_within_parent
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  
    sum(ss_net_profit) as total_sum
   ,s_state
   ,s_county
   ,grouping(s_state)+grouping(s_county) as lochierarchy
   ,rank() over (
 	partition by grouping(s_state)+grouping(s_county),
 	case when grouping(s_county) = 0 then s_state end 
 	order by sum(ss_net_profit) desc) as rank_within_parent
 from
    store_sales
   ,date_dim       d1
   ,store
 where
    d1.d_month_seq between 1212 and 1212+11
 and d1.d_date_sk = ss_sold_date_sk
 and s_store_sk  = ss_store_sk
 and s_state in
             ( select s_state
               from  (select s_state as s_state,
 			    rank() over ( partition by s_state order by sum(ss_net_profit) desc) as ranking
                      from   store_sales, store, date_dim
                      where  d_month_seq between 1212 and 1212+11
 			    and d_date_sk = ss_sold_date_sk
 			    and s_store_sk  = ss_store_sk
                      group by s_state
                     ) tmp1 
               where ranking <= 5
             )
 group by rollup(s_state,s_county)
 order by
   lochierarchy desc
  ,case when lochierarchy = 0 then s_state end
  ,rank_within_parent
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 5 (BROADCAST_EDGE), Map 6 (BROADCAST_EDGE), Reducer 9 (BROADCAST_EDGE)
Map 7 <- Map 10 (BROADCAST_EDGE), Map 5 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 8 <- Map 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 4 vectorized
      File Output Operator [FS_135]
        Limit [LIM_134] (rows=100 width=492)
          Number of rows:100
          Select Operator [SEL_133] (rows=240 width=492)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Reducer 3 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_132]
              Select Operator [SEL_131] (rows=240 width=492)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                PTF Operator [PTF_130] (rows=240 width=304)
                  Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col2 DESC NULLS LAST","partition by:":"(grouping(_col3, 1) + grouping(_col3, 0)), CASE WHEN ((grouping(_col3, 0) = 0)) THEN (_col0) ELSE (CAST( null AS STRING)) END"}]
                  Select Operator [SEL_129] (rows=240 width=304)
                    Output:["_col0","_col1","_col2","_col3"]
                  <-Reducer 2 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_128]
                      PartitionCols:(grouping(_col3, 1) + grouping(_col3, 0)), CASE WHEN ((grouping(_col3, 0) = 0)) THEN (_col0) ELSE (CAST( null AS STRING)) END
                      Select Operator [SEL_127] (rows=240 width=304)
                        Output:["_col0","_col1","_col2","_col3"]
                        Group By Operator [GBY_126] (rows=240 width=304)
                          Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                        <-Map 1 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_125]
                            PartitionCols:_col0, _col1, _col2
                            Group By Operator [GBY_124] (rows=18000 width=304)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col2)"],keys:_col0, _col1, 0L
                              Select Operator [SEL_123] (rows=29778893 width=207)
                                Output:["_col0","_col1","_col2"]
                                Map Join Operator [MAPJOIN_122] (rows=29778893 width=207)
                                  Conds:MAPJOIN_121._col7=RS_117._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col6","_col7"]
                                <-Reducer 9 [BROADCAST_EDGE] vectorized
                                  BROADCAST [RS_117]
                                    PartitionCols:_col0
                                    Select Operator [SEL_116] (rows=16 width=86)
                                      Output:["_col0"]
                                      Filter Operator [FIL_115] (rows=16 width=198)
                                        predicate:(rank_window_0 <= 5)
                                        PTF Operator [PTF_114] (rows=49 width=198)
                                          Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col1 DESC NULLS LAST","partition by:":"_col0"}]
                                          Select Operator [SEL_113] (rows=49 width=198)
                                            Output:["_col0","_col1"]
                                          <-Reducer 8 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_112]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_111] (rows=49 width=198)
                                                Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                              <-Map 7 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_110]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_109] (rows=1704 width=198)
                                                    Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                                    Map Join Operator [MAPJOIN_108] (rows=91197860 width=168)
                                                      Conds:MAPJOIN_107._col1=RS_104._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col5"]
                                                    <-Map 10 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_104]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_103] (rows=1704 width=90)
                                                          Output:["_col0","_col1"]
                                                          Filter Operator [FIL_102] (rows=1704 width=90)
                                                            predicate:s_state is not null
                                                            TableScan [TS_15] (rows=1704 width=90)
                                                              default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_state"]
                                                    <-Map Join Operator [MAPJOIN_107] (rows=91197860 width=85)
                                                        Conds:SEL_106._col0=RS_98._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2"]
                                                      <-Map 5 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_98]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_96] (rows=317 width=8)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_95] (rows=317 width=8)
                                                              predicate:d_month_seq BETWEEN 1212 AND 1223
                                                              TableScan [TS_3] (rows=73049 width=8)
                                                                default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_month_seq"]
                                                      <-Select Operator [SEL_106] (rows=525329897 width=114)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_105] (rows=525329897 width=114)
                                                            predicate:(ss_sold_date_sk is not null and ss_store_sk is not null)
                                                            TableScan [TS_9] (rows=575995635 width=114)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_store_sk","ss_net_profit"]
                                <-Map Join Operator [MAPJOIN_121] (rows=91197860 width=266)
                                    Conds:MAPJOIN_120._col1=RS_101._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col6","_col7"]
                                  <-Map 6 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_101]
                                      PartitionCols:_col0
                                      Select Operator [SEL_100] (rows=1704 width=188)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_99] (rows=1704 width=188)
                                          predicate:s_state is not null
                                          TableScan [TS_6] (rows=1704 width=188)
                                            default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_county","s_state"]
                                  <-Map Join Operator [MAPJOIN_120] (rows=91197860 width=85)
                                      Conds:SEL_119._col0=RS_97._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2"]
                                    <-Map 5 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_97]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_96]
                                    <-Select Operator [SEL_119] (rows=525329897 width=114)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_118] (rows=525329897 width=114)
                                          predicate:(ss_sold_date_sk is not null and ss_store_sk is not null)
                                          TableScan [TS_0] (rows=575995635 width=114)
                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_store_sk","ss_net_profit"]

