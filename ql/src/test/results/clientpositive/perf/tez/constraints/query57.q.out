PREHOOK: query: explain
with v1 as(
 select i_category, i_brand,
        cc_name,
        d_year, d_moy,
        sum(cs_sales_price) sum_sales,
        avg(sum(cs_sales_price)) over
          (partition by i_category, i_brand,
                     cc_name, d_year)
          avg_monthly_sales,
        rank() over
          (partition by i_category, i_brand,
                     cc_name
           order by d_year, d_moy) rn
 from item, catalog_sales, date_dim, call_center
 where cs_item_sk = i_item_sk and
       cs_sold_date_sk = d_date_sk and
       cc_call_center_sk= cs_call_center_sk and
       (
         d_year = 2000 or
         ( d_year = 2000-1 and d_moy =12) or
         ( d_year = 2000+1 and d_moy =1)
       )
 group by i_category, i_brand,
          cc_name , d_year, d_moy),
 v2 as(
 select v1.i_category, v1.i_brand
        ,v1.d_year, v1.d_moy
        ,v1.avg_monthly_sales
        ,v1.sum_sales, v1_lag.sum_sales psum, v1_lead.sum_sales nsum
 from v1, v1 v1_lag, v1 v1_lead
 where v1.i_category = v1_lag.i_category and
       v1.i_category = v1_lead.i_category and
       v1.i_brand = v1_lag.i_brand and
       v1.i_brand = v1_lead.i_brand and
       v1. cc_name = v1_lag. cc_name and
       v1. cc_name = v1_lead. cc_name and
       v1.rn = v1_lag.rn + 1 and
       v1.rn = v1_lead.rn - 1)
  select  *
 from v2
 where  d_year = 2000 and
        avg_monthly_sales > 0 and
        case when avg_monthly_sales > 0 then abs(sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1
 order by sum_sales - avg_monthly_sales, 3
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@call_center
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with v1 as(
 select i_category, i_brand,
        cc_name,
        d_year, d_moy,
        sum(cs_sales_price) sum_sales,
        avg(sum(cs_sales_price)) over
          (partition by i_category, i_brand,
                     cc_name, d_year)
          avg_monthly_sales,
        rank() over
          (partition by i_category, i_brand,
                     cc_name
           order by d_year, d_moy) rn
 from item, catalog_sales, date_dim, call_center
 where cs_item_sk = i_item_sk and
       cs_sold_date_sk = d_date_sk and
       cc_call_center_sk= cs_call_center_sk and
       (
         d_year = 2000 or
         ( d_year = 2000-1 and d_moy =12) or
         ( d_year = 2000+1 and d_moy =1)
       )
 group by i_category, i_brand,
          cc_name , d_year, d_moy),
 v2 as(
 select v1.i_category, v1.i_brand
        ,v1.d_year, v1.d_moy
        ,v1.avg_monthly_sales
        ,v1.sum_sales, v1_lag.sum_sales psum, v1_lead.sum_sales nsum
 from v1, v1 v1_lag, v1 v1_lead
 where v1.i_category = v1_lag.i_category and
       v1.i_category = v1_lead.i_category and
       v1.i_brand = v1_lag.i_brand and
       v1.i_brand = v1_lead.i_brand and
       v1. cc_name = v1_lag. cc_name and
       v1. cc_name = v1_lead. cc_name and
       v1.rn = v1_lag.rn + 1 and
       v1.rn = v1_lead.rn - 1)
  select  *
 from v2
 where  d_year = 2000 and
        avg_monthly_sales > 0 and
        case when avg_monthly_sales > 0 then abs(sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1
 order by sum_sales - avg_monthly_sales, 3
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@call_center
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 5 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 12 (SIMPLE_EDGE)
Reducer 3 <- Map 13 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 14 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 11 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 8 vectorized
      File Output Operator [FS_231]
        Limit [LIM_230] (rows=100 width=758)
          Number of rows:100
          Select Operator [SEL_229] (rows=130121 width=758)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
          <-Reducer 7 [SIMPLE_EDGE]
            SHUFFLE [RS_113]
              Select Operator [SEL_112] (rows=130121 width=758)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                Merge Join Operator [MERGEJOIN_193] (rows=130121 width=646)
                  Conds:RS_109._col5, _col6, _col12, _col7=RS_216._col0, _col1, _col4, _col2(Inner),Output:["_col3","_col5","_col6","_col8","_col9","_col10","_col11","_col16"]
                <-Reducer 6 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_216]
                    PartitionCols:_col0, _col1, _col4, _col2
                    Select Operator [SEL_214] (rows=87441185 width=404)
                      Output:["_col0","_col1","_col2","_col3","_col4"]
                      Filter Operator [FIL_212] (rows=87441185 width=408)
                        predicate:rank_window_0 is not null
                        PTF Operator [PTF_210] (rows=87441185 width=408)
                          Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col2 ASC NULLS FIRST, _col3 ASC NULLS FIRST","partition by:":"_col1, _col0, _col4"}]
                          Select Operator [SEL_209] (rows=87441185 width=408)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                          <-Reducer 5 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_207]
                              PartitionCols:_col1, _col0, _col4
                              Group By Operator [GBY_206] (rows=87441185 width=408)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                              <-Reducer 4 [SIMPLE_EDGE]
                                SHUFFLE [RS_96]
                                  PartitionCols:_col0, _col1, _col2, _col3, _col4
                                  Group By Operator [GBY_95] (rows=87441185 width=408)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col3)"],keys:_col0, _col1, _col4, _col5, _col7
                                    Merge Join Operator [MERGEJOIN_191] (rows=87441185 width=406)
                                      Conds:RS_91._col2=RS_205._col0(Inner),Output:["_col0","_col1","_col3","_col4","_col5","_col7"]
                                    <-Map 14 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_205]
                                        PartitionCols:_col0
                                        Select Operator [SEL_204] (rows=60 width=102)
                                          Output:["_col0","_col1"]
                                          Filter Operator [FIL_203] (rows=60 width=102)
                                            predicate:cc_name is not null
                                            TableScan [TS_88] (rows=60 width=102)
                                              default@call_center,call_center,Tbl:COMPLETE,Col:COMPLETE,Output:["cc_call_center_sk","cc_name"]
                                    <-Reducer 3 [SIMPLE_EDGE]
                                      SHUFFLE [RS_91]
                                        PartitionCols:_col2
                                        Select Operator [SEL_87] (rows=87441185 width=312)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                          Merge Join Operator [MERGEJOIN_190] (rows=87441185 width=312)
                                            Conds:RS_84._col2=RS_202._col0(Inner),Output:["_col1","_col3","_col5","_col6","_col8","_col9"]
                                          <-Map 13 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_202]
                                              PartitionCols:_col0
                                              Select Operator [SEL_201] (rows=462000 width=194)
                                                Output:["_col0","_col1","_col2"]
                                                Filter Operator [FIL_200] (rows=462000 width=194)
                                                  predicate:(i_brand is not null and i_category is not null)
                                                  TableScan [TS_78] (rows=462000 width=194)
                                                    default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand","i_category"]
                                          <-Reducer 2 [SIMPLE_EDGE]
                                            SHUFFLE [RS_84]
                                              PartitionCols:_col2
                                              Merge Join Operator [MERGEJOIN_189] (rows=87441185 width=126)
                                                Conds:RS_196._col0=RS_199._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6"]
                                              <-Map 1 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_196]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_195] (rows=285117980 width=123)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_194] (rows=285117980 width=123)
                                                      predicate:(cs_call_center_sk is not null and cs_sold_date_sk is not null)
                                                      TableScan [TS_72] (rows=287989836 width=123)
                                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_call_center_sk","cs_item_sk","cs_sales_price"]
                                              <-Map 12 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_199]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_198] (rows=564 width=12)
                                                    Output:["_col0","_col1","_col2"]
                                                    Filter Operator [FIL_197] (rows=564 width=12)
                                                      predicate:(((d_year = 2000) or (struct(d_year,d_moy)) IN (const struct(1999,12), const struct(2001,1))) and (d_year) IN (2000, 1999, 2001))
                                                      TableScan [TS_75] (rows=73049 width=12)
                                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                <-Reducer 9 [SIMPLE_EDGE]
                  SHUFFLE [RS_109]
                    PartitionCols:_col5, _col6, _col12, _col7
                    Merge Join Operator [MERGEJOIN_192] (rows=130121 width=636)
                      Conds:RS_217._col0, _col1, _col4, _col2=RS_228._col0, _col1, _col7, _col2(Inner),Output:["_col3","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                    <-Reducer 6 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_217]
                        PartitionCols:_col0, _col1, _col4, _col2
                        Select Operator [SEL_215] (rows=87441185 width=404)
                          Output:["_col0","_col1","_col2","_col3","_col4"]
                          Filter Operator [FIL_213] (rows=87441185 width=408)
                            predicate:rank_window_0 is not null
                            PTF Operator [PTF_211] (rows=87441185 width=408)
                              Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col2 ASC NULLS FIRST, _col3 ASC NULLS FIRST","partition by:":"_col1, _col0, _col4"}]
                               Please refer to the previous Select Operator [SEL_209]
                    <-Reducer 11 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_228]
                        PartitionCols:_col0, _col1, _col7, _col2
                        Select Operator [SEL_227] (rows=130121 width=524)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                          Filter Operator [FIL_226] (rows=130121 width=524)
                            predicate:CASE WHEN ((_col0 > 0)) THEN (((abs((_col6 - _col0)) / _col0) > 0.1)) ELSE (null) END
                            Select Operator [SEL_225] (rows=260242 width=520)
                              Output:["rank_window_1","_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                              Filter Operator [FIL_224] (rows=260242 width=520)
                                predicate:((_col0 > 0) and (_col3 = 2000) and rank_window_1 is not null)
                                PTF Operator [PTF_223] (rows=87441185 width=520)
                                  Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col3 ASC NULLS FIRST, _col4 ASC NULLS FIRST","partition by:":"_col2, _col1, _col5"}]
                                  Select Operator [SEL_222] (rows=87441185 width=520)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                  <-Reducer 10 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_221]
                                      PartitionCols:_col1, _col0, _col4
                                      Select Operator [SEL_220] (rows=87441185 width=408)
                                        Output:["avg_window_0","_col0","_col1","_col2","_col3","_col4","_col5"]
                                        PTF Operator [PTF_219] (rows=87441185 width=408)
                                          Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col1 ASC NULLS FIRST, _col0 ASC NULLS FIRST, _col4 ASC NULLS FIRST, _col2 ASC NULLS FIRST","partition by:":"_col1, _col0, _col4, _col2"}]
                                          Select Operator [SEL_218] (rows=87441185 width=408)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                          <-Reducer 5 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_208]
                                              PartitionCols:_col1, _col0, _col4, _col2
                                               Please refer to the previous Group By Operator [GBY_206]

