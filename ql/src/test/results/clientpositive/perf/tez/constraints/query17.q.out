PREHOOK: query: explain
select  i_item_id
       ,i_item_desc
       ,s_state
       ,count(ss_quantity) as store_sales_quantitycount
       ,avg(ss_quantity) as store_sales_quantityave
       ,stddev_samp(ss_quantity) as store_sales_quantitystdev
       ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
       ,count(sr_return_quantity) as_store_returns_quantitycount
       ,avg(sr_return_quantity) as_store_returns_quantityave
       ,stddev_samp(sr_return_quantity) as_store_returns_quantitystdev
       ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
       ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
       ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitystdev
       ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
     ,store_returns
     ,catalog_sales
     ,date_dim d1
     ,date_dim d2
     ,date_dim d3
     ,store
     ,item
 where d1.d_quarter_name = '2000Q1'
   and d1.d_date_sk = ss_sold_date_sk
   and i_item_sk = ss_item_sk
   and s_store_sk = ss_store_sk
   and ss_customer_sk = sr_customer_sk
   and ss_item_sk = sr_item_sk
   and ss_ticket_number = sr_ticket_number
   and sr_returned_date_sk = d2.d_date_sk
   and d2.d_quarter_name in ('2000Q1','2000Q2','2000Q3')
   and sr_customer_sk = cs_bill_customer_sk
   and sr_item_sk = cs_item_sk
   and cs_sold_date_sk = d3.d_date_sk
   and d3.d_quarter_name in ('2000Q1','2000Q2','2000Q3')
 group by i_item_id
         ,i_item_desc
         ,s_state
 order by i_item_id
         ,i_item_desc
         ,s_state
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  i_item_id
       ,i_item_desc
       ,s_state
       ,count(ss_quantity) as store_sales_quantitycount
       ,avg(ss_quantity) as store_sales_quantityave
       ,stddev_samp(ss_quantity) as store_sales_quantitystdev
       ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
       ,count(sr_return_quantity) as_store_returns_quantitycount
       ,avg(sr_return_quantity) as_store_returns_quantityave
       ,stddev_samp(sr_return_quantity) as_store_returns_quantitystdev
       ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
       ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
       ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitystdev
       ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
     ,store_returns
     ,catalog_sales
     ,date_dim d1
     ,date_dim d2
     ,date_dim d3
     ,store
     ,item
 where d1.d_quarter_name = '2000Q1'
   and d1.d_date_sk = ss_sold_date_sk
   and i_item_sk = ss_item_sk
   and s_store_sk = ss_store_sk
   and ss_customer_sk = sr_customer_sk
   and ss_item_sk = sr_item_sk
   and ss_ticket_number = sr_ticket_number
   and sr_returned_date_sk = d2.d_date_sk
   and d2.d_quarter_name in ('2000Q1','2000Q2','2000Q3')
   and sr_customer_sk = cs_bill_customer_sk
   and sr_item_sk = cs_item_sk
   and cs_sold_date_sk = d3.d_date_sk
   and d3.d_quarter_name in ('2000Q1','2000Q2','2000Q3')
 group by i_item_id
         ,i_item_desc
         ,s_state
 order by i_item_id
         ,i_item_desc
         ,s_state
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Map 14 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Map 15 (SIMPLE_EDGE), Reducer 10 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 6 <- Map 12 (SIMPLE_EDGE), Map 5 (SIMPLE_EDGE)
Reducer 7 <- Map 13 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 14 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Map 14 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 4 vectorized
      File Output Operator [FS_133]
        Limit [LIM_132] (rows=100 width=466)
          Number of rows:100
          Select Operator [SEL_131] (rows=13317347 width=466)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"]
          <-Reducer 3 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_130]
              Select Operator [SEL_129] (rows=13317347 width=466)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                Group By Operator [GBY_128] (rows=13317347 width=466)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)","count(VALUE._col4)","sum(VALUE._col5)","sum(VALUE._col6)","sum(VALUE._col7)","count(VALUE._col8)","sum(VALUE._col9)","sum(VALUE._col10)","sum(VALUE._col11)"],keys:KEY._col0, KEY._col1, KEY._col2
                <-Reducer 2 [SIMPLE_EDGE]
                  SHUFFLE [RS_49]
                    PartitionCols:_col0, _col1, _col2
                    Group By Operator [GBY_48] (rows=13317347 width=466)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"],aggregations:["count(_col3)","sum(_col3)","sum(_col7)","sum(_col6)","count(_col4)","sum(_col4)","sum(_col9)","sum(_col8)","count(_col5)","sum(_col5)","sum(_col11)","sum(_col10)"],keys:_col0, _col1, _col2
                      Select Operator [SEL_46] (rows=13317347 width=377)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                        Merge Join Operator [MERGEJOIN_105] (rows=13317347 width=377)
                          Conds:RS_107._col0=RS_44._col0(Inner),Output:["_col1","_col2","_col4","_col5","_col6","_col7"]
                        <-Map 1 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_107]
                            PartitionCols:_col0
                            Select Operator [SEL_106] (rows=462000 width=288)
                              Output:["_col0","_col1","_col2"]
                              TableScan [TS_0] (rows=462000 width=288)
                                default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_id","i_item_desc"]
                        <-Reducer 11 [SIMPLE_EDGE]
                          SHUFFLE [RS_44]
                            PartitionCols:_col0
                            Select Operator [SEL_42] (rows=13317347 width=97)
                              Output:["_col0","_col1","_col2","_col3","_col4"]
                              Merge Join Operator [MERGEJOIN_104] (rows=13317347 width=97)
                                Conds:RS_39._col1=RS_127._col0(Inner),Output:["_col0","_col2","_col3","_col5","_col8"]
                              <-Map 15 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_127]
                                  PartitionCols:_col0
                                  Select Operator [SEL_126] (rows=1704 width=90)
                                    Output:["_col0","_col1"]
                                    TableScan [TS_34] (rows=1704 width=90)
                                      default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_state"]
                              <-Reducer 10 [SIMPLE_EDGE]
                                SHUFFLE [RS_39]
                                  PartitionCols:_col1
                                  Merge Join Operator [MERGEJOIN_103] (rows=13317347 width=11)
                                    Conds:RS_36._col4=RS_125._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col5"]
                                  <-Map 14 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_125]
                                      PartitionCols:_col0
                                      Select Operator [SEL_122] (rows=3652 width=4)
                                        Output:["_col0"]
                                        Filter Operator [FIL_119] (rows=3652 width=94)
                                          predicate:(d_quarter_name) IN ('2000Q1', '2000Q2', '2000Q3')
                                          TableScan [TS_18] (rows=73049 width=94)
                                            default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_quarter_name"]
                                  <-Reducer 9 [SIMPLE_EDGE]
                                    SHUFFLE [RS_36]
                                      PartitionCols:_col4
                                      Select Operator [SEL_30] (rows=266379760 width=23)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                        Merge Join Operator [MERGEJOIN_102] (rows=266379760 width=23)
                                          Conds:RS_27._col4=RS_124._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6","_col7"]
                                        <-Map 14 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_124]
                                            PartitionCols:_col0
                                            Select Operator [SEL_121] (rows=3652 width=4)
                                              Output:["_col0"]
                                              Filter Operator [FIL_118] (rows=3652 width=94)
                                                predicate:(d_quarter_name) IN ('2000Q1', '2000Q2', '2000Q3')
                                                 Please refer to the previous TableScan [TS_18]
                                        <-Reducer 8 [SIMPLE_EDGE]
                                          SHUFFLE [RS_27]
                                            PartitionCols:_col4
                                            Merge Join Operator [MERGEJOIN_101] (rows=5328251731 width=27)
                                              Conds:RS_24._col0=RS_123._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                            <-Map 14 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_123]
                                                PartitionCols:_col0
                                                Select Operator [SEL_120] (rows=101 width=4)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_117] (rows=101 width=94)
                                                    predicate:(d_quarter_name = '2000Q1')
                                                     Please refer to the previous TableScan [TS_18]
                                            <-Reducer 7 [SIMPLE_EDGE]
                                              SHUFFLE [RS_24]
                                                PartitionCols:_col0
                                                Select Operator [SEL_17] (rows=96331893945 width=31)
                                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                                  Merge Join Operator [MERGEJOIN_100] (rows=96331893945 width=31)
                                                    Conds:RS_14._col7, _col8=RS_116._col2, _col1(Inner),Output:["_col0","_col1","_col3","_col5","_col6","_col10","_col11","_col14"]
                                                  <-Map 13 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_116]
                                                      PartitionCols:_col2, _col1
                                                      Select Operator [SEL_115] (rows=285117831 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_114] (rows=285117831 width=15)
                                                          predicate:(cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                                          TableScan [TS_8] (rows=287989836 width=15)
                                                            default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_quantity"]
                                                  <-Reducer 6 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_14]
                                                      PartitionCols:_col7, _col8
                                                      Merge Join Operator [MERGEJOIN_99] (rows=478292911 width=31)
                                                        Conds:RS_110._col1, _col2, _col4=RS_113._col1, _col2, _col3(Inner),Output:["_col0","_col1","_col3","_col5","_col6","_col7","_col8","_col10"]
                                                      <-Map 12 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_113]
                                                          PartitionCols:_col1, _col2, _col3
                                                          Select Operator [SEL_112] (rows=53632139 width=19)
                                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                                            Filter Operator [FIL_111] (rows=53632139 width=19)
                                                              predicate:(sr_customer_sk is not null and sr_returned_date_sk is not null)
                                                              TableScan [TS_5] (rows=57591150 width=19)
                                                                default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_returned_date_sk","sr_item_sk","sr_customer_sk","sr_ticket_number","sr_return_quantity"]
                                                      <-Map 5 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_110]
                                                          PartitionCols:_col1, _col2, _col4
                                                          Select Operator [SEL_109] (rows=501694138 width=23)
                                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                            Filter Operator [FIL_108] (rows=501694138 width=23)
                                                              predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                              TableScan [TS_2] (rows=575995635 width=23)
                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number","ss_quantity"]

