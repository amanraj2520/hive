Warning: Shuffle Join MERGEJOIN[309][tables = [$hdt$_2, $hdt$_3]] in Stage 'Reducer 8' is a cross product
Warning: Shuffle Join MERGEJOIN[310][tables = [$hdt$_2, $hdt$_3, $hdt$_1]] in Stage 'Reducer 9' is a cross product
PREHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 4 (BROADCAST_EDGE), Reducer 10 (BROADCAST_EDGE), Reducer 18 (BROADCAST_EDGE), Union 2 (CONTAINS)
Map 16 <- Map 20 (BROADCAST_EDGE)
Map 22 <- Map 23 (BROADCAST_EDGE), Reducer 11 (BROADCAST_EDGE), Reducer 19 (BROADCAST_EDGE), Union 2 (CONTAINS)
Map 5 <- Map 13 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 9 (SIMPLE_EDGE)
Reducer 12 <- Reducer 6 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Map 14 (SIMPLE_EDGE)
Reducer 17 <- Map 16 (SIMPLE_EDGE), Map 21 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE)
Reducer 19 <- Reducer 17 (SIMPLE_EDGE)
Reducer 3 <- Union 2 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Map 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Reducer 12 (XPROD_EDGE), Reducer 7 (XPROD_EDGE)
Reducer 9 <- Reducer 15 (XPROD_EDGE), Reducer 8 (XPROD_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 3 vectorized
      File Output Operator [FS_411]
        Limit [LIM_410] (rows=1 width=112)
          Number of rows:100
          Group By Operator [GBY_409] (rows=1 width=112)
            Output:["_col0"],aggregations:["sum(VALUE._col0)"]
          <-Union 2 [CUSTOM_SIMPLE_EDGE]
            <-Map 1 [CONTAINS] vectorized
              Reduce Output Operator [RS_408]
                Group By Operator [GBY_407] (rows=1 width=112)
                  Output:["_col0"],aggregations:["sum(_col0)"]
                  Select Operator [SEL_406] (rows=572 width=112)
                    Output:["_col0"]
                    Map Join Operator [MAPJOIN_405] (rows=572 width=0)
                      Conds:MAPJOIN_404._col2=RS_400._col0(Inner),HybridGraceHashJoin:true,Output:["_col3","_col4"]
                    <-Reducer 18 [BROADCAST_EDGE] vectorized
                      BROADCAST [RS_400]
                        PartitionCols:_col0
                        Group By Operator [GBY_399] (rows=712 width=4)
                          Output:["_col0"],keys:_col1
                          Select Operator [SEL_398] (rows=6548799 width=290)
                            Output:["_col1"]
                            Filter Operator [FIL_397] (rows=6548799 width=290)
                              predicate:(_col3 > 4L)
                              Select Operator [SEL_396] (rows=19646398 width=290)
                                Output:["_col1","_col3"]
                                Group By Operator [GBY_395] (rows=19646398 width=290)
                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                <-Reducer 17 [SIMPLE_EDGE]
                                  SHUFFLE [RS_88]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_87] (rows=19646398 width=290)
                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col3, _col5
                                      Merge Join Operator [MERGEJOIN_300] (rows=19646398 width=282)
                                        Conds:RS_392._col1=RS_394._col0(Inner),Output:["_col3","_col4","_col5"]
                                      <-Map 16 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_392]
                                          PartitionCols:_col1
                                          Map Join Operator [MAPJOIN_391] (rows=19646398 width=98)
                                            Conds:SEL_390._col0=RS_388._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col3"]
                                          <-Map 20 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_388]
                                              PartitionCols:_col0
                                              Select Operator [SEL_387] (rows=2609 width=98)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_386] (rows=2609 width=102)
                                                  predicate:(d_year) IN (1999, 2000, 2001, 2002)
                                                  TableScan [TS_75] (rows=73049 width=102)
                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date","d_year"]
                                          <-Select Operator [SEL_390] (rows=550076554 width=7)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_389] (rows=550076554 width=7)
                                                predicate:ss_sold_date_sk is not null
                                                TableScan [TS_72] (rows=575995635 width=7)
                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                      <-Map 21 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_394]
                                          PartitionCols:_col0
                                          Select Operator [SEL_393] (rows=462000 width=188)
                                            Output:["_col0","_col1"]
                                            TableScan [TS_78] (rows=462000 width=188)
                                              default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_desc"]
                    <-Map Join Operator [MAPJOIN_404] (rows=45838673 width=116)
                        Conds:MAPJOIN_403._col1=RS_385._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col3","_col4"]
                      <-Reducer 10 [BROADCAST_EDGE] vectorized
                        BROADCAST [RS_385]
                          PartitionCols:_col0
                          Group By Operator [GBY_384] (rows=225322 width=3)
                            Output:["_col0"],keys:KEY._col0
                          <-Reducer 9 [SIMPLE_EDGE]
                            SHUFFLE [RS_69]
                              PartitionCols:_col0
                              Group By Operator [GBY_68] (rows=225322 width=3)
                                Output:["_col0"],keys:_col2
                                Select Operator [SEL_67] (rows=450644 width=227)
                                  Output:["_col2"]
                                  Filter Operator [FIL_66] (rows=450644 width=227)
                                    predicate:(_col3 > _col1)
                                    Merge Join Operator [MERGEJOIN_310] (rows=1351934 width=227)
                                      Conds:(Inner),Output:["_col1","_col2","_col3"]
                                    <-Reducer 15 [XPROD_EDGE] vectorized
                                      XPROD_EDGE [RS_383]
                                        Group By Operator [GBY_382] (rows=1351934 width=115)
                                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                        <-Map 14 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_381]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_380] (rows=550080312 width=115)
                                              Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                              Select Operator [SEL_379] (rows=550080312 width=114)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_378] (rows=550080312 width=114)
                                                  predicate:ss_customer_sk is not null
                                                  TableScan [TS_52] (rows=575995635 width=114)
                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_customer_sk","ss_quantity","ss_sales_price"]
                                    <-Reducer 8 [XPROD_EDGE]
                                      XPROD_EDGE [RS_63]
                                        Merge Join Operator [MERGEJOIN_309] (rows=1 width=112)
                                          Conds:(Inner),Output:["_col1"]
                                        <-Reducer 12 [XPROD_EDGE] vectorized
                                          XPROD_EDGE [RS_377]
                                            Select Operator [SEL_376] (rows=1 width=112)
                                              Output:["_col0"]
                                              Group By Operator [GBY_375] (rows=1 width=112)
                                                Output:["_col0"],aggregations:["max(VALUE._col0)"]
                                              <-Reducer 6 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_368]
                                                  Group By Operator [GBY_366] (rows=1 width=112)
                                                    Output:["_col0"],aggregations:["max(_col1)"]
                                                    Select Operator [SEL_364] (rows=46114 width=112)
                                                      Output:["_col1"]
                                                      Group By Operator [GBY_362] (rows=46114 width=112)
                                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                                      <-Map 5 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_361]
                                                          PartitionCols:_col0
                                                          Group By Operator [GBY_360] (rows=415026 width=112)
                                                            Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col1
                                                            Map Join Operator [MAPJOIN_359] (rows=18762463 width=112)
                                                              Conds:SEL_358._col0=RS_356._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2"]
                                                            <-Map 13 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_356]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_355] (rows=2609 width=4)
                                                                  Output:["_col0"]
                                                                  Filter Operator [FIL_354] (rows=2609 width=8)
                                                                    predicate:(d_year) IN (1999, 2000, 2001, 2002)
                                                                    TableScan [TS_9] (rows=73049 width=8)
                                                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                            <-Select Operator [SEL_358] (rows=525327388 width=119)
                                                                Output:["_col0","_col1","_col2"]
                                                                Filter Operator [FIL_357] (rows=525327388 width=118)
                                                                  predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                                  TableScan [TS_6] (rows=575995635 width=118)
                                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_quantity","ss_sales_price"]
                                        <-Reducer 7 [XPROD_EDGE] vectorized
                                          XPROD_EDGE [RS_374]
                                            Select Operator [SEL_373] (rows=1 width=8)
                                              Filter Operator [FIL_372] (rows=1 width=8)
                                                predicate:(sq_count_check(_col0) <= 1)
                                                Group By Operator [GBY_371] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count()"]
                                                  Select Operator [SEL_370] (rows=1 width=8)
                                                    Group By Operator [GBY_369] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                                    <-Reducer 6 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_367]
                                                        Group By Operator [GBY_365] (rows=1 width=8)
                                                          Output:["_col0"],aggregations:["count(_col0)"]
                                                          Select Operator [SEL_363] (rows=46114 width=112)
                                                            Output:["_col0"]
                                                             Please refer to the previous Group By Operator [GBY_362]
                      <-Map Join Operator [MAPJOIN_403] (rows=101084444 width=122)
                          Conds:SEL_402._col0=RS_353._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4"]
                        <-Map 4 [BROADCAST_EDGE] vectorized
                          BROADCAST [RS_353]
                            PartitionCols:_col0
                            Select Operator [SEL_352] (rows=652 width=4)
                              Output:["_col0"]
                              Filter Operator [FIL_351] (rows=652 width=12)
                                predicate:((d_moy = 1) and (d_year = 1999))
                                TableScan [TS_3] (rows=73049 width=12)
                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                        <-Select Operator [SEL_402] (rows=285117831 width=127)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Filter Operator [FIL_401] (rows=285117831 width=127)
                              predicate:(cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                              TableScan [TS_325] (rows=287989836 width=127)
                                Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_quantity","cs_list_price"]
            <-Map 22 [CONTAINS] vectorized
              Reduce Output Operator [RS_430]
                Group By Operator [GBY_429] (rows=1 width=112)
                  Output:["_col0"],aggregations:["sum(_col0)"]
                  Select Operator [SEL_428] (rows=286 width=112)
                    Output:["_col0"]
                    Map Join Operator [MAPJOIN_427] (rows=286 width=0)
                      Conds:MAPJOIN_426._col1=RS_419._col0(Inner),HybridGraceHashJoin:true,Output:["_col3","_col4"]
                    <-Reducer 19 [BROADCAST_EDGE] vectorized
                      BROADCAST [RS_419]
                        PartitionCols:_col0
                        Group By Operator [GBY_418] (rows=712 width=4)
                          Output:["_col0"],keys:_col1
                          Select Operator [SEL_417] (rows=6548799 width=290)
                            Output:["_col1"]
                            Filter Operator [FIL_416] (rows=6548799 width=290)
                              predicate:(_col3 > 4L)
                              Select Operator [SEL_415] (rows=19646398 width=290)
                                Output:["_col1","_col3"]
                                Group By Operator [GBY_414] (rows=19646398 width=290)
                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                <-Reducer 17 [SIMPLE_EDGE]
                                  SHUFFLE [RS_195]
                                    PartitionCols:_col0
                                     Please refer to the previous Group By Operator [GBY_87]
                    <-Map Join Operator [MAPJOIN_426] (rows=22920555 width=119)
                        Conds:MAPJOIN_425._col2=RS_413._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col3","_col4"]
                      <-Reducer 11 [BROADCAST_EDGE] vectorized
                        BROADCAST [RS_413]
                          PartitionCols:_col0
                          Group By Operator [GBY_412] (rows=225322 width=3)
                            Output:["_col0"],keys:KEY._col0
                          <-Reducer 9 [SIMPLE_EDGE]
                            SHUFFLE [RS_176]
                              PartitionCols:_col0
                               Please refer to the previous Group By Operator [GBY_68]
                      <-Map Join Operator [MAPJOIN_425] (rows=51391963 width=123)
                          Conds:SEL_424._col0=RS_422._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4"]
                        <-Map 23 [BROADCAST_EDGE] vectorized
                          BROADCAST [RS_422]
                            PartitionCols:_col0
                            Select Operator [SEL_421] (rows=652 width=4)
                              Output:["_col0"]
                              Filter Operator [FIL_420] (rows=652 width=12)
                                predicate:((d_moy = 1) and (d_year = 1999))
                                TableScan [TS_110] (rows=73049 width=12)
                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                        <-Select Operator [SEL_424] (rows=143930993 width=127)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Filter Operator [FIL_423] (rows=143930993 width=127)
                              predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                              TableScan [TS_338] (rows=144002668 width=127)
                                Output:["ws_sold_date_sk","ws_item_sk","ws_bill_customer_sk","ws_quantity","ws_list_price"]

