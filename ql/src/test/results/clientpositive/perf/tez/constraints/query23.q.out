Warning: Shuffle Join MERGEJOIN[299][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 15' is a cross product
Warning: Shuffle Join MERGEJOIN[300][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 16' is a cross product
PREHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 23 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 12 <- Map 11 (SIMPLE_EDGE), Map 19 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (CUSTOM_SIMPLE_EDGE), Reducer 18 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (CUSTOM_SIMPLE_EDGE), Reducer 25 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 13 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 20 <- Map 19 (SIMPLE_EDGE), Map 26 (SIMPLE_EDGE)
Reducer 21 <- Map 27 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Reducer 21 (SIMPLE_EDGE)
Reducer 25 <- Map 24 (SIMPLE_EDGE)
Reducer 3 <- Reducer 17 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 22 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Map 28 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 17 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_367]
        Limit [LIM_366] (rows=1 width=112)
          Number of rows:100
          Group By Operator [GBY_365] (rows=1 width=112)
            Output:["_col0"],aggregations:["sum(VALUE._col0)"]
          <-Union 5 [CUSTOM_SIMPLE_EDGE]
            <-Reducer 10 [CONTAINS]
              Reduce Output Operator [RS_316]
                Group By Operator [GBY_315] (rows=1 width=112)
                  Output:["_col0"],aggregations:["sum(_col0)"]
                  Select Operator [SEL_313] (rows=52 width=112)
                    Output:["_col0"]
                    Merge Join Operator [MERGEJOIN_312] (rows=52 width=2)
                      Conds:RS_200._col1=RS_374._col0(Inner),Output:["_col3","_col4"]
                    <-Reducer 23 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_374]
                        PartitionCols:_col0
                        Select Operator [SEL_373] (rows=745 width=4)
                          Output:["_col0"]
                          Filter Operator [FIL_372] (rows=745 width=12)
                            predicate:(_col1 > 4L)
                            Group By Operator [GBY_371] (rows=2235 width=12)
                              Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                            <-Reducer 21 [SIMPLE_EDGE]
                              SHUFFLE [RS_190]
                                PartitionCols:_col0
                                Group By Operator [GBY_87] (rows=2235 width=12)
                                  Output:["_col0","_col1"],aggregations:["count()"],keys:_col4
                                  Merge Join Operator [MERGEJOIN_290] (rows=19646398 width=4)
                                    Conds:RS_83._col1=RS_360._col0(Inner),Output:["_col4"]
                                  <-Map 27 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_360]
                                      PartitionCols:_col0
                                      Select Operator [SEL_359] (rows=462000 width=188)
                                        Output:["_col0"]
                                        TableScan [TS_78] (rows=462000 width=4)
                                          default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk"]
                                  <-Reducer 20 [SIMPLE_EDGE]
                                    SHUFFLE [RS_83]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_289] (rows=19646398 width=4)
                                        Conds:RS_358._col0=RS_330._col0(Inner),Output:["_col1"]
                                      <-Map 19 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_330]
                                          PartitionCols:_col0
                                          Select Operator [SEL_328] (rows=2609 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_327] (rows=2609 width=8)
                                              predicate:(d_year) IN (1999, 2000, 2001, 2002)
                                              TableScan [TS_9] (rows=73049 width=8)
                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                      <-Map 26 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_358]
                                          PartitionCols:_col0
                                          Select Operator [SEL_357] (rows=550076554 width=7)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_356] (rows=550076554 width=7)
                                              predicate:ss_sold_date_sk is not null
                                              TableScan [TS_72] (rows=575995635 width=7)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                    <-Reducer 9 [SIMPLE_EDGE]
                      SHUFFLE [RS_200]
                        PartitionCols:_col1
                        Merge Join Operator [MERGEJOIN_304] (rows=3941102 width=118)
                          Conds:RS_197._col2=RS_355._col0(Inner),Output:["_col1","_col3","_col4"]
                        <-Reducer 17 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_355]
                            PartitionCols:_col0
                            Group By Operator [GBY_353] (rows=225322 width=3)
                              Output:["_col0"],keys:KEY._col0
                            <-Reducer 16 [SIMPLE_EDGE]
                              SHUFFLE [RS_69]
                                PartitionCols:_col0
                                Group By Operator [GBY_68] (rows=225322 width=3)
                                  Output:["_col0"],keys:_col2
                                  Select Operator [SEL_67] (rows=450644 width=227)
                                    Output:["_col2"]
                                    Filter Operator [FIL_66] (rows=450644 width=227)
                                      predicate:(_col3 > _col1)
                                      Merge Join Operator [MERGEJOIN_300] (rows=1351934 width=227)
                                        Conds:(Inner),Output:["_col1","_col2","_col3"]
                                      <-Reducer 15 [CUSTOM_SIMPLE_EDGE]
                                        PARTITION_ONLY_SHUFFLE [RS_63]
                                          Merge Join Operator [MERGEJOIN_299] (rows=1 width=112)
                                            Conds:(Inner),Output:["_col1"]
                                          <-Reducer 14 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_343]
                                              Select Operator [SEL_342] (rows=1 width=8)
                                                Filter Operator [FIL_341] (rows=1 width=8)
                                                  predicate:(sq_count_check(_col0) <= 1)
                                                  Group By Operator [GBY_340] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count()"]
                                                    Select Operator [SEL_339] (rows=1 width=8)
                                                      Group By Operator [GBY_338] (rows=1 width=8)
                                                        Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                                      <-Reducer 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_336]
                                                          Group By Operator [GBY_334] (rows=1 width=8)
                                                            Output:["_col0"],aggregations:["count(_col0)"]
                                                            Select Operator [SEL_332] (rows=50562 width=112)
                                                              Output:["_col0"]
                                                              Group By Operator [GBY_331] (rows=50562 width=112)
                                                                Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                                              <-Reducer 12 [SIMPLE_EDGE]
                                                                SHUFFLE [RS_17]
                                                                  PartitionCols:_col0
                                                                  Group By Operator [GBY_16] (rows=455058 width=112)
                                                                    Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col1
                                                                    Merge Join Operator [MERGEJOIN_294] (rows=18762463 width=112)
                                                                      Conds:RS_326._col0=RS_329._col0(Inner),Output:["_col1","_col2"]
                                                                    <-Map 19 [SIMPLE_EDGE] vectorized
                                                                      SHUFFLE [RS_329]
                                                                        PartitionCols:_col0
                                                                         Please refer to the previous Select Operator [SEL_328]
                                                                    <-Map 11 [SIMPLE_EDGE] vectorized
                                                                      SHUFFLE [RS_326]
                                                                        PartitionCols:_col0
                                                                        Select Operator [SEL_325] (rows=525327388 width=119)
                                                                          Output:["_col0","_col1","_col2"]
                                                                          Filter Operator [FIL_324] (rows=525327388 width=118)
                                                                            predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                                            TableScan [TS_6] (rows=575995635 width=118)
                                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_quantity","ss_sales_price"]
                                          <-Reducer 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_346]
                                              Select Operator [SEL_345] (rows=1 width=112)
                                                Output:["_col0"]
                                                Group By Operator [GBY_344] (rows=1 width=112)
                                                  Output:["_col0"],aggregations:["max(VALUE._col0)"]
                                                <-Reducer 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_337]
                                                    Group By Operator [GBY_335] (rows=1 width=112)
                                                      Output:["_col0"],aggregations:["max(_col1)"]
                                                      Select Operator [SEL_333] (rows=50562 width=112)
                                                        Output:["_col1"]
                                                         Please refer to the previous Group By Operator [GBY_331]
                                      <-Reducer 25 [CUSTOM_SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_352]
                                          Group By Operator [GBY_351] (rows=1351934 width=115)
                                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                          <-Map 24 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_350]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_349] (rows=550080312 width=115)
                                                Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                                Select Operator [SEL_348] (rows=550080312 width=114)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_347] (rows=550080312 width=114)
                                                    predicate:ss_customer_sk is not null
                                                    TableScan [TS_52] (rows=575995635 width=114)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_customer_sk","ss_quantity","ss_sales_price"]
                        <-Reducer 8 [SIMPLE_EDGE]
                          SHUFFLE [RS_197]
                            PartitionCols:_col2
                            Merge Join Operator [MERGEJOIN_296] (rows=3941102 width=122)
                              Conds:RS_370._col0=RS_323._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                            <-Map 7 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_323]
                                PartitionCols:_col0
                                Select Operator [SEL_321] (rows=50 width=4)
                                  Output:["_col0"]
                                  Filter Operator [FIL_320] (rows=50 width=12)
                                    predicate:((d_moy = 1) and (d_year = 1999))
                                    TableScan [TS_3] (rows=73049 width=12)
                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                            <-Map 28 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_370]
                                PartitionCols:_col0
                                Select Operator [SEL_369] (rows=143930993 width=127)
                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                  Filter Operator [FIL_368] (rows=143930993 width=127)
                                    predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                    TableScan [TS_102] (rows=144002668 width=127)
                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_customer_sk","ws_quantity","ws_list_price"]
            <-Reducer 4 [CONTAINS]
              Reduce Output Operator [RS_311]
                Group By Operator [GBY_310] (rows=1 width=112)
                  Output:["_col0"],aggregations:["sum(_col0)"]
                  Select Operator [SEL_308] (rows=102 width=112)
                    Output:["_col0"]
                    Merge Join Operator [MERGEJOIN_307] (rows=102 width=1)
                      Conds:RS_98._col2=RS_364._col0(Inner),Output:["_col3","_col4"]
                    <-Reducer 22 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_364]
                        PartitionCols:_col0
                        Select Operator [SEL_363] (rows=745 width=4)
                          Output:["_col0"]
                          Filter Operator [FIL_362] (rows=745 width=12)
                            predicate:(_col1 > 4L)
                            Group By Operator [GBY_361] (rows=2235 width=12)
                              Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                            <-Reducer 21 [SIMPLE_EDGE]
                              SHUFFLE [RS_88]
                                PartitionCols:_col0
                                 Please refer to the previous Group By Operator [GBY_87]
                    <-Reducer 3 [SIMPLE_EDGE]
                      SHUFFLE [RS_98]
                        PartitionCols:_col2
                        Merge Join Operator [MERGEJOIN_301] (rows=7751875 width=98)
                          Conds:RS_95._col1=RS_354._col0(Inner),Output:["_col2","_col3","_col4"]
                        <-Reducer 17 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_354]
                            PartitionCols:_col0
                             Please refer to the previous Group By Operator [GBY_353]
                        <-Reducer 2 [SIMPLE_EDGE]
                          SHUFFLE [RS_95]
                            PartitionCols:_col1
                            Merge Join Operator [MERGEJOIN_293] (rows=7751875 width=101)
                              Conds:RS_319._col0=RS_322._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                            <-Map 7 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_322]
                                PartitionCols:_col0
                                 Please refer to the previous Select Operator [SEL_321]
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_319]
                                PartitionCols:_col0
                                Select Operator [SEL_318] (rows=285117831 width=127)
                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                  Filter Operator [FIL_317] (rows=285117831 width=127)
                                    predicate:(cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                    TableScan [TS_0] (rows=287989836 width=127)
                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_quantity","cs_list_price"]

