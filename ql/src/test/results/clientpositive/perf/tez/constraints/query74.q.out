PREHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,max(ss_net_paid) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,max(ws_net_paid) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
         )
  select 
        t_s_secyear.customer_id, t_s_secyear.customer_first_name, t_s_secyear.customer_last_name
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.year = 2001
         and t_s_secyear.year = 2001+1
         and t_w_firstyear.year = 2001
         and t_w_secyear.year = 2001+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
 order by 2,1,3
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,max(ss_net_paid) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,max(ws_net_paid) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
         )
  select 
        t_s_secyear.customer_id, t_s_secyear.customer_first_name, t_s_secyear.customer_last_name
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.year = 2001
         and t_s_secyear.year = 2001+1
         and t_w_firstyear.year = 2001
         and t_w_secyear.year = 2001+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
 order by 2,1,3
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 10 (BROADCAST_EDGE), Map 16 (BROADCAST_EDGE)
Map 17 <- Map 10 (BROADCAST_EDGE), Map 16 (BROADCAST_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Map 11 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 11 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Map 1 (SIMPLE_EDGE), Map 11 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 15 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 13 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_212]
        Limit [LIM_211] (rows=100 width=280)
          Number of rows:100
          Select Operator [SEL_210] (rows=12248093 width=280)
            Output:["_col0","_col1","_col2"]
          <-Reducer 4 [SIMPLE_EDGE]
            SHUFFLE [RS_90]
              Select Operator [SEL_89] (rows=12248093 width=280)
                Output:["_col0","_col1","_col2"]
                Filter Operator [FIL_88] (rows=12248093 width=628)
                  predicate:CASE WHEN (_col7) THEN (CASE WHEN (_col8) THEN (((_col1 / _col6) > _col9)) ELSE (_col10) END) ELSE (CASE WHEN (_col8) THEN (((_col1 / _col6) > null)) ELSE (null) END) END
                  Merge Join Operator [MERGEJOIN_165] (rows=24496187 width=628)
                    Conds:RS_191._col0=RS_86._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"]
                  <-Reducer 3 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_191]
                      PartitionCols:_col0
                      Select Operator [SEL_190] (rows=51391963 width=212)
                        Output:["_col0","_col1"]
                        Group By Operator [GBY_189] (rows=51391963 width=392)
                          Output:["_col0","_col1","_col2","_col3"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                        <-Reducer 2 [SIMPLE_EDGE]
                          SHUFFLE [RS_16]
                            PartitionCols:_col0, _col1, _col2
                            Group By Operator [GBY_15] (rows=51391963 width=392)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["max(_col2)"],keys:_col5, _col6, _col7
                              Merge Join Operator [MERGEJOIN_156] (rows=51391963 width=391)
                                Conds:RS_182._col1=RS_185._col0(Inner),Output:["_col2","_col5","_col6","_col7"]
                              <-Map 11 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_185]
                                  PartitionCols:_col0
                                  Select Operator [SEL_184] (rows=80000000 width=284)
                                    Output:["_col0","_col1","_col2","_col3"]
                                    TableScan [TS_6] (rows=80000000 width=284)
                                      default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_customer_id","c_first_name","c_last_name"]
                              <-Map 1 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_182]
                                  PartitionCols:_col1
                                  Map Join Operator [MAPJOIN_180] (rows=51391963 width=115)
                                    Conds:SEL_179._col0=RS_172._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2"]
                                  <-Map 10 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_172]
                                      PartitionCols:_col0
                                      Select Operator [SEL_171] (rows=652 width=4)
                                        Output:["_col0"]
                                        Filter Operator [FIL_170] (rows=652 width=8)
                                          predicate:((d_year = 2002) and (d_year) IN (2001, 2002))
                                          TableScan [TS_3] (rows=73049 width=8)
                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                  <-Select Operator [SEL_179] (rows=143930993 width=119)
                                      Output:["_col0","_col1","_col2"]
                                      Filter Operator [FIL_178] (rows=143930993 width=119)
                                        predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                        TableScan [TS_0] (rows=144002668 width=119)
                                          default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_net_paid"]
                                        <-Map 16 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_177]
                                            PartitionCols:_col0
                                            Select Operator [SEL_175] (rows=652 width=4)
                                              Output:["_col0"]
                                              Filter Operator [FIL_174] (rows=652 width=8)
                                                predicate:((d_year = 2001) and (d_year) IN (2001, 2002))
                                                TableScan [TS_22] (rows=73049 width=8)
                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                  <-Reducer 9 [SIMPLE_EDGE]
                    SHUFFLE [RS_86]
                      PartitionCols:_col0
                      Select Operator [SEL_84] (rows=20485012 width=616)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                        Merge Join Operator [MERGEJOIN_164] (rows=20485012 width=724)
                          Conds:RS_81._col0=RS_209._col0(Inner),Output:["_col0","_col1","_col2","_col4","_col5","_col6","_col7","_col8","_col9"]
                        <-Reducer 13 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_209]
                            PartitionCols:_col0
                            Group By Operator [GBY_208] (rows=80000000 width=392)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                            <-Reducer 12 [SIMPLE_EDGE]
                              SHUFFLE [RS_75]
                                PartitionCols:_col0, _col1, _col2
                                Group By Operator [GBY_74] (rows=80000000 width=392)
                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["max(_col2)"],keys:_col5, _col6, _col7
                                  Merge Join Operator [MERGEJOIN_162] (rows=187573258 width=377)
                                    Conds:RS_201._col1=RS_186._col0(Inner),Output:["_col2","_col5","_col6","_col7"]
                                  <-Map 11 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_186]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_184]
                                  <-Map 17 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_201]
                                      PartitionCols:_col1
                                      Map Join Operator [MAPJOIN_199] (rows=187573258 width=101)
                                        Conds:SEL_198._col0=RS_173._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2"]
                                      <-Map 10 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_173]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_171]
                                      <-Select Operator [SEL_198] (rows=525327388 width=114)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_197] (rows=525327388 width=114)
                                            predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                            TableScan [TS_59] (rows=575995635 width=114)
                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_net_paid"]
                                            <-Map 16 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_176]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_175]
                        <-Reducer 8 [SIMPLE_EDGE]
                          SHUFFLE [RS_81]
                            PartitionCols:_col0
                            Merge Join Operator [MERGEJOIN_163] (rows=17130654 width=332)
                              Conds:RS_207._col0=RS_196._col0(Inner),Output:["_col0","_col1","_col2","_col4","_col5"]
                            <-Reducer 15 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_207]
                                PartitionCols:_col0
                                Select Operator [SEL_206] (rows=26666666 width=216)
                                  Output:["_col0","_col1","_col2"]
                                  Filter Operator [FIL_205] (rows=26666666 width=212)
                                    predicate:(_col3 > 0)
                                    Select Operator [SEL_204] (rows=80000000 width=212)
                                      Output:["_col0","_col3"]
                                      Group By Operator [GBY_203] (rows=80000000 width=392)
                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                      <-Reducer 14 [SIMPLE_EDGE]
                                        SHUFFLE [RS_35]
                                          PartitionCols:_col0, _col1, _col2
                                          Group By Operator [GBY_34] (rows=80000000 width=392)
                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["max(_col2)"],keys:_col5, _col6, _col7
                                            Merge Join Operator [MERGEJOIN_158] (rows=187573258 width=377)
                                              Conds:RS_202._col1=RS_187._col0(Inner),Output:["_col2","_col5","_col6","_col7"]
                                            <-Map 11 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_187]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_184]
                                            <-Map 17 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_202]
                                                PartitionCols:_col1
                                                Map Join Operator [MAPJOIN_200] (rows=187573258 width=101)
                                                  Conds:SEL_198._col0=RS_176._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2"]
                                                <-Map 16 [BROADCAST_EDGE] vectorized
                                                   Please refer to the previous BROADCAST [RS_176]
                                                   Please refer to the previous Select Operator [SEL_198]
                            <-Reducer 7 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_196]
                                PartitionCols:_col0
                                Select Operator [SEL_195] (rows=17130654 width=216)
                                  Output:["_col0","_col1","_col2"]
                                  Filter Operator [FIL_194] (rows=17130654 width=212)
                                    predicate:(_col3 > 0)
                                    Select Operator [SEL_193] (rows=51391963 width=212)
                                      Output:["_col0","_col3"]
                                      Group By Operator [GBY_192] (rows=51391963 width=392)
                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                      <-Reducer 6 [SIMPLE_EDGE]
                                        SHUFFLE [RS_55]
                                          PartitionCols:_col0, _col1, _col2
                                          Group By Operator [GBY_54] (rows=51391963 width=392)
                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["max(_col2)"],keys:_col5, _col6, _col7
                                            Merge Join Operator [MERGEJOIN_160] (rows=51391963 width=391)
                                              Conds:RS_183._col1=RS_188._col0(Inner),Output:["_col2","_col5","_col6","_col7"]
                                            <-Map 11 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_188]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_184]
                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_183]
                                                PartitionCols:_col1
                                                Map Join Operator [MAPJOIN_181] (rows=51391963 width=115)
                                                  Conds:SEL_179._col0=RS_177._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2"]
                                                <-Map 16 [BROADCAST_EDGE] vectorized
                                                   Please refer to the previous BROADCAST [RS_177]
                                                   Please refer to the previous Select Operator [SEL_179]

