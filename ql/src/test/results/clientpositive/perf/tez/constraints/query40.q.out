PREHOOK: query: explain
select  
   w_state
  ,i_item_id
  ,sum(case when (cast(d_date as date) < cast ('1998-04-08' as date)) 
 		then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end) as sales_before
  ,sum(case when (cast(d_date as date) >= cast ('1998-04-08' as date)) 
 		then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end) as sales_after
 from
   catalog_sales left outer join catalog_returns on
       (cs_order_number = cr_order_number 
        and cs_item_sk = cr_item_sk)
  ,warehouse 
  ,item
  ,date_dim
 where
     i_current_price between 0.99 and 1.49
 and i_item_sk          = cs_item_sk
 and cs_warehouse_sk    = w_warehouse_sk 
 and cs_sold_date_sk    = d_date_sk
 and d_date between (cast ('1998-04-08' as date) - 30 days)
                and (cast ('1998-04-08' as date) + 30 days) 
 group by
    w_state,i_item_id
 order by w_state,i_item_id
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@warehouse
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  
   w_state
  ,i_item_id
  ,sum(case when (cast(d_date as date) < cast ('1998-04-08' as date)) 
 		then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end) as sales_before
  ,sum(case when (cast(d_date as date) >= cast ('1998-04-08' as date)) 
 		then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end) as sales_after
 from
   catalog_sales left outer join catalog_returns on
       (cs_order_number = cr_order_number 
        and cs_item_sk = cr_item_sk)
  ,warehouse 
  ,item
  ,date_dim
 where
     i_current_price between 0.99 and 1.49
 and i_item_sk          = cs_item_sk
 and cs_warehouse_sk    = w_warehouse_sk 
 and cs_sold_date_sk    = d_date_sk
 and d_date between (cast ('1998-04-08' as date) - 30 days)
                and (cast ('1998-04-08' as date) + 30 days) 
 group by
    w_state,i_item_id
 order by w_state,i_item_id
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@warehouse
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 5 (SIMPLE_EDGE), Map 6 (BROADCAST_EDGE), Map 7 (BROADCAST_EDGE), Map 8 (BROADCAST_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 4 vectorized
      File Output Operator [FS_79]
        Limit [LIM_78] (rows=100 width=410)
          Number of rows:100
          Select Operator [SEL_77] (rows=34531 width=410)
            Output:["_col0","_col1","_col2","_col3"]
          <-Reducer 3 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_76]
              Group By Operator [GBY_75] (rows=34531 width=410)
                Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1
              <-Reducer 2 [SIMPLE_EDGE]
                SHUFFLE [RS_29]
                  PartitionCols:_col0, _col1
                  Group By Operator [GBY_28] (rows=172655 width=410)
                    Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col2)","sum(_col3)"],keys:_col0, _col1
                    Top N Key Operator [TNK_54] (rows=3519685 width=306)
                      keys:_col0, _col1,sort order:++,top n:100
                      Select Operator [SEL_26] (rows=3519685 width=306)
                        Output:["_col0","_col1","_col2","_col3"]
                        Map Join Operator [MAPJOIN_58] (rows=3519685 width=306)
                          Conds:MAPJOIN_57._col1=RS_74._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col3","_col5","_col6","_col8"]
                        <-Map 8 [BROADCAST_EDGE] vectorized
                          BROADCAST [RS_74]
                            PartitionCols:_col0
                            Select Operator [SEL_73] (rows=51333 width=104)
                              Output:["_col0","_col1"]
                              Filter Operator [FIL_72] (rows=51333 width=215)
                                predicate:i_current_price BETWEEN 0.99 AND 1.49
                                TableScan [TS_17] (rows=462000 width=215)
                                  default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_id","i_current_price"]
                        <-Map Join Operator [MAPJOIN_57] (rows=31677367 width=210)
                            Conds:SEL_13._col0=RS_71._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col5","_col6"]
                          <-Map 7 [BROADCAST_EDGE] vectorized
                            BROADCAST [RS_71]
                              PartitionCols:_col0
                              Select Operator [SEL_70] (rows=8116 width=12)
                                Output:["_col0","_col1","_col2"]
                                Filter Operator [FIL_69] (rows=8116 width=98)
                                  predicate:CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'1998-03-09 00:00:00' AND TIMESTAMP'1998-05-08 00:00:00'
                                  TableScan [TS_14] (rows=73049 width=98)
                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date"]
                          <-Select Operator [SEL_13] (rows=285115816 width=205)
                              Output:["_col0","_col1","_col2","_col3"]
                              Map Join Operator [MAPJOIN_56] (rows=285115816 width=277)
                                Conds:MERGEJOIN_55._col1=RS_68._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col2","_col4","_col7","_col9"]
                              <-Map 6 [BROADCAST_EDGE] vectorized
                                BROADCAST [RS_68]
                                  PartitionCols:_col0
                                  Select Operator [SEL_67] (rows=27 width=90)
                                    Output:["_col0","_col1"]
                                    TableScan [TS_5] (rows=27 width=90)
                                      default@warehouse,warehouse,Tbl:COMPLETE,Col:COMPLETE,Output:["w_warehouse_sk","w_state"]
                              <-Merge Join Operator [MERGEJOIN_55] (rows=285115816 width=195)
                                  Conds:RS_64._col2, _col3=RS_66._col0, _col1(Left Outer),Output:["_col0","_col1","_col2","_col4","_col7"]
                                <-Map 1 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_64]
                                    PartitionCols:_col2, _col3
                                    Select Operator [SEL_63] (rows=285115816 width=127)
                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                      Filter Operator [FIL_62] (rows=285115816 width=127)
                                        predicate:(cs_sold_date_sk is not null and cs_warehouse_sk is not null)
                                        TableScan [TS_0] (rows=287989836 width=127)
                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_warehouse_sk","cs_item_sk","cs_order_number","cs_sales_price"]
                                <-Map 5 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_66]
                                    PartitionCols:_col0, _col1
                                    Select Operator [SEL_65] (rows=28798881 width=117)
                                      Output:["_col0","_col1","_col2"]
                                      TableScan [TS_3] (rows=28798881 width=117)
                                        default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_item_sk","cr_order_number","cr_refunded_cash"]

