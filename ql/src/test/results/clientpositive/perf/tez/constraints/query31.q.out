PREHOOK: query: explain
with ss as
 (select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales
 from store_sales,date_dim,customer_address
 where ss_sold_date_sk = d_date_sk
  and ss_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year),
 ws as
 (select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales
 from web_sales,date_dim,customer_address
 where ws_sold_date_sk = d_date_sk
  and ws_bill_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year)
 select /* tt */
        ss1.ca_county
       ,ss1.d_year
       ,ws2.web_sales/ws1.web_sales web_q1_q2_increase
       ,ss2.store_sales/ss1.store_sales store_q1_q2_increase
       ,ws3.web_sales/ws2.web_sales web_q2_q3_increase
       ,ss3.store_sales/ss2.store_sales store_q2_q3_increase
 from
        ss ss1
       ,ss ss2
       ,ss ss3
       ,ws ws1
       ,ws ws2
       ,ws ws3
 where
    ss1.d_qoy = 1
    and ss1.d_year = 2000
    and ss1.ca_county = ss2.ca_county
    and ss2.d_qoy = 2
    and ss2.d_year = 2000
 and ss2.ca_county = ss3.ca_county
    and ss3.d_qoy = 3
    and ss3.d_year = 2000
    and ss1.ca_county = ws1.ca_county
    and ws1.d_qoy = 1
    and ws1.d_year = 2000
    and ws1.ca_county = ws2.ca_county
    and ws2.d_qoy = 2
    and ws2.d_year = 2000
    and ws1.ca_county = ws3.ca_county
    and ws3.d_qoy = 3
    and ws3.d_year =2000
    and case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end 
       > case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end
    and case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end
       > case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end
 order by ss1.d_year
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ss as
 (select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales
 from store_sales,date_dim,customer_address
 where ss_sold_date_sk = d_date_sk
  and ss_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year),
 ws as
 (select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales
 from web_sales,date_dim,customer_address
 where ws_sold_date_sk = d_date_sk
  and ws_bill_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year)
 select /* tt */
        ss1.ca_county
       ,ss1.d_year
       ,ws2.web_sales/ws1.web_sales web_q1_q2_increase
       ,ss2.store_sales/ss1.store_sales store_q1_q2_increase
       ,ws3.web_sales/ws2.web_sales web_q2_q3_increase
       ,ss3.store_sales/ss2.store_sales store_q2_q3_increase
 from
        ss ss1
       ,ss ss2
       ,ss ss3
       ,ws ws1
       ,ws ws2
       ,ws ws3
 where
    ss1.d_qoy = 1
    and ss1.d_year = 2000
    and ss1.ca_county = ss2.ca_county
    and ss2.d_qoy = 2
    and ss2.d_year = 2000
 and ss2.ca_county = ss3.ca_county
    and ss3.d_qoy = 3
    and ss3.d_year = 2000
    and ss1.ca_county = ws1.ca_county
    and ws1.d_qoy = 1
    and ws1.d_year = 2000
    and ws1.ca_county = ws2.ca_county
    and ws2.d_qoy = 2
    and ws2.d_year = 2000
    and ws1.ca_county = ws3.ca_county
    and ws3.d_qoy = 3
    and ws3.d_year =2000
    and case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end 
       > case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end
    and case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end
       > case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end
 order by ss1.d_year
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Map 1 (SIMPLE_EDGE), Map 16 (SIMPLE_EDGE)
Reducer 11 <- Map 26 (SIMPLE_EDGE), Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Map 1 (SIMPLE_EDGE), Map 16 (SIMPLE_EDGE)
Reducer 14 <- Map 26 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 17 <- Map 16 (SIMPLE_EDGE), Map 27 (SIMPLE_EDGE)
Reducer 18 <- Map 26 (SIMPLE_EDGE), Reducer 17 (SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 16 (SIMPLE_EDGE)
Reducer 20 <- Map 16 (SIMPLE_EDGE), Map 27 (SIMPLE_EDGE)
Reducer 21 <- Map 26 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Map 16 (SIMPLE_EDGE), Map 27 (SIMPLE_EDGE)
Reducer 24 <- Map 26 (SIMPLE_EDGE), Reducer 23 (SIMPLE_EDGE)
Reducer 25 <- Reducer 24 (SIMPLE_EDGE)
Reducer 3 <- Map 26 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 12 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 15 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 19 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 22 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 25 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 9
      File Output Operator [FS_140]
        Select Operator [SEL_139] (rows=110 width=550)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          Filter Operator [FIL_138] (rows=110 width=670)
            predicate:CASE WHEN (_col6) THEN (CASE WHEN (_col7) THEN (((_col10 / _col2) > _col5)) ELSE (_col8) END) ELSE (CASE WHEN (_col7) THEN (((_col10 / _col2) > null)) ELSE (null) END) END
            Merge Join Operator [MERGEJOIN_265] (rows=220 width=670)
              Conds:RS_135._col1=RS_317._col0(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col10"]
            <-Reducer 25 [SIMPLE_EDGE] vectorized
              SHUFFLE [RS_317]
                PartitionCols:_col0
                Group By Operator [GBY_316] (rows=440 width=210)
                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                <-Reducer 24 [SIMPLE_EDGE]
                  SHUFFLE [RS_132]
                    PartitionCols:_col0
                    Group By Operator [GBY_131] (rows=3960 width=210)
                      Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                      Merge Join Operator [MERGEJOIN_260] (rows=10246882 width=209)
                        Conds:RS_127._col1=RS_296._col0(Inner),Output:["_col2","_col5"]
                      <-Map 26 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_296]
                          PartitionCols:_col0
                          Select Operator [SEL_290] (rows=40000000 width=102)
                            Output:["_col0","_col1"]
                            Filter Operator [FIL_289] (rows=40000000 width=102)
                              predicate:ca_county is not null
                              TableScan [TS_6] (rows=40000000 width=102)
                                default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_county"]
                      <-Reducer 23 [SIMPLE_EDGE]
                        SHUFFLE [RS_127]
                          PartitionCols:_col1
                          Merge Join Operator [MERGEJOIN_259] (rows=10246882 width=115)
                            Conds:RS_309._col0=RS_288._col0(Inner),Output:["_col1","_col2"]
                          <-Map 16 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_288]
                              PartitionCols:_col0
                              Select Operator [SEL_282] (rows=130 width=4)
                                Output:["_col0"]
                                Filter Operator [FIL_276] (rows=130 width=12)
                                  predicate:((d_qoy = 3) and (d_year = 2000))
                                  TableScan [TS_3] (rows=73049 width=12)
                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_qoy"]
                          <-Map 27 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_309]
                              PartitionCols:_col0
                              Select Operator [SEL_306] (rows=143931246 width=119)
                                Output:["_col0","_col1","_col2"]
                                Filter Operator [FIL_305] (rows=143931246 width=119)
                                  predicate:(ws_bill_addr_sk is not null and ws_sold_date_sk is not null)
                                  TableScan [TS_67] (rows=144002668 width=119)
                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_addr_sk","ws_ext_sales_price"]
            <-Reducer 8 [SIMPLE_EDGE]
              SHUFFLE [RS_135]
                PartitionCols:_col1
                Select Operator [SEL_114] (rows=220 width=656)
                  Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                  Filter Operator [FIL_113] (rows=220 width=570)
                    predicate:CASE WHEN (_col5) THEN (CASE WHEN (_col9) THEN (((_col11 / _col8) > _col1)) ELSE (_col6) END) ELSE (CASE WHEN (_col9) THEN (((_col11 / _col8) > null)) ELSE (null) END) END
                    Merge Join Operator [MERGEJOIN_264] (rows=440 width=570)
                      Conds:RS_110._col0=RS_315._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col8","_col9","_col11","_col12"]
                    <-Reducer 22 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_315]
                        PartitionCols:_col0
                        Select Operator [SEL_314] (rows=440 width=214)
                          Output:["_col0","_col1","_col2"]
                          Group By Operator [GBY_313] (rows=440 width=210)
                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                          <-Reducer 21 [SIMPLE_EDGE]
                            SHUFFLE [RS_104]
                              PartitionCols:_col0
                              Group By Operator [GBY_103] (rows=3960 width=210)
                                Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                Merge Join Operator [MERGEJOIN_258] (rows=10246882 width=209)
                                  Conds:RS_99._col1=RS_295._col0(Inner),Output:["_col2","_col5"]
                                <-Map 26 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_295]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_290]
                                <-Reducer 20 [SIMPLE_EDGE]
                                  SHUFFLE [RS_99]
                                    PartitionCols:_col1
                                    Merge Join Operator [MERGEJOIN_257] (rows=10246882 width=115)
                                      Conds:RS_308._col0=RS_287._col0(Inner),Output:["_col1","_col2"]
                                    <-Map 16 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_287]
                                        PartitionCols:_col0
                                        Select Operator [SEL_281] (rows=130 width=4)
                                          Output:["_col0"]
                                          Filter Operator [FIL_275] (rows=130 width=12)
                                            predicate:((d_qoy = 2) and (d_year = 2000))
                                             Please refer to the previous TableScan [TS_3]
                                    <-Map 27 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_308]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_306]
                    <-Reducer 7 [SIMPLE_EDGE]
                      SHUFFLE [RS_110]
                        PartitionCols:_col0
                        Merge Join Operator [MERGEJOIN_263] (rows=440 width=454)
                          Conds:RS_107._col0=RS_312._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col8","_col9"]
                        <-Reducer 19 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_312]
                            PartitionCols:_col0
                            Select Operator [SEL_311] (rows=440 width=214)
                              Output:["_col0","_col1","_col2"]
                              Group By Operator [GBY_310] (rows=440 width=210)
                                Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                              <-Reducer 18 [SIMPLE_EDGE]
                                SHUFFLE [RS_84]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_83] (rows=3960 width=210)
                                    Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                    Merge Join Operator [MERGEJOIN_256] (rows=10246882 width=209)
                                      Conds:RS_79._col1=RS_294._col0(Inner),Output:["_col2","_col5"]
                                    <-Map 26 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_294]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_290]
                                    <-Reducer 17 [SIMPLE_EDGE]
                                      SHUFFLE [RS_79]
                                        PartitionCols:_col1
                                        Merge Join Operator [MERGEJOIN_255] (rows=10246882 width=115)
                                          Conds:RS_307._col0=RS_286._col0(Inner),Output:["_col1","_col2"]
                                        <-Map 16 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_286]
                                            PartitionCols:_col0
                                            Select Operator [SEL_280] (rows=130 width=4)
                                              Output:["_col0"]
                                              Filter Operator [FIL_274] (rows=130 width=12)
                                                predicate:((d_qoy = 1) and (d_year = 2000))
                                                 Please refer to the previous TableScan [TS_3]
                                        <-Map 27 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_307]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_306]
                        <-Reducer 6 [SIMPLE_EDGE]
                          SHUFFLE [RS_107]
                            PartitionCols:_col0
                            Select Operator [SEL_66] (rows=1605 width=338)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                              Merge Join Operator [MERGEJOIN_262] (rows=1605 width=442)
                                Conds:RS_63._col0=RS_304._col0(Inner),Output:["_col0","_col1","_col2","_col4","_col5","_col7"]
                              <-Reducer 15 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_304]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_303] (rows=1605 width=210)
                                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                  <-Reducer 14 [SIMPLE_EDGE]
                                    SHUFFLE [RS_57]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_56] (rows=33705 width=210)
                                        Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                        Merge Join Operator [MERGEJOIN_254] (rows=37399561 width=139)
                                          Conds:RS_52._col1=RS_293._col0(Inner),Output:["_col2","_col5"]
                                        <-Map 26 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_293]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_290]
                                        <-Reducer 13 [SIMPLE_EDGE]
                                          SHUFFLE [RS_52]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_253] (rows=37399561 width=42)
                                              Conds:RS_270._col0=RS_285._col0(Inner),Output:["_col1","_col2"]
                                            <-Map 16 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_285]
                                                PartitionCols:_col0
                                                Select Operator [SEL_279] (rows=130 width=4)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_273] (rows=130 width=12)
                                                    predicate:((d_qoy = 3) and (d_year = 2000))
                                                     Please refer to the previous TableScan [TS_3]
                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_270]
                                                PartitionCols:_col0
                                                Select Operator [SEL_267] (rows=525327191 width=114)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_266] (rows=525327191 width=114)
                                                    predicate:(ss_addr_sk is not null and ss_sold_date_sk is not null)
                                                    TableScan [TS_0] (rows=575995635 width=114)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_addr_sk","ss_ext_sales_price"]
                              <-Reducer 5 [SIMPLE_EDGE]
                                SHUFFLE [RS_63]
                                  PartitionCols:_col0
                                  Merge Join Operator [MERGEJOIN_261] (rows=1605 width=330)
                                    Conds:RS_299._col0=RS_302._col0(Inner),Output:["_col0","_col1","_col2","_col4","_col5"]
                                  <-Reducer 12 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_302]
                                      PartitionCols:_col0
                                      Select Operator [SEL_301] (rows=1605 width=214)
                                        Output:["_col0","_col1","_col2"]
                                        Group By Operator [GBY_300] (rows=1605 width=210)
                                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                        <-Reducer 11 [SIMPLE_EDGE]
                                          SHUFFLE [RS_37]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_36] (rows=33705 width=210)
                                              Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                              Merge Join Operator [MERGEJOIN_252] (rows=37399561 width=139)
                                                Conds:RS_32._col1=RS_292._col0(Inner),Output:["_col2","_col5"]
                                              <-Map 26 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_292]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_290]
                                              <-Reducer 10 [SIMPLE_EDGE]
                                                SHUFFLE [RS_32]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_251] (rows=37399561 width=42)
                                                    Conds:RS_269._col0=RS_284._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 16 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_284]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_278] (rows=130 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_272] (rows=130 width=12)
                                                          predicate:((d_qoy = 1) and (d_year = 2000))
                                                           Please refer to the previous TableScan [TS_3]
                                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_269]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_267]
                                  <-Reducer 4 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_299]
                                      PartitionCols:_col0
                                      Select Operator [SEL_298] (rows=1605 width=214)
                                        Output:["_col0","_col1","_col2"]
                                        Group By Operator [GBY_297] (rows=1605 width=210)
                                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                        <-Reducer 3 [SIMPLE_EDGE]
                                          SHUFFLE [RS_17]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_16] (rows=33705 width=210)
                                              Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                              Merge Join Operator [MERGEJOIN_250] (rows=37399561 width=139)
                                                Conds:RS_12._col1=RS_291._col0(Inner),Output:["_col2","_col5"]
                                              <-Map 26 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_291]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_290]
                                              <-Reducer 2 [SIMPLE_EDGE]
                                                SHUFFLE [RS_12]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_249] (rows=37399561 width=42)
                                                    Conds:RS_268._col0=RS_283._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 16 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_283]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_277] (rows=130 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_271] (rows=130 width=12)
                                                          predicate:((d_qoy = 2) and (d_year = 2000))
                                                           Please refer to the previous TableScan [TS_3]
                                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_268]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_267]

