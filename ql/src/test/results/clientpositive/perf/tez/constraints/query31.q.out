PREHOOK: query: explain
with ss as
 (select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales
 from store_sales,date_dim,customer_address
 where ss_sold_date_sk = d_date_sk
  and ss_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year),
 ws as
 (select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales
 from web_sales,date_dim,customer_address
 where ws_sold_date_sk = d_date_sk
  and ws_bill_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year)
 select /* tt */
        ss1.ca_county
       ,ss1.d_year
       ,ws2.web_sales/ws1.web_sales web_q1_q2_increase
       ,ss2.store_sales/ss1.store_sales store_q1_q2_increase
       ,ws3.web_sales/ws2.web_sales web_q2_q3_increase
       ,ss3.store_sales/ss2.store_sales store_q2_q3_increase
 from
        ss ss1
       ,ss ss2
       ,ss ss3
       ,ws ws1
       ,ws ws2
       ,ws ws3
 where
    ss1.d_qoy = 1
    and ss1.d_year = 2000
    and ss1.ca_county = ss2.ca_county
    and ss2.d_qoy = 2
    and ss2.d_year = 2000
 and ss2.ca_county = ss3.ca_county
    and ss3.d_qoy = 3
    and ss3.d_year = 2000
    and ss1.ca_county = ws1.ca_county
    and ws1.d_qoy = 1
    and ws1.d_year = 2000
    and ws1.ca_county = ws2.ca_county
    and ws2.d_qoy = 2
    and ws2.d_year = 2000
    and ws1.ca_county = ws3.ca_county
    and ws3.d_qoy = 3
    and ws3.d_year =2000
    and case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end 
       > case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end
    and case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end
       > case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end
 order by ss1.d_year
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ss as
 (select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales
 from store_sales,date_dim,customer_address
 where ss_sold_date_sk = d_date_sk
  and ss_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year),
 ws as
 (select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales
 from web_sales,date_dim,customer_address
 where ws_sold_date_sk = d_date_sk
  and ws_bill_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year)
 select /* tt */
        ss1.ca_county
       ,ss1.d_year
       ,ws2.web_sales/ws1.web_sales web_q1_q2_increase
       ,ss2.store_sales/ss1.store_sales store_q1_q2_increase
       ,ws3.web_sales/ws2.web_sales web_q2_q3_increase
       ,ss3.store_sales/ss2.store_sales store_q2_q3_increase
 from
        ss ss1
       ,ss ss2
       ,ss ss3
       ,ws ws1
       ,ws ws2
       ,ws ws3
 where
    ss1.d_qoy = 1
    and ss1.d_year = 2000
    and ss1.ca_county = ss2.ca_county
    and ss2.d_qoy = 2
    and ss2.d_year = 2000
 and ss2.ca_county = ss3.ca_county
    and ss3.d_qoy = 3
    and ss3.d_year = 2000
    and ss1.ca_county = ws1.ca_county
    and ws1.d_qoy = 1
    and ws1.d_year = 2000
    and ws1.ca_county = ws2.ca_county
    and ws2.d_qoy = 2
    and ws2.d_year = 2000
    and ws1.ca_county = ws3.ca_county
    and ws3.d_qoy = 3
    and ws3.d_year =2000
    and case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end 
       > case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end
    and case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end
       > case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end
 order by ss1.d_year
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 16 (BROADCAST_EDGE), Map 17 (BROADCAST_EDGE), Map 8 (BROADCAST_EDGE)
Map 18 <- Map 16 (BROADCAST_EDGE), Map 17 (BROADCAST_EDGE), Map 8 (BROADCAST_EDGE)
Reducer 10 <- Map 18 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Map 18 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Map 18 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 3 <- Reducer 11 (BROADCAST_EDGE), Reducer 13 (BROADCAST_EDGE), Reducer 15 (BROADCAST_EDGE), Reducer 2 (SIMPLE_EDGE), Reducer 5 (BROADCAST_EDGE), Reducer 7 (BROADCAST_EDGE)
Reducer 4 <- Map 1 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Map 1 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 3 vectorized
      File Output Operator [FS_342]
        Select Operator [SEL_341] (rows=429 width=550)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          Filter Operator [FIL_340] (rows=429 width=670)
            predicate:CASE WHEN (_col6) THEN (CASE WHEN (_col7) THEN (((_col10 / _col2) > _col5)) ELSE (_col8) END) ELSE (CASE WHEN (_col7) THEN (((_col10 / _col2) > null)) ELSE (null) END) END
            Map Join Operator [MAPJOIN_339] (rows=858 width=670)
              Conds:SEL_338._col1=RS_329._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col10"]
            <-Reducer 15 [BROADCAST_EDGE] vectorized
              BROADCAST [RS_329]
                PartitionCols:_col0
                Group By Operator [GBY_328] (rows=1716 width=210)
                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                <-Reducer 14 [SIMPLE_EDGE]
                  SHUFFLE [RS_132]
                    PartitionCols:_col0
                    Group By Operator [GBY_131] (rows=72072 width=210)
                      Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                      Merge Join Operator [MERGEJOIN_260] (rows=50052075 width=209)
                        Conds:RS_321._col1=RS_308._col0(Inner),Output:["_col2","_col5"]
                      <-Map 9 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_308]
                          PartitionCols:_col0
                          Select Operator [SEL_302] (rows=40000000 width=102)
                            Output:["_col0","_col1"]
                            Filter Operator [FIL_301] (rows=40000000 width=102)
                              predicate:ca_county is not null
                              TableScan [TS_6] (rows=40000000 width=102)
                                default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_county"]
                      <-Map 18 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_321]
                          PartitionCols:_col1
                          Map Join Operator [MAPJOIN_318] (rows=50052075 width=115)
                            Conds:SEL_315._col0=RS_292._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2"]
                          <-Map 17 [BROADCAST_EDGE] vectorized
                            BROADCAST [RS_292]
                              PartitionCols:_col0
                              Select Operator [SEL_290] (rows=635 width=4)
                                Output:["_col0"]
                                Filter Operator [FIL_289] (rows=635 width=12)
                                  predicate:((d_qoy = 3) and (d_year = 2000))
                                  TableScan [TS_43] (rows=73049 width=12)
                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_qoy"]
                          <-Select Operator [SEL_315] (rows=143931246 width=119)
                              Output:["_col0","_col1","_col2"]
                              Filter Operator [FIL_314] (rows=143931246 width=119)
                                predicate:(ws_bill_addr_sk is not null and ws_sold_date_sk is not null)
                                TableScan [TS_67] (rows=144002668 width=119)
                                  default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                                <-Map 16 [BROADCAST_EDGE] vectorized
                                  BROADCAST [RS_288]
                                    PartitionCols:_col0
                                    Select Operator [SEL_286] (rows=635 width=4)
                                      Output:["_col0"]
                                      Filter Operator [FIL_284] (rows=635 width=12)
                                        predicate:((d_qoy = 2) and (d_year = 2000))
                                        TableScan [TS_23] (rows=73049 width=12)
                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_qoy"]
                                <-Map 8 [BROADCAST_EDGE] vectorized
                                  BROADCAST [RS_282]
                                    PartitionCols:_col0
                                    Select Operator [SEL_280] (rows=635 width=4)
                                      Output:["_col0"]
                                      Filter Operator [FIL_278] (rows=635 width=12)
                                        predicate:((d_qoy = 1) and (d_year = 2000))
                                        TableScan [TS_3] (rows=73049 width=12)
                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_qoy"]
            <-Select Operator [SEL_338] (rows=858 width=656)
                Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                Filter Operator [FIL_337] (rows=858 width=570)
                  predicate:CASE WHEN (_col5) THEN (CASE WHEN (_col9) THEN (((_col11 / _col8) > _col1)) ELSE (_col6) END) ELSE (CASE WHEN (_col9) THEN (((_col11 / _col8) > null)) ELSE (null) END) END
                  Map Join Operator [MAPJOIN_336] (rows=1716 width=570)
                    Conds:MAPJOIN_335._col0=RS_327._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col8","_col9","_col11","_col12"]
                  <-Reducer 13 [BROADCAST_EDGE] vectorized
                    BROADCAST [RS_327]
                      PartitionCols:_col0
                      Select Operator [SEL_326] (rows=1716 width=214)
                        Output:["_col0","_col1","_col2"]
                        Group By Operator [GBY_325] (rows=1716 width=210)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 12 [SIMPLE_EDGE]
                          SHUFFLE [RS_104]
                            PartitionCols:_col0
                            Group By Operator [GBY_103] (rows=72072 width=210)
                              Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                              Merge Join Operator [MERGEJOIN_258] (rows=50052075 width=209)
                                Conds:RS_320._col1=RS_307._col0(Inner),Output:["_col2","_col5"]
                              <-Map 9 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_307]
                                  PartitionCols:_col0
                                   Please refer to the previous Select Operator [SEL_302]
                              <-Map 18 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_320]
                                  PartitionCols:_col1
                                  Map Join Operator [MAPJOIN_317] (rows=50052075 width=115)
                                    Conds:SEL_315._col0=RS_288._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2"]
                                  <-Map 16 [BROADCAST_EDGE] vectorized
                                     Please refer to the previous BROADCAST [RS_288]
                                     Please refer to the previous Select Operator [SEL_315]
                  <-Map Join Operator [MAPJOIN_335] (rows=1716 width=454)
                      Conds:SEL_334._col0=RS_324._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col8","_col9"]
                    <-Reducer 11 [BROADCAST_EDGE] vectorized
                      BROADCAST [RS_324]
                        PartitionCols:_col0
                        Select Operator [SEL_323] (rows=1716 width=214)
                          Output:["_col0","_col1","_col2"]
                          Group By Operator [GBY_322] (rows=1716 width=210)
                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                          <-Reducer 10 [SIMPLE_EDGE]
                            SHUFFLE [RS_84]
                              PartitionCols:_col0
                              Group By Operator [GBY_83] (rows=72072 width=210)
                                Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                Merge Join Operator [MERGEJOIN_256] (rows=50052075 width=209)
                                  Conds:RS_319._col1=RS_306._col0(Inner),Output:["_col2","_col5"]
                                <-Map 9 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_306]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_302]
                                <-Map 18 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_319]
                                    PartitionCols:_col1
                                    Map Join Operator [MAPJOIN_316] (rows=50052075 width=115)
                                      Conds:SEL_315._col0=RS_282._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2"]
                                    <-Map 8 [BROADCAST_EDGE] vectorized
                                       Please refer to the previous BROADCAST [RS_282]
                                       Please refer to the previous Select Operator [SEL_315]
                    <-Select Operator [SEL_334] (rows=1716 width=338)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                        Map Join Operator [MAPJOIN_333] (rows=1716 width=442)
                          Conds:MAPJOIN_332._col0=RS_313._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col2","_col4","_col5","_col7"]
                        <-Reducer 7 [BROADCAST_EDGE] vectorized
                          BROADCAST [RS_313]
                            PartitionCols:_col0
                            Group By Operator [GBY_312] (rows=1716 width=210)
                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                            <-Reducer 6 [SIMPLE_EDGE]
                              SHUFFLE [RS_57]
                                PartitionCols:_col0
                                Group By Operator [GBY_56] (rows=240240 width=210)
                                  Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                  Merge Join Operator [MERGEJOIN_254] (rows=182682471 width=195)
                                    Conds:RS_300._col1=RS_305._col0(Inner),Output:["_col2","_col5"]
                                  <-Map 9 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_305]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_302]
                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_300]
                                      PartitionCols:_col1
                                      Map Join Operator [MAPJOIN_297] (rows=182682471 width=100)
                                        Conds:SEL_294._col0=RS_291._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2"]
                                      <-Map 17 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_291]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_290]
                                      <-Select Operator [SEL_294] (rows=525327191 width=114)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_293] (rows=525327191 width=114)
                                            predicate:(ss_addr_sk is not null and ss_sold_date_sk is not null)
                                            TableScan [TS_0] (rows=575995635 width=114)
                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_addr_sk","ss_ext_sales_price"]
                        <-Map Join Operator [MAPJOIN_332] (rows=1716 width=330)
                            Conds:SEL_331._col0=RS_311._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col2","_col4","_col5"]
                          <-Reducer 5 [BROADCAST_EDGE] vectorized
                            BROADCAST [RS_311]
                              PartitionCols:_col0
                              Select Operator [SEL_310] (rows=1716 width=214)
                                Output:["_col0","_col1","_col2"]
                                Group By Operator [GBY_309] (rows=1716 width=210)
                                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                <-Reducer 4 [SIMPLE_EDGE]
                                  SHUFFLE [RS_37]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_36] (rows=240240 width=210)
                                      Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                      Merge Join Operator [MERGEJOIN_252] (rows=182682471 width=195)
                                        Conds:RS_299._col1=RS_304._col0(Inner),Output:["_col2","_col5"]
                                      <-Map 9 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_304]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_302]
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_299]
                                          PartitionCols:_col1
                                          Map Join Operator [MAPJOIN_296] (rows=182682471 width=100)
                                            Conds:SEL_294._col0=RS_287._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2"]
                                          <-Map 16 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_287]
                                              PartitionCols:_col0
                                              Select Operator [SEL_285] (rows=635 width=4)
                                                Output:["_col0"]
                                                Filter Operator [FIL_283] (rows=635 width=12)
                                                  predicate:((d_qoy = 1) and (d_year = 2000))
                                                   Please refer to the previous TableScan [TS_23]
                                             Please refer to the previous Select Operator [SEL_294]
                          <-Select Operator [SEL_331] (rows=1716 width=214)
                              Output:["_col0","_col1","_col2"]
                              Group By Operator [GBY_330] (rows=1716 width=210)
                                Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                              <-Reducer 2 [SIMPLE_EDGE]
                                SHUFFLE [RS_17]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_16] (rows=240240 width=210)
                                    Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                    Merge Join Operator [MERGEJOIN_250] (rows=182682471 width=195)
                                      Conds:RS_298._col1=RS_303._col0(Inner),Output:["_col2","_col5"]
                                    <-Map 9 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_303]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_302]
                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_298]
                                        PartitionCols:_col1
                                        Map Join Operator [MAPJOIN_295] (rows=182682471 width=100)
                                          Conds:SEL_294._col0=RS_281._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2"]
                                        <-Map 8 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_281]
                                            PartitionCols:_col0
                                            Select Operator [SEL_279] (rows=635 width=4)
                                              Output:["_col0"]
                                              Filter Operator [FIL_277] (rows=635 width=12)
                                                predicate:((d_qoy = 2) and (d_year = 2000))
                                                 Please refer to the previous TableScan [TS_3]
                                           Please refer to the previous Select Operator [SEL_294]

