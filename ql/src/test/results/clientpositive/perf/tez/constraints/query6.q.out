Warning: Shuffle Join MERGEJOIN[110][tables = [$hdt$_5, $hdt$_6]] in Stage 'Reducer 6' is a cross product
PREHOOK: query: explain
select  a.ca_state state, count(*) cnt
 from customer_address a
     ,customer c
     ,store_sales s
     ,date_dim d
     ,item i
 where       a.ca_address_sk = c.c_current_addr_sk
 	and c.c_customer_sk = s.ss_customer_sk
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq = 
 	     (select distinct (d_month_seq)
 	      from date_dim
               where d_year = 2000
 	        and d_moy = 2 )
 	and i.i_current_price > 1.2 * 
             (select avg(j.i_current_price) 
 	     from item j 
 	     where j.i_category = i.i_category)
 group by a.ca_state
 having count(*) >= 10
 order by cnt 
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  a.ca_state state, count(*) cnt
 from customer_address a
     ,customer c
     ,store_sales s
     ,date_dim d
     ,item i
 where       a.ca_address_sk = c.c_current_addr_sk
 	and c.c_customer_sk = s.ss_customer_sk
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq = 
 	     (select distinct (d_month_seq)
 	      from date_dim
               where d_year = 2000
 	        and d_moy = 2 )
 	and i.i_current_price > 1.2 * 
             (select avg(j.i_current_price) 
 	     from item j 
 	     where j.i_category = i.i_category)
 group by a.ca_state
 having count(*) >= 10
 order by cnt 
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 3 (BROADCAST_EDGE)
Map 17 <- Reducer 6 (BROADCAST_EDGE)
Map 7 <- Map 1 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 13 <- Map 12 (SIMPLE_EDGE), Map 14 (SIMPLE_EDGE)
Reducer 16 <- Map 15 (SIMPLE_EDGE)
Reducer 3 <- Map 2 (SIMPLE_EDGE)
Reducer 4 <- Map 2 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Reducer 16 (XPROD_EDGE), Reducer 5 (XPROD_EDGE)
Reducer 8 <- Map 7 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 9 <- Map 17 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 11 vectorized
      File Output Operator [FS_165]
        Limit [LIM_164] (rows=1 width=94)
          Number of rows:100
          Select Operator [SEL_163] (rows=1 width=94)
            Output:["_col0","_col1"]
          <-Reducer 10 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_162]
              Filter Operator [FIL_161] (rows=1 width=94)
                predicate:(_col1 >= 10L)
                Group By Operator [GBY_160] (rows=1 width=94)
                  Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                <-Reducer 9 [SIMPLE_EDGE]
                  SHUFFLE [RS_68]
                    PartitionCols:_col0
                    Group By Operator [GBY_67] (rows=1 width=94)
                      Output:["_col0","_col1"],aggregations:["count()"],keys:_col9
                      Merge Join Operator [MERGEJOIN_113] (rows=316 width=86)
                        Conds:RS_63._col4=RS_159._col0(Inner),Output:["_col9"]
                      <-Map 17 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_159]
                          PartitionCols:_col0
                          Select Operator [SEL_158] (rows=154000 width=227)
                            Output:["_col0"]
                            Filter Operator [FIL_157] (rows=154000 width=227)
                              predicate:(_col4 > _col1)
                              Map Join Operator [MAPJOIN_156] (rows=462000 width=227)
                                Conds:RS_49._col0=SEL_155._col2(Inner),HybridGraceHashJoin:true,Output:["_col1","_col3","_col4"]
                              <-Reducer 6 [BROADCAST_EDGE]
                                BROADCAST [RS_49]
                                  PartitionCols:_col0
                                  Merge Join Operator [MERGEJOIN_110] (rows=10 width=202)
                                    Conds:(Inner),Output:["_col0","_col1"]
                                  <-Reducer 16 [XPROD_EDGE] vectorized
                                    XPROD_EDGE [RS_153]
                                      Select Operator [SEL_152] (rows=10 width=202)
                                        Output:["_col0","_col1"]
                                        Group By Operator [GBY_151] (rows=10 width=210)
                                          Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0
                                        <-Map 15 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_150]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_149] (rows=10 width=210)
                                              Output:["_col0","_col1","_col2"],aggregations:["sum(i_current_price)","count(i_current_price)"],keys:i_category
                                              Filter Operator [FIL_148] (rows=462000 width=201)
                                                predicate:i_category is not null
                                                TableScan [TS_22] (rows=462000 width=201)
                                                  default@item,j,Tbl:COMPLETE,Col:COMPLETE,Output:["i_current_price","i_category"]
                                  <-Reducer 5 [XPROD_EDGE] vectorized
                                    XPROD_EDGE [RS_147]
                                      Select Operator [SEL_146] (rows=1 width=8)
                                        Filter Operator [FIL_145] (rows=1 width=8)
                                          predicate:(sq_count_check(_col0) <= 1)
                                          Group By Operator [GBY_144] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                          <-Reducer 4 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_143]
                                              Group By Operator [GBY_142] (rows=1 width=8)
                                                Output:["_col0"],aggregations:["count()"]
                                                Select Operator [SEL_141] (rows=25 width=4)
                                                  Group By Operator [GBY_140] (rows=25 width=4)
                                                    Output:["_col0"],keys:KEY._col0
                                                  <-Map 2 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_124]
                                                      PartitionCols:_col0
                                                      Group By Operator [GBY_122] (rows=25 width=4)
                                                        Output:["_col0"],keys:d_month_seq
                                                        Select Operator [SEL_120] (rows=652 width=12)
                                                          Output:["d_month_seq"]
                                                          Filter Operator [FIL_118] (rows=652 width=12)
                                                            predicate:((d_moy = 2) and (d_year = 2000))
                                                            TableScan [TS_3] (rows=73049 width=12)
                                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_month_seq","d_year","d_moy"]
                              <-Select Operator [SEL_155] (rows=462000 width=205)
                                  Output:["_col0","_col1","_col2"]
                                  Filter Operator [FIL_154] (rows=462000 width=205)
                                    predicate:i_category is not null
                                    TableScan [TS_43] (rows=462000 width=205)
                                      default@item,i,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_current_price","i_category"]
                      <-Reducer 8 [SIMPLE_EDGE]
                        SHUFFLE [RS_63]
                          PartitionCols:_col4
                          Merge Join Operator [MERGEJOIN_112] (rows=7192227 width=90)
                            Conds:RS_134._col5=RS_61._col0(Inner),Output:["_col4","_col9"]
                          <-Map 7 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_134]
                              PartitionCols:_col5
                              Map Join Operator [MAPJOIN_133] (rows=7192227 width=4)
                                Conds:RS_130._col0=SEL_132._col0(Inner),HybridGraceHashJoin:true,Output:["_col4","_col5"]
                              <-Map 1 [BROADCAST_EDGE] vectorized
                                BROADCAST [RS_130]
                                  PartitionCols:_col0
                                  Map Join Operator [MAPJOIN_129] (rows=660 width=4)
                                    Conds:SEL_128._col1=RS_126._col0(Inner),HybridGraceHashJoin:true,Output:["_col0"]
                                  <-Reducer 3 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_126]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_125] (rows=25 width=4)
                                        Output:["_col0"],keys:KEY._col0
                                      <-Map 2 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_123]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_121] (rows=25 width=4)
                                            Output:["_col0"],keys:d_month_seq
                                            Select Operator [SEL_119] (rows=652 width=12)
                                              Output:["d_month_seq"]
                                              Filter Operator [FIL_117] (rows=652 width=12)
                                                predicate:((d_moy = 2) and (d_year = 2000) and d_month_seq is not null)
                                                 Please refer to the previous TableScan [TS_3]
                                  <-Select Operator [SEL_128] (rows=73049 width=8)
                                      Output:["_col0","_col1"]
                                      Filter Operator [FIL_127] (rows=73049 width=8)
                                        predicate:d_month_seq is not null
                                        TableScan [TS_0] (rows=73049 width=8)
                                          default@date_dim,d,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_month_seq"]
                              <-Select Operator [SEL_132] (rows=525327388 width=11)
                                  Output:["_col0","_col1","_col2"]
                                  Filter Operator [FIL_131] (rows=525327388 width=11)
                                    predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                    TableScan [TS_10] (rows=575995635 width=11)
                                      default@store_sales,s,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk"]
                          <-Reducer 13 [SIMPLE_EDGE]
                            SHUFFLE [RS_61]
                              PartitionCols:_col0
                              Merge Join Operator [MERGEJOIN_107] (rows=80000000 width=90)
                                Conds:RS_137._col1=RS_139._col0(Inner),Output:["_col0","_col3"]
                              <-Map 12 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_137]
                                  PartitionCols:_col1
                                  Select Operator [SEL_136] (rows=80000000 width=8)
                                    Output:["_col0","_col1"]
                                    Filter Operator [FIL_135] (rows=80000000 width=8)
                                      predicate:c_current_addr_sk is not null
                                      TableScan [TS_13] (rows=80000000 width=8)
                                        default@customer,c,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_addr_sk"]
                              <-Map 14 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_139]
                                  PartitionCols:_col0
                                  Select Operator [SEL_138] (rows=40000000 width=90)
                                    Output:["_col0","_col1"]
                                    TableScan [TS_16] (rows=40000000 width=90)
                                      default@customer_address,a,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_state"]

