PREHOOK: query: explain
select 
  c_last_name,c_first_name,substr(s_city,1,30),ss_ticket_number,amt,profit
  from
   (select ss_ticket_number
          ,ss_customer_sk
          ,store.s_city
          ,sum(ss_coupon_amt) amt
          ,sum(ss_net_profit) profit
    from store_sales,date_dim,store,household_demographics
    where store_sales.ss_sold_date_sk = date_dim.d_date_sk
    and store_sales.ss_store_sk = store.s_store_sk  
    and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
    and (household_demographics.hd_dep_count = 8 or household_demographics.hd_vehicle_count > 0)
    and date_dim.d_dow = 1
    and date_dim.d_year in (1998,1998+1,1998+2) 
    and store.s_number_employees between 200 and 295
    group by ss_ticket_number,ss_customer_sk,ss_addr_sk,store.s_city) ms,customer
    where ss_customer_sk = c_customer_sk
 order by c_last_name,c_first_name,substr(s_city,1,30), profit
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select 
  c_last_name,c_first_name,substr(s_city,1,30),ss_ticket_number,amt,profit
  from
   (select ss_ticket_number
          ,ss_customer_sk
          ,store.s_city
          ,sum(ss_coupon_amt) amt
          ,sum(ss_net_profit) profit
    from store_sales,date_dim,store,household_demographics
    where store_sales.ss_sold_date_sk = date_dim.d_date_sk
    and store_sales.ss_store_sk = store.s_store_sk  
    and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
    and (household_demographics.hd_dep_count = 8 or household_demographics.hd_vehicle_count > 0)
    and date_dim.d_dow = 1
    and date_dim.d_year in (1998,1998+1,1998+2) 
    and store.s_number_employees between 200 and 295
    group by ss_ticket_number,ss_customer_sk,ss_addr_sk,store.s_city) ms,customer
    where ss_customer_sk = c_customer_sk
 order by c_last_name,c_first_name,substr(s_city,1,30), profit
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 4 <- Map 6 (BROADCAST_EDGE), Map 7 (BROADCAST_EDGE), Map 8 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 5 <- Map 4 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 3 vectorized
      File Output Operator [FS_88]
        Limit [LIM_87] (rows=100 width=776)
          Number of rows:100
          Select Operator [SEL_86] (rows=1815433 width=776)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 2 [SIMPLE_EDGE]
            SHUFFLE [RS_33]
              Select Operator [SEL_32] (rows=1815433 width=776)
                Output:["_col0","_col1","_col3","_col4","_col5","_col6"]
                Merge Join Operator [MERGEJOIN_60] (rows=1815433 width=501)
                  Conds:RS_66._col0=RS_85._col1(Inner),Output:["_col1","_col2","_col3","_col5","_col6","_col7"]
                <-Map 1 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_66]
                    PartitionCols:_col0
                    Select Operator [SEL_65] (rows=80000000 width=184)
                      Output:["_col0","_col1","_col2"]
                      Filter Operator [FIL_64] (rows=80000000 width=184)
                        predicate:c_customer_sk is not null
                        TableScan [TS_0] (rows=80000000 width=184)
                          default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_first_name","c_last_name"]
                <-Reducer 5 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_85]
                    PartitionCols:_col1
                    Select Operator [SEL_84] (rows=1815433 width=321)
                      Output:["_col0","_col1","_col2","_col3","_col4"]
                      Group By Operator [GBY_83] (rows=1815433 width=321)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                      <-Map 4 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_82]
                          PartitionCols:_col0, _col1, _col2, _col3
                          Group By Operator [GBY_81] (rows=1815433 width=321)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col6)","sum(_col7)"],keys:_col1, _col3, _col5, _col13
                            Map Join Operator [MAPJOIN_80] (rows=1815433 width=97)
                              Conds:MAPJOIN_79._col2=RS_75._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col3","_col5","_col6","_col7","_col13"]
                            <-Map 8 [BROADCAST_EDGE] vectorized
                              BROADCAST [RS_75]
                                PartitionCols:_col0
                                Select Operator [SEL_74] (rows=3055 width=12)
                                  Output:["_col0"]
                                  Filter Operator [FIL_73] (rows=3055 width=12)
                                    predicate:(((hd_dep_count = 8) or (hd_vehicle_count > 0)) and hd_demo_sk is not null)
                                    TableScan [TS_12] (rows=7200 width=12)
                                      default@household_demographics,household_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_dep_count","hd_vehicle_count"]
                            <-Map Join Operator [MAPJOIN_79] (rows=4278598 width=97)
                                Conds:MAPJOIN_78._col4=RS_72._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col5","_col6","_col7","_col13"]
                              <-Map 7 [BROADCAST_EDGE] vectorized
                                BROADCAST [RS_72]
                                  PartitionCols:_col0
                                  Select Operator [SEL_71] (rows=568 width=100)
                                    Output:["_col0","_col2"]
                                    Filter Operator [FIL_70] (rows=568 width=100)
                                      predicate:(s_number_employees BETWEEN 200 AND 295 and s_store_sk is not null)
                                      TableScan [TS_9] (rows=1704 width=100)
                                        default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_number_employees","s_city"]
                              <-Map Join Operator [MAPJOIN_78] (rows=12835792 width=4)
                                  Conds:SEL_77._col0=RS_69._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                <-Map 6 [BROADCAST_EDGE] vectorized
                                  BROADCAST [RS_69]
                                    PartitionCols:_col0
                                    Select Operator [SEL_68] (rows=1957 width=12)
                                      Output:["_col0"]
                                      Filter Operator [FIL_67] (rows=1957 width=12)
                                        predicate:((d_dow = 1) and (d_year) IN (1998, 1999, 2000) and d_date_sk is not null)
                                        TableScan [TS_6] (rows=73049 width=12)
                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_dow"]
                                <-Select Operator [SEL_77] (rows=479121995 width=237)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                    Filter Operator [FIL_76] (rows=479121995 width=237)
                                      predicate:(ss_customer_sk is not null and ss_hdemo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                      TableScan [TS_3] (rows=575995635 width=237)
                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_ticket_number","ss_coupon_amt","ss_net_profit"]

