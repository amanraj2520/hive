PREHOOK: query: explain
with ss as
 (select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales
 from store_sales,date_dim,customer_address
 where ss_sold_date_sk = d_date_sk
  and ss_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year),
 ws as
 (select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales
 from web_sales,date_dim,customer_address
 where ws_sold_date_sk = d_date_sk
  and ws_bill_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year)
 select /* tt */
        ss1.ca_county
       ,ss1.d_year
       ,ws2.web_sales/ws1.web_sales web_q1_q2_increase
       ,ss2.store_sales/ss1.store_sales store_q1_q2_increase
       ,ws3.web_sales/ws2.web_sales web_q2_q3_increase
       ,ss3.store_sales/ss2.store_sales store_q2_q3_increase
 from
        ss ss1
       ,ss ss2
       ,ss ss3
       ,ws ws1
       ,ws ws2
       ,ws ws3
 where
    ss1.d_qoy = 1
    and ss1.d_year = 2000
    and ss1.ca_county = ss2.ca_county
    and ss2.d_qoy = 2
    and ss2.d_year = 2000
 and ss2.ca_county = ss3.ca_county
    and ss3.d_qoy = 3
    and ss3.d_year = 2000
    and ss1.ca_county = ws1.ca_county
    and ws1.d_qoy = 1
    and ws1.d_year = 2000
    and ws1.ca_county = ws2.ca_county
    and ws2.d_qoy = 2
    and ws2.d_year = 2000
    and ws1.ca_county = ws3.ca_county
    and ws3.d_qoy = 3
    and ws3.d_year =2000
    and case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end 
       > case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end
    and case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end
       > case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end
 order by ss1.d_year
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ss as
 (select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales
 from store_sales,date_dim,customer_address
 where ss_sold_date_sk = d_date_sk
  and ss_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year),
 ws as
 (select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales
 from web_sales,date_dim,customer_address
 where ws_sold_date_sk = d_date_sk
  and ws_bill_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year)
 select /* tt */
        ss1.ca_county
       ,ss1.d_year
       ,ws2.web_sales/ws1.web_sales web_q1_q2_increase
       ,ss2.store_sales/ss1.store_sales store_q1_q2_increase
       ,ws3.web_sales/ws2.web_sales web_q2_q3_increase
       ,ss3.store_sales/ss2.store_sales store_q2_q3_increase
 from
        ss ss1
       ,ss ss2
       ,ss ss3
       ,ws ws1
       ,ws ws2
       ,ws ws3
 where
    ss1.d_qoy = 1
    and ss1.d_year = 2000
    and ss1.ca_county = ss2.ca_county
    and ss2.d_qoy = 2
    and ss2.d_year = 2000
 and ss2.ca_county = ss3.ca_county
    and ss3.d_qoy = 3
    and ss3.d_year = 2000
    and ss1.ca_county = ws1.ca_county
    and ws1.d_qoy = 1
    and ws1.d_year = 2000
    and ws1.ca_county = ws2.ca_county
    and ws2.d_qoy = 2
    and ws2.d_year = 2000
    and ws1.ca_county = ws3.ca_county
    and ws3.d_qoy = 3
    and ws3.d_year =2000
    and case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end 
       > case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end
    and case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end
       > case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end
 order by ss1.d_year
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 16 (BROADCAST_EDGE), Map 17 (BROADCAST_EDGE), Map 8 (BROADCAST_EDGE)
Map 18 <- Map 16 (BROADCAST_EDGE), Map 17 (BROADCAST_EDGE), Map 8 (BROADCAST_EDGE)
Reducer 10 <- Map 18 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Reducer 13 (BROADCAST_EDGE), Reducer 15 (BROADCAST_EDGE)
Reducer 12 <- Map 18 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Map 18 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 3 <- Reducer 11 (BROADCAST_EDGE), Reducer 2 (SIMPLE_EDGE), Reducer 5 (BROADCAST_EDGE), Reducer 7 (BROADCAST_EDGE)
Reducer 4 <- Map 1 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Map 1 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 3 vectorized
      File Output Operator [FS_322]
        Select Operator [SEL_321] (rows=429 width=550)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          Filter Operator [FIL_320] (rows=429 width=770)
            predicate:(CASE WHEN ((_col1 > 0)) THEN (CASE WHEN ((_col9 > 0)) THEN (((_col11 / _col9) > (_col5 / _col1))) ELSE ((null > (_col5 / _col1))) END) ELSE (CASE WHEN ((_col9 > 0)) THEN (((_col11 / _col9) > null)) ELSE (null) END) END and CASE WHEN ((_col3 > 0)) THEN (CASE WHEN ((_col7 > 0)) THEN (((_col9 / _col7) > (_col1 / _col3))) ELSE ((null > (_col1 / _col3))) END) ELSE (CASE WHEN ((_col7 > 0)) THEN (((_col9 / _col7) > null)) ELSE (null) END) END)
            Map Join Operator [MAPJOIN_319] (rows=1716 width=770)
              Conds:MAPJOIN_318._col0=RS_315._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col3","_col5","_col7","_col9","_col11"]
            <-Reducer 11 [BROADCAST_EDGE] vectorized
              BROADCAST [RS_315]
                PartitionCols:_col0
                Map Join Operator [MAPJOIN_314] (rows=1716 width=434)
                  Conds:MAPJOIN_313._col0=RS_311._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col3","_col5"]
                <-Reducer 15 [BROADCAST_EDGE] vectorized
                  BROADCAST [RS_311]
                    PartitionCols:_col0
                    Group By Operator [GBY_310] (rows=1716 width=210)
                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                    <-Reducer 14 [SIMPLE_EDGE]
                      SHUFFLE [RS_117]
                        PartitionCols:_col0
                        Group By Operator [GBY_116] (rows=72072 width=210)
                          Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col7
                          Merge Join Operator [MERGEJOIN_247] (rows=50052075 width=209)
                            Conds:RS_307._col1=RS_295._col0(Inner),Output:["_col2","_col7"]
                          <-Map 9 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_295]
                              PartitionCols:_col0
                              Select Operator [SEL_289] (rows=40000000 width=102)
                                Output:["_col0","_col1"]
                                Filter Operator [FIL_288] (rows=40000000 width=102)
                                  predicate:(ca_address_sk is not null and ca_county is not null)
                                  TableScan [TS_6] (rows=40000000 width=102)
                                    default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_county"]
                          <-Map 18 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_307]
                              PartitionCols:_col1
                              Map Join Operator [MAPJOIN_304] (rows=50052075 width=115)
                                Conds:SEL_301._col0=RS_279._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2"]
                              <-Map 17 [BROADCAST_EDGE] vectorized
                                BROADCAST [RS_279]
                                  PartitionCols:_col0
                                  Select Operator [SEL_277] (rows=635 width=12)
                                    Output:["_col0"]
                                    Filter Operator [FIL_276] (rows=635 width=12)
                                      predicate:((d_qoy = 3) and (d_year = 2000) and d_date_sk is not null)
                                      TableScan [TS_43] (rows=73049 width=12)
                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_qoy"]
                              <-Select Operator [SEL_301] (rows=143931246 width=119)
                                  Output:["_col0","_col1","_col2"]
                                  Filter Operator [FIL_300] (rows=143931246 width=119)
                                    predicate:(ws_bill_addr_sk is not null and ws_sold_date_sk is not null)
                                    TableScan [TS_60] (rows=144002668 width=119)
                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                                    <-Map 16 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_275]
                                        PartitionCols:_col0
                                        Select Operator [SEL_273] (rows=635 width=12)
                                          Output:["_col0"]
                                          Filter Operator [FIL_271] (rows=635 width=12)
                                            predicate:((d_qoy = 2) and (d_year = 2000) and d_date_sk is not null)
                                            TableScan [TS_23] (rows=73049 width=12)
                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_qoy"]
                                    <-Map 8 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_269]
                                        PartitionCols:_col0
                                        Select Operator [SEL_267] (rows=635 width=12)
                                          Output:["_col0"]
                                          Filter Operator [FIL_265] (rows=635 width=12)
                                            predicate:((d_qoy = 1) and (d_year = 2000) and d_date_sk is not null)
                                            TableScan [TS_3] (rows=73049 width=12)
                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_qoy"]
                <-Map Join Operator [MAPJOIN_313] (rows=1716 width=322)
                    Conds:GBY_312._col0=RS_309._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col3"]
                  <-Reducer 13 [BROADCAST_EDGE] vectorized
                    BROADCAST [RS_309]
                      PartitionCols:_col0
                      Group By Operator [GBY_308] (rows=1716 width=210)
                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                      <-Reducer 12 [SIMPLE_EDGE]
                        SHUFFLE [RS_97]
                          PartitionCols:_col0
                          Group By Operator [GBY_96] (rows=72072 width=210)
                            Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col7
                            Merge Join Operator [MERGEJOIN_245] (rows=50052075 width=209)
                              Conds:RS_306._col1=RS_294._col0(Inner),Output:["_col2","_col7"]
                            <-Map 9 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_294]
                                PartitionCols:_col0
                                 Please refer to the previous Select Operator [SEL_289]
                            <-Map 18 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_306]
                                PartitionCols:_col1
                                Map Join Operator [MAPJOIN_303] (rows=50052075 width=115)
                                  Conds:SEL_301._col0=RS_275._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2"]
                                <-Map 16 [BROADCAST_EDGE] vectorized
                                   Please refer to the previous BROADCAST [RS_275]
                                   Please refer to the previous Select Operator [SEL_301]
                  <-Group By Operator [GBY_312] (rows=1716 width=210)
                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                    <-Reducer 10 [SIMPLE_EDGE]
                      SHUFFLE [RS_77]
                        PartitionCols:_col0
                        Group By Operator [GBY_76] (rows=72072 width=210)
                          Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col7
                          Merge Join Operator [MERGEJOIN_243] (rows=50052075 width=209)
                            Conds:RS_305._col1=RS_293._col0(Inner),Output:["_col2","_col7"]
                          <-Map 9 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_293]
                              PartitionCols:_col0
                               Please refer to the previous Select Operator [SEL_289]
                          <-Map 18 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_305]
                              PartitionCols:_col1
                              Map Join Operator [MAPJOIN_302] (rows=50052075 width=115)
                                Conds:SEL_301._col0=RS_269._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2"]
                              <-Map 8 [BROADCAST_EDGE] vectorized
                                 Please refer to the previous BROADCAST [RS_269]
                                 Please refer to the previous Select Operator [SEL_301]
            <-Map Join Operator [MAPJOIN_318] (rows=1716 width=434)
                Conds:MAPJOIN_317._col0=RS_299._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col3","_col5"]
              <-Reducer 7 [BROADCAST_EDGE] vectorized
                BROADCAST [RS_299]
                  PartitionCols:_col0
                  Group By Operator [GBY_298] (rows=1716 width=210)
                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                  <-Reducer 6 [SIMPLE_EDGE]
                    SHUFFLE [RS_57]
                      PartitionCols:_col0
                      Group By Operator [GBY_56] (rows=240240 width=210)
                        Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col7
                        Merge Join Operator [MERGEJOIN_241] (rows=182682471 width=195)
                          Conds:RS_287._col1=RS_292._col0(Inner),Output:["_col2","_col7"]
                        <-Map 9 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_292]
                            PartitionCols:_col0
                             Please refer to the previous Select Operator [SEL_289]
                        <-Map 1 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_287]
                            PartitionCols:_col1
                            Map Join Operator [MAPJOIN_284] (rows=182682471 width=100)
                              Conds:SEL_281._col0=RS_278._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2"]
                            <-Map 17 [BROADCAST_EDGE] vectorized
                              BROADCAST [RS_278]
                                PartitionCols:_col0
                                 Please refer to the previous Select Operator [SEL_277]
                            <-Select Operator [SEL_281] (rows=525327191 width=114)
                                Output:["_col0","_col1","_col2"]
                                Filter Operator [FIL_280] (rows=525327191 width=114)
                                  predicate:(ss_addr_sk is not null and ss_sold_date_sk is not null)
                                  TableScan [TS_0] (rows=575995635 width=114)
                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_addr_sk","ss_ext_sales_price"]
              <-Map Join Operator [MAPJOIN_317] (rows=1716 width=322)
                  Conds:GBY_316._col0=RS_297._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col3"]
                <-Reducer 5 [BROADCAST_EDGE] vectorized
                  BROADCAST [RS_297]
                    PartitionCols:_col0
                    Group By Operator [GBY_296] (rows=1716 width=210)
                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                    <-Reducer 4 [SIMPLE_EDGE]
                      SHUFFLE [RS_37]
                        PartitionCols:_col0
                        Group By Operator [GBY_36] (rows=240240 width=210)
                          Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col7
                          Merge Join Operator [MERGEJOIN_239] (rows=182682471 width=195)
                            Conds:RS_286._col1=RS_291._col0(Inner),Output:["_col2","_col7"]
                          <-Map 9 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_291]
                              PartitionCols:_col0
                               Please refer to the previous Select Operator [SEL_289]
                          <-Map 1 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_286]
                              PartitionCols:_col1
                              Map Join Operator [MAPJOIN_283] (rows=182682471 width=100)
                                Conds:SEL_281._col0=RS_274._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2"]
                              <-Map 16 [BROADCAST_EDGE] vectorized
                                BROADCAST [RS_274]
                                  PartitionCols:_col0
                                  Select Operator [SEL_272] (rows=635 width=12)
                                    Output:["_col0"]
                                    Filter Operator [FIL_270] (rows=635 width=12)
                                      predicate:((d_qoy = 1) and (d_year = 2000) and d_date_sk is not null)
                                       Please refer to the previous TableScan [TS_23]
                                 Please refer to the previous Select Operator [SEL_281]
                <-Group By Operator [GBY_316] (rows=1716 width=210)
                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                  <-Reducer 2 [SIMPLE_EDGE]
                    SHUFFLE [RS_17]
                      PartitionCols:_col0
                      Group By Operator [GBY_16] (rows=240240 width=210)
                        Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col7
                        Merge Join Operator [MERGEJOIN_237] (rows=182682471 width=195)
                          Conds:RS_285._col1=RS_290._col0(Inner),Output:["_col2","_col7"]
                        <-Map 9 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_290]
                            PartitionCols:_col0
                             Please refer to the previous Select Operator [SEL_289]
                        <-Map 1 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_285]
                            PartitionCols:_col1
                            Map Join Operator [MAPJOIN_282] (rows=182682471 width=100)
                              Conds:SEL_281._col0=RS_268._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2"]
                            <-Map 8 [BROADCAST_EDGE] vectorized
                              BROADCAST [RS_268]
                                PartitionCols:_col0
                                Select Operator [SEL_266] (rows=635 width=12)
                                  Output:["_col0"]
                                  Filter Operator [FIL_264] (rows=635 width=12)
                                    predicate:((d_qoy = 2) and (d_year = 2000) and d_date_sk is not null)
                                     Please refer to the previous TableScan [TS_3]
                               Please refer to the previous Select Operator [SEL_281]

