PREHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,max(ss_net_paid) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,max(ws_net_paid) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
         )
  select 
        t_s_secyear.customer_id, t_s_secyear.customer_first_name, t_s_secyear.customer_last_name
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.year = 2001
         and t_s_secyear.year = 2001+1
         and t_w_firstyear.year = 2001
         and t_w_secyear.year = 2001+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
 order by 2,1,3
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,max(ss_net_paid) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,max(ws_net_paid) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
         )
  select 
        t_s_secyear.customer_id, t_s_secyear.customer_first_name, t_s_secyear.customer_last_name
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.year = 2001
         and t_s_secyear.year = 2001+1
         and t_w_firstyear.year = 2001
         and t_w_secyear.year = 2001+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
 order by 2,1,3
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 10 (BROADCAST_EDGE), Map 16 (BROADCAST_EDGE)
Map 11 <- Map 10 (BROADCAST_EDGE), Map 16 (BROADCAST_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Map 11 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 15 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (ONE_TO_ONE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 6 <- Reducer 13 (SIMPLE_EDGE), Reducer 5 (ONE_TO_ONE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 1 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_217]
        Limit [LIM_216] (rows=100 width=280)
          Number of rows:100
          Select Operator [SEL_215] (rows=80517939 width=280)
            Output:["_col0","_col1","_col2"]
          <-Reducer 6 [SIMPLE_EDGE]
            SHUFFLE [RS_93]
              Select Operator [SEL_92] (rows=80517939 width=280)
                Output:["_col0","_col1","_col2"]
                Filter Operator [FIL_91] (rows=80517939 width=728)
                  predicate:CASE WHEN (_col3 is not null) THEN (CASE WHEN (_col5 is not null) THEN (((_col1 / _col5) > (_col9 / _col3))) ELSE ((null > (_col9 / _col3))) END) ELSE (CASE WHEN (_col5 is not null) THEN (((_col1 / _col5) > null)) ELSE (null) END) END
                  Merge Join Operator [MERGEJOIN_168] (rows=161035879 width=728)
                    Conds:RS_88._col2=RS_214._col0(Inner),Output:["_col1","_col3","_col5","_col6","_col7","_col8","_col9"]
                  <-Reducer 13 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_214]
                      PartitionCols:_col0
                      Select Operator [SEL_213] (rows=187573258 width=392)
                        Output:["_col0","_col1","_col2","_col3"]
                        Group By Operator [GBY_212] (rows=187573258 width=396)
                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                        <-Reducer 12 [SIMPLE_EDGE]
                          SHUFFLE [RS_79]
                            PartitionCols:_col0, _col1, _col2, _col3
                            Group By Operator [GBY_78] (rows=187573258 width=396)
                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(_col2)"],keys:_col6, _col7, _col8, _col4
                              Merge Join Operator [MERGEJOIN_165] (rows=187573258 width=381)
                                Conds:RS_200._col1=RS_189._col0(Inner),Output:["_col2","_col4","_col6","_col7","_col8"]
                              <-Map 17 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_189]
                                  PartitionCols:_col0
                                  Select Operator [SEL_188] (rows=80000000 width=284)
                                    Output:["_col0","_col1","_col2","_col3"]
                                    Filter Operator [FIL_187] (rows=80000000 width=284)
                                      predicate:(c_customer_id is not null and c_customer_sk is not null)
                                      TableScan [TS_68] (rows=80000000 width=284)
                                        default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_customer_id","c_first_name","c_last_name"]
                              <-Map 11 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_200]
                                  PartitionCols:_col1
                                  Map Join Operator [MAPJOIN_198] (rows=187573258 width=105)
                                    Conds:SEL_197._col0=RS_179._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col4"]
                                  <-Map 16 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_179]
                                      PartitionCols:_col0
                                      Select Operator [SEL_178] (rows=652 width=8)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_177] (rows=652 width=8)
                                          predicate:((d_year = 2002) and (d_year) IN (2001, 2002) and d_date_sk is not null)
                                          TableScan [TS_65] (rows=73049 width=8)
                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                  <-Select Operator [SEL_197] (rows=525327388 width=114)
                                      Output:["_col0","_col1","_col2"]
                                      Filter Operator [FIL_196] (rows=525327388 width=114)
                                        predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                        TableScan [TS_62] (rows=575995635 width=114)
                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_net_paid"]
                                        <-Map 10 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_175]
                                            PartitionCols:_col0
                                            Select Operator [SEL_174] (rows=652 width=8)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_173] (rows=652 width=8)
                                                predicate:((d_year = 2001) and (d_year) IN (2001, 2002) and d_date_sk is not null)
                                                TableScan [TS_23] (rows=73049 width=8)
                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                  <-Reducer 5 [ONE_TO_ONE_EDGE]
                    FORWARD [RS_88]
                      PartitionCols:_col2
                      Merge Join Operator [MERGEJOIN_167] (rows=57435371 width=436)
                        Conds:RS_85._col2=RS_211._col0(Inner),Output:["_col1","_col2","_col3","_col5"]
                      <-Reducer 4 [ONE_TO_ONE_EDGE]
                        FORWARD [RS_85]
                          PartitionCols:_col2
                          Merge Join Operator [MERGEJOIN_166] (rows=74767343 width=324)
                            Conds:RS_195._col0=RS_206._col0(Inner),Output:["_col1","_col2","_col3"]
                          <-Reducer 15 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_206]
                              PartitionCols:_col0
                              Select Operator [SEL_205] (rows=62524419 width=212)
                                Output:["_col0","_col1"]
                                Filter Operator [FIL_204] (rows=62524419 width=212)
                                  predicate:(_col4 > 0)
                                  Select Operator [SEL_203] (rows=187573258 width=212)
                                    Output:["_col0","_col4"]
                                    Group By Operator [GBY_202] (rows=187573258 width=396)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                                    <-Reducer 14 [SIMPLE_EDGE]
                                      SHUFFLE [RS_37]
                                        PartitionCols:_col0, _col1, _col2, _col3
                                        Group By Operator [GBY_36] (rows=187573258 width=396)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(_col2)"],keys:_col6, _col7, _col8, _col4
                                          Merge Join Operator [MERGEJOIN_161] (rows=187573258 width=381)
                                            Conds:RS_201._col1=RS_191._col0(Inner),Output:["_col2","_col4","_col6","_col7","_col8"]
                                          <-Map 17 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_191]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_188]
                                          <-Map 11 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_201]
                                              PartitionCols:_col1
                                              Map Join Operator [MAPJOIN_199] (rows=187573258 width=105)
                                                Conds:SEL_197._col0=RS_175._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col4"]
                                              <-Map 10 [BROADCAST_EDGE] vectorized
                                                 Please refer to the previous BROADCAST [RS_175]
                                                 Please refer to the previous Select Operator [SEL_197]
                          <-Reducer 3 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_195]
                              PartitionCols:_col0
                              Select Operator [SEL_194] (rows=51391963 width=212)
                                Output:["_col0","_col1"]
                                Group By Operator [GBY_193] (rows=51391963 width=396)
                                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_17]
                                    PartitionCols:_col0, _col1, _col2, _col3
                                    Group By Operator [GBY_16] (rows=51391963 width=396)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(_col2)"],keys:_col6, _col7, _col8, _col4
                                      Merge Join Operator [MERGEJOIN_159] (rows=51391963 width=395)
                                        Conds:RS_185._col1=RS_190._col0(Inner),Output:["_col2","_col4","_col6","_col7","_col8"]
                                      <-Map 17 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_190]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_188]
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_185]
                                          PartitionCols:_col1
                                          Map Join Operator [MAPJOIN_183] (rows=51391963 width=119)
                                            Conds:SEL_182._col0=RS_180._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col4"]
                                          <-Map 16 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_180]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_178]
                                          <-Select Operator [SEL_182] (rows=143930993 width=119)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_181] (rows=143930993 width=119)
                                                predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                                TableScan [TS_0] (rows=144002668 width=119)
                                                  default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_net_paid"]
                      <-Reducer 9 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_211]
                          PartitionCols:_col0
                          Select Operator [SEL_210] (rows=17130654 width=212)
                            Output:["_col0","_col1"]
                            Filter Operator [FIL_209] (rows=17130654 width=212)
                              predicate:(_col4 > 0)
                              Select Operator [SEL_208] (rows=51391963 width=212)
                                Output:["_col0","_col4"]
                                Group By Operator [GBY_207] (rows=51391963 width=396)
                                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                                <-Reducer 8 [SIMPLE_EDGE]
                                  SHUFFLE [RS_58]
                                    PartitionCols:_col0, _col1, _col2, _col3
                                    Group By Operator [GBY_57] (rows=51391963 width=396)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(_col2)"],keys:_col6, _col7, _col8, _col4
                                      Merge Join Operator [MERGEJOIN_163] (rows=51391963 width=395)
                                        Conds:RS_186._col1=RS_192._col0(Inner),Output:["_col2","_col4","_col6","_col7","_col8"]
                                      <-Map 17 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_192]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_188]
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_186]
                                          PartitionCols:_col1
                                          Map Join Operator [MAPJOIN_184] (rows=51391963 width=119)
                                            Conds:SEL_182._col0=RS_176._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col4"]
                                          <-Map 10 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_176]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_174]
                                             Please refer to the previous Select Operator [SEL_182]

