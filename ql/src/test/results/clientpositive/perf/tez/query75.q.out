PREHOOK: query: explain
WITH all_sales AS (
 SELECT d_year
       ,i_brand_id
       ,i_class_id
       ,i_category_id
       ,i_manufact_id
       ,SUM(sales_cnt) AS sales_cnt
       ,SUM(sales_amt) AS sales_amt
 FROM (SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,cs_quantity - COALESCE(cr_return_quantity,0) AS sales_cnt
             ,cs_ext_sales_price - COALESCE(cr_return_amount,0.0) AS sales_amt
       FROM catalog_sales JOIN item ON i_item_sk=cs_item_sk
                          JOIN date_dim ON d_date_sk=cs_sold_date_sk
                          LEFT JOIN catalog_returns ON (cs_order_number=cr_order_number 
                                                    AND cs_item_sk=cr_item_sk)
       WHERE i_category='Sports'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ss_quantity - COALESCE(sr_return_quantity,0) AS sales_cnt
             ,ss_ext_sales_price - COALESCE(sr_return_amt,0.0) AS sales_amt
       FROM store_sales JOIN item ON i_item_sk=ss_item_sk
                        JOIN date_dim ON d_date_sk=ss_sold_date_sk
                        LEFT JOIN store_returns ON (ss_ticket_number=sr_ticket_number 
                                                AND ss_item_sk=sr_item_sk)
       WHERE i_category='Sports'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ws_quantity - COALESCE(wr_return_quantity,0) AS sales_cnt
             ,ws_ext_sales_price - COALESCE(wr_return_amt,0.0) AS sales_amt
       FROM web_sales JOIN item ON i_item_sk=ws_item_sk
                      JOIN date_dim ON d_date_sk=ws_sold_date_sk
                      LEFT JOIN web_returns ON (ws_order_number=wr_order_number 
                                            AND ws_item_sk=wr_item_sk)
       WHERE i_category='Sports') sales_detail
 GROUP BY d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id)
 SELECT  prev_yr.d_year AS prev_year
                          ,curr_yr.d_year AS year
                          ,curr_yr.i_brand_id
                          ,curr_yr.i_class_id
                          ,curr_yr.i_category_id
                          ,curr_yr.i_manufact_id
                          ,prev_yr.sales_cnt AS prev_yr_cnt
                          ,curr_yr.sales_cnt AS curr_yr_cnt
                          ,curr_yr.sales_cnt-prev_yr.sales_cnt AS sales_cnt_diff
                          ,curr_yr.sales_amt-prev_yr.sales_amt AS sales_amt_diff
 FROM all_sales curr_yr, all_sales prev_yr
 WHERE curr_yr.i_brand_id=prev_yr.i_brand_id
   AND curr_yr.i_class_id=prev_yr.i_class_id
   AND curr_yr.i_category_id=prev_yr.i_category_id
   AND curr_yr.i_manufact_id=prev_yr.i_manufact_id
   AND curr_yr.d_year=2002
   AND prev_yr.d_year=2002-1
   AND CAST(curr_yr.sales_cnt AS DECIMAL(17,2))/CAST(prev_yr.sales_cnt AS DECIMAL(17,2))<0.9
 ORDER BY sales_cnt_diff
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_returns
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
WITH all_sales AS (
 SELECT d_year
       ,i_brand_id
       ,i_class_id
       ,i_category_id
       ,i_manufact_id
       ,SUM(sales_cnt) AS sales_cnt
       ,SUM(sales_amt) AS sales_amt
 FROM (SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,cs_quantity - COALESCE(cr_return_quantity,0) AS sales_cnt
             ,cs_ext_sales_price - COALESCE(cr_return_amount,0.0) AS sales_amt
       FROM catalog_sales JOIN item ON i_item_sk=cs_item_sk
                          JOIN date_dim ON d_date_sk=cs_sold_date_sk
                          LEFT JOIN catalog_returns ON (cs_order_number=cr_order_number 
                                                    AND cs_item_sk=cr_item_sk)
       WHERE i_category='Sports'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ss_quantity - COALESCE(sr_return_quantity,0) AS sales_cnt
             ,ss_ext_sales_price - COALESCE(sr_return_amt,0.0) AS sales_amt
       FROM store_sales JOIN item ON i_item_sk=ss_item_sk
                        JOIN date_dim ON d_date_sk=ss_sold_date_sk
                        LEFT JOIN store_returns ON (ss_ticket_number=sr_ticket_number 
                                                AND ss_item_sk=sr_item_sk)
       WHERE i_category='Sports'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ws_quantity - COALESCE(wr_return_quantity,0) AS sales_cnt
             ,ws_ext_sales_price - COALESCE(wr_return_amt,0.0) AS sales_amt
       FROM web_sales JOIN item ON i_item_sk=ws_item_sk
                      JOIN date_dim ON d_date_sk=ws_sold_date_sk
                      LEFT JOIN web_returns ON (ws_order_number=wr_order_number 
                                            AND ws_item_sk=wr_item_sk)
       WHERE i_category='Sports') sales_detail
 GROUP BY d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id)
 SELECT  prev_yr.d_year AS prev_year
                          ,curr_yr.d_year AS year
                          ,curr_yr.i_brand_id
                          ,curr_yr.i_class_id
                          ,curr_yr.i_category_id
                          ,curr_yr.i_manufact_id
                          ,prev_yr.sales_cnt AS prev_yr_cnt
                          ,curr_yr.sales_cnt AS curr_yr_cnt
                          ,curr_yr.sales_cnt-prev_yr.sales_cnt AS sales_cnt_diff
                          ,curr_yr.sales_amt-prev_yr.sales_amt AS sales_amt_diff
 FROM all_sales curr_yr, all_sales prev_yr
 WHERE curr_yr.i_brand_id=prev_yr.i_brand_id
   AND curr_yr.i_class_id=prev_yr.i_class_id
   AND curr_yr.i_category_id=prev_yr.i_category_id
   AND curr_yr.i_manufact_id=prev_yr.i_manufact_id
   AND curr_yr.d_year=2002
   AND prev_yr.d_year=2002-1
   AND CAST(curr_yr.sales_cnt AS DECIMAL(17,2))/CAST(prev_yr.sales_cnt AS DECIMAL(17,2))<0.9
 ORDER BY sales_cnt_diff
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_returns
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 10 (BROADCAST_EDGE), Map 9 (BROADCAST_EDGE)
Map 17 <- Map 10 (BROADCAST_EDGE), Map 9 (BROADCAST_EDGE)
Map 21 <- Map 10 (BROADCAST_EDGE), Map 9 (BROADCAST_EDGE)
Map 25 <- Map 10 (BROADCAST_EDGE), Map 9 (BROADCAST_EDGE)
Map 26 <- Map 10 (BROADCAST_EDGE), Map 9 (BROADCAST_EDGE)
Map 27 <- Map 10 (BROADCAST_EDGE), Map 9 (BROADCAST_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE), Map 25 (SIMPLE_EDGE), Union 13 (CONTAINS)
Reducer 14 <- Union 13 (SIMPLE_EDGE), Union 15 (CONTAINS)
Reducer 16 <- Union 15 (SIMPLE_EDGE)
Reducer 18 <- Map 17 (SIMPLE_EDGE), Map 19 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 11 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 20 <- Map 19 (SIMPLE_EDGE), Map 26 (SIMPLE_EDGE), Union 13 (CONTAINS)
Reducer 22 <- Map 21 (SIMPLE_EDGE), Map 23 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 24 <- Map 23 (SIMPLE_EDGE), Map 27 (SIMPLE_EDGE), Union 15 (CONTAINS)
Reducer 4 <- Union 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 16 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 8 vectorized
      File Output Operator [FS_376]
        Select Operator [SEL_375] (rows=100 width=160)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
          Limit [LIM_374] (rows=100 width=152)
            Number of rows:100
            Select Operator [SEL_373] (rows=38234207120 width=151)
              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
            <-Reducer 7 [SIMPLE_EDGE]
              SHUFFLE [RS_175]
                Select Operator [SEL_174] (rows=38234207120 width=151)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                  Filter Operator [FIL_173] (rows=38234207120 width=255)
                    predicate:((CAST( _col10 AS decimal(17,2)) / CAST( _col4 AS decimal(17,2))) < 0.9)
                    Merge Join Operator [MERGEJOIN_282] (rows=114702621361 width=255)
                      Conds:RS_369._col0, _col1, _col2, _col3=RS_372._col0, _col1, _col2, _col3(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col10","_col11"]
                    <-Reducer 16 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_372]
                        PartitionCols:_col0, _col1, _col2, _col3
                        Group By Operator [GBY_371] (rows=8520960 width=135)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3
                          Group By Operator [GBY_370] (rows=736356923 width=131)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                          <-Union 15 [SIMPLE_EDGE]
                            <-Reducer 14 [CONTAINS] vectorized
                              Reduce Output Operator [RS_384]
                                PartitionCols:_col0, _col1, _col2, _col3
                                Group By Operator [GBY_383] (rows=736356923 width=131)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                  Group By Operator [GBY_382] (rows=621178955 width=131)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                                  <-Union 13 [SIMPLE_EDGE]
                                    <-Reducer 12 [CONTAINS]
                                      Reduce Output Operator [RS_308]
                                        PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                        Group By Operator [GBY_307] (rows=621178955 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                          Select Operator [SEL_305] (rows=170474971 width=131)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Merge Join Operator [MERGEJOIN_304] (rows=170474971 width=234)
                                              Conds:RS_381._col1, _col2=RS_363._col0, _col1(Left Outer),Output:["_col3","_col4","_col8","_col9","_col10","_col12","_col15","_col16"]
                                            <-Map 11 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_363]
                                                PartitionCols:_col0, _col1
                                                Select Operator [SEL_361] (rows=28798881 width=121)
                                                  Output:["_col0","_col1","_col2","_col3"]
                                                  Filter Operator [FIL_360] (rows=28798881 width=121)
                                                    predicate:cr_item_sk is not null
                                                    TableScan [TS_9] (rows=28798881 width=121)
                                                      default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_item_sk","cr_order_number","cr_return_quantity","cr_return_amount"]
                                            <-Map 25 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_381]
                                                PartitionCols:_col1, _col2
                                                Map Join Operator [MAPJOIN_380] (rows=96821196 width=138)
                                                  Conds:MAPJOIN_379._col1=RS_352._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col8","_col9","_col10","_col12"]
                                                <-Map 10 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_352]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_348] (rows=45745 width=109)
                                                      Output:["_col0","_col1","_col2","_col3","_col5"]
                                                      Filter Operator [FIL_347] (rows=45745 width=109)
                                                        predicate:((i_category = 'Sports') and i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null and i_manufact_id is not null)
                                                        TableScan [TS_6] (rows=462000 width=109)
                                                          default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id","i_category","i_manufact_id"]
                                                <-Map Join Operator [MAPJOIN_379] (rows=101592102 width=122)
                                                    Conds:SEL_378._col0=RS_344._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4"]
                                                  <-Map 9 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_344]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_338] (rows=652 width=8)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_334] (rows=652 width=8)
                                                          predicate:((d_year = 2002) and d_date_sk is not null)
                                                          TableScan [TS_3] (rows=73049 width=8)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                  <-Select Operator [SEL_378] (rows=286549727 width=127)
                                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                                      Filter Operator [FIL_377] (rows=286549727 width=127)
                                                        predicate:(cs_item_sk is not null and cs_sold_date_sk is not null)
                                                        TableScan [TS_85] (rows=287989836 width=127)
                                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_order_number","cs_quantity","cs_ext_sales_price"]
                                    <-Reducer 20 [CONTAINS]
                                      Reduce Output Operator [RS_322]
                                        PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                        Group By Operator [GBY_321] (rows=621178955 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                          Select Operator [SEL_319] (rows=450703984 width=131)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Merge Join Operator [MERGEJOIN_318] (rows=450703984 width=204)
                                              Conds:RS_398._col1, _col2=RS_393._col0, _col1(Left Outer),Output:["_col3","_col4","_col8","_col9","_col10","_col12","_col15","_col16"]
                                            <-Map 19 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_393]
                                                PartitionCols:_col0, _col1
                                                Select Operator [SEL_391] (rows=57591150 width=119)
                                                  Output:["_col0","_col1","_col2","_col3"]
                                                  Filter Operator [FIL_390] (rows=57591150 width=119)
                                                    predicate:sr_item_sk is not null
                                                    TableScan [TS_31] (rows=57591150 width=119)
                                                      default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number","sr_return_quantity","sr_return_amt"]
                                            <-Map 26 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_398]
                                                PartitionCols:_col1, _col2
                                                Map Join Operator [MAPJOIN_397] (rows=187186493 width=124)
                                                  Conds:MAPJOIN_396._col1=RS_353._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col8","_col9","_col10","_col12"]
                                                <-Map 10 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_353]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_348]
                                                <-Map Join Operator [MAPJOIN_396] (rows=196410188 width=109)
                                                    Conds:SEL_395._col0=RS_345._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4"]
                                                  <-Map 9 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_345]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_339] (rows=652 width=8)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_335] (rows=652 width=8)
                                                          predicate:((d_year = 2002) and d_date_sk is not null)
                                                           Please refer to the previous TableScan [TS_3]
                                                  <-Select Operator [SEL_395] (rows=550076554 width=122)
                                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                                      Filter Operator [FIL_394] (rows=550076554 width=122)
                                                        predicate:(ss_item_sk is not null and ss_sold_date_sk is not null)
                                                        TableScan [TS_107] (rows=575995635 width=122)
                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_ticket_number","ss_quantity","ss_ext_sales_price"]
                            <-Reducer 24 [CONTAINS]
                              Reduce Output Operator [RS_332]
                                PartitionCols:_col0, _col1, _col2, _col3
                                Group By Operator [GBY_331] (rows=736356923 width=131)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                  Select Operator [SEL_329] (rows=115177968 width=131)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                    Merge Join Operator [MERGEJOIN_328] (rows=115177968 width=220)
                                      Conds:RS_412._col1, _col2=RS_407._col0, _col1(Left Outer),Output:["_col3","_col4","_col8","_col9","_col10","_col12","_col15","_col16"]
                                    <-Map 23 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_407]
                                        PartitionCols:_col0, _col1
                                        Select Operator [SEL_405] (rows=14398467 width=118)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Filter Operator [FIL_404] (rows=14398467 width=118)
                                            predicate:wr_item_sk is not null
                                            TableScan [TS_60] (rows=14398467 width=118)
                                              default@web_returns,web_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["wr_item_sk","wr_order_number","wr_return_quantity","wr_return_amt"]
                                    <-Map 27 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_412]
                                        PartitionCols:_col1, _col2
                                        Map Join Operator [MAPJOIN_411] (rows=48990732 width=139)
                                          Conds:MAPJOIN_410._col1=RS_354._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col8","_col9","_col10","_col12"]
                                        <-Map 10 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_354]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_348]
                                        <-Map Join Operator [MAPJOIN_410] (rows=51404771 width=123)
                                            Conds:SEL_409._col0=RS_346._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4"]
                                          <-Map 9 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_346]
                                              PartitionCols:_col0
                                              Select Operator [SEL_340] (rows=652 width=8)
                                                Output:["_col0"]
                                                Filter Operator [FIL_336] (rows=652 width=8)
                                                  predicate:((d_year = 2002) and d_date_sk is not null)
                                                   Please refer to the previous TableScan [TS_3]
                                          <-Select Operator [SEL_409] (rows=143966864 width=127)
                                              Output:["_col0","_col1","_col2","_col3","_col4"]
                                              Filter Operator [FIL_408] (rows=143966864 width=127)
                                                predicate:(ws_item_sk is not null and ws_sold_date_sk is not null)
                                                TableScan [TS_136] (rows=144002668 width=127)
                                                  default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_order_number","ws_quantity","ws_ext_sales_price"]
                    <-Reducer 6 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_369]
                        PartitionCols:_col0, _col1, _col2, _col3
                        Group By Operator [GBY_368] (rows=8520960 width=135)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3
                          Group By Operator [GBY_367] (rows=736356923 width=131)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                          <-Union 5 [SIMPLE_EDGE]
                            <-Reducer 22 [CONTAINS]
                              Reduce Output Operator [RS_327]
                                PartitionCols:_col0, _col1, _col2, _col3
                                Group By Operator [GBY_326] (rows=736356923 width=131)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                  Select Operator [SEL_324] (rows=115177968 width=131)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                    Merge Join Operator [MERGEJOIN_323] (rows=115177968 width=220)
                                      Conds:RS_403._col1, _col2=RS_406._col0, _col1(Left Outer),Output:["_col3","_col4","_col8","_col9","_col10","_col12","_col15","_col16"]
                                    <-Map 23 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_406]
                                        PartitionCols:_col0, _col1
                                         Please refer to the previous Select Operator [SEL_405]
                                    <-Map 21 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_403]
                                        PartitionCols:_col1, _col2
                                        Map Join Operator [MAPJOIN_402] (rows=48990732 width=139)
                                          Conds:MAPJOIN_401._col1=RS_351._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col8","_col9","_col10","_col12"]
                                        <-Map 10 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_351]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_348]
                                        <-Map Join Operator [MAPJOIN_401] (rows=51404771 width=123)
                                            Conds:SEL_400._col0=RS_343._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4"]
                                          <-Map 9 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_343]
                                              PartitionCols:_col0
                                              Select Operator [SEL_337] (rows=652 width=8)
                                                Output:["_col0"]
                                                Filter Operator [FIL_333] (rows=652 width=8)
                                                  predicate:((d_year = 2001) and d_date_sk is not null)
                                                   Please refer to the previous TableScan [TS_3]
                                          <-Select Operator [SEL_400] (rows=143966864 width=127)
                                              Output:["_col0","_col1","_col2","_col3","_col4"]
                                              Filter Operator [FIL_399] (rows=143966864 width=127)
                                                predicate:(ws_item_sk is not null and ws_sold_date_sk is not null)
                                                TableScan [TS_51] (rows=144002668 width=127)
                                                  default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_order_number","ws_quantity","ws_ext_sales_price"]
                            <-Reducer 4 [CONTAINS] vectorized
                              Reduce Output Operator [RS_366]
                                PartitionCols:_col0, _col1, _col2, _col3
                                Group By Operator [GBY_365] (rows=736356923 width=131)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                  Group By Operator [GBY_364] (rows=621178955 width=131)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                                  <-Union 3 [SIMPLE_EDGE]
                                    <-Reducer 18 [CONTAINS]
                                      Reduce Output Operator [RS_317]
                                        PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                        Group By Operator [GBY_316] (rows=621178955 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                          Select Operator [SEL_314] (rows=450703984 width=131)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Merge Join Operator [MERGEJOIN_313] (rows=450703984 width=204)
                                              Conds:RS_389._col1, _col2=RS_392._col0, _col1(Left Outer),Output:["_col3","_col4","_col8","_col9","_col10","_col12","_col15","_col16"]
                                            <-Map 19 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_392]
                                                PartitionCols:_col0, _col1
                                                 Please refer to the previous Select Operator [SEL_391]
                                            <-Map 17 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_389]
                                                PartitionCols:_col1, _col2
                                                Map Join Operator [MAPJOIN_388] (rows=187186493 width=124)
                                                  Conds:MAPJOIN_387._col1=RS_350._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col8","_col9","_col10","_col12"]
                                                <-Map 10 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_350]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_348]
                                                <-Map Join Operator [MAPJOIN_387] (rows=196410188 width=109)
                                                    Conds:SEL_386._col0=RS_342._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4"]
                                                  <-Map 9 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_342]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_337]
                                                  <-Select Operator [SEL_386] (rows=550076554 width=122)
                                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                                      Filter Operator [FIL_385] (rows=550076554 width=122)
                                                        predicate:(ss_item_sk is not null and ss_sold_date_sk is not null)
                                                        TableScan [TS_22] (rows=575995635 width=122)
                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_ticket_number","ss_quantity","ss_ext_sales_price"]
                                    <-Reducer 2 [CONTAINS]
                                      Reduce Output Operator [RS_299]
                                        PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                        Group By Operator [GBY_298] (rows=621178955 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                          Select Operator [SEL_296] (rows=170474971 width=131)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Merge Join Operator [MERGEJOIN_295] (rows=170474971 width=234)
                                              Conds:RS_359._col1, _col2=RS_362._col0, _col1(Left Outer),Output:["_col3","_col4","_col8","_col9","_col10","_col12","_col15","_col16"]
                                            <-Map 11 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_362]
                                                PartitionCols:_col0, _col1
                                                 Please refer to the previous Select Operator [SEL_361]
                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_359]
                                                PartitionCols:_col1, _col2
                                                Map Join Operator [MAPJOIN_358] (rows=96821196 width=138)
                                                  Conds:MAPJOIN_357._col1=RS_349._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col8","_col9","_col10","_col12"]
                                                <-Map 10 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_349]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_348]
                                                <-Map Join Operator [MAPJOIN_357] (rows=101592102 width=122)
                                                    Conds:SEL_356._col0=RS_341._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4"]
                                                  <-Map 9 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_341]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_337]
                                                  <-Select Operator [SEL_356] (rows=286549727 width=127)
                                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                                      Filter Operator [FIL_355] (rows=286549727 width=127)
                                                        predicate:(cs_item_sk is not null and cs_sold_date_sk is not null)
                                                        TableScan [TS_0] (rows=287989836 width=127)
                                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_order_number","cs_quantity","cs_ext_sales_price"]

