PREHOOK: query: explain
select   
     i_item_id
    ,i_item_desc
    ,s_store_id
    ,s_store_name
    ,sum(ss_quantity)        as store_sales_quantity
    ,sum(sr_return_quantity) as store_returns_quantity
    ,sum(cs_quantity)        as catalog_sales_quantity
 from
    store_sales
   ,store_returns
   ,catalog_sales
   ,date_dim             d1
   ,date_dim             d2
   ,date_dim             d3
   ,store
   ,item
 where
     d1.d_moy               = 4 
 and d1.d_year              = 1999
 and d1.d_date_sk           = ss_sold_date_sk
 and i_item_sk              = ss_item_sk
 and s_store_sk             = ss_store_sk
 and ss_customer_sk         = sr_customer_sk
 and ss_item_sk             = sr_item_sk
 and ss_ticket_number       = sr_ticket_number
 and sr_returned_date_sk    = d2.d_date_sk
 and d2.d_moy               between 4 and  4 + 3 
 and d2.d_year              = 1999
 and sr_customer_sk         = cs_bill_customer_sk
 and sr_item_sk             = cs_item_sk
 and cs_sold_date_sk        = d3.d_date_sk     
 and d3.d_year              in (1999,1999+1,1999+2)
 group by
    i_item_id
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 order by
    i_item_id 
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select   
     i_item_id
    ,i_item_desc
    ,s_store_id
    ,s_store_name
    ,sum(ss_quantity)        as store_sales_quantity
    ,sum(sr_return_quantity) as store_returns_quantity
    ,sum(cs_quantity)        as catalog_sales_quantity
 from
    store_sales
   ,store_returns
   ,catalog_sales
   ,date_dim             d1
   ,date_dim             d2
   ,date_dim             d3
   ,store
   ,item
 where
     d1.d_moy               = 4 
 and d1.d_year              = 1999
 and d1.d_date_sk           = ss_sold_date_sk
 and i_item_sk              = ss_item_sk
 and s_store_sk             = ss_store_sk
 and ss_customer_sk         = sr_customer_sk
 and ss_item_sk             = sr_item_sk
 and ss_ticket_number       = sr_ticket_number
 and sr_returned_date_sk    = d2.d_date_sk
 and d2.d_moy               between 4 and  4 + 3 
 and d2.d_year              = 1999
 and sr_customer_sk         = cs_bill_customer_sk
 and sr_item_sk             = cs_item_sk
 and cs_sold_date_sk        = d3.d_date_sk     
 and d3.d_year              in (1999,1999+1,1999+2)
 group by
    i_item_id
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 order by
    i_item_id 
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 6 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)
Reducer 3 <- Map 13 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 8 <- Map 10 (BROADCAST_EDGE), Map 11 (BROADCAST_EDGE), Map 12 (BROADCAST_EDGE), Map 7 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_135]
        Limit [LIM_134] (rows=100 width=496)
          Number of rows:100
          Select Operator [SEL_133] (rows=3401759292 width=496)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
          <-Reducer 4 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_132]
              Group By Operator [GBY_131] (rows=3401759292 width=496)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
              <-Reducer 3 [SIMPLE_EDGE]
                SHUFFLE [RS_48]
                  PartitionCols:_col0, _col1, _col2, _col3
                  Group By Operator [GBY_47] (rows=3401759292 width=496)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col17)","sum(_col22)","sum(_col3)"],keys:_col27, _col28, _col7, _col8
                    Top N Key Operator [TNK_94] (rows=3401759292 width=483)
                      keys:_col27, _col28, _col7, _col8,sort order:++++,top n:100
                      Merge Join Operator [MERGEJOIN_101] (rows=3401759292 width=483)
                        Conds:RS_43._col13=RS_130._col0(Inner),Output:["_col3","_col7","_col8","_col17","_col22","_col27","_col28"]
                      <-Map 13 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_130]
                          PartitionCols:_col0
                          Select Operator [SEL_129] (rows=462000 width=288)
                            Output:["_col0","_col1","_col2"]
                            Filter Operator [FIL_128] (rows=462000 width=288)
                              predicate:i_item_sk is not null
                              TableScan [TS_34] (rows=462000 width=288)
                                default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_id","i_item_desc"]
                      <-Reducer 2 [SIMPLE_EDGE]
                        SHUFFLE [RS_43]
                          PartitionCols:_col13
                          Merge Join Operator [MERGEJOIN_100] (rows=3401759292 width=203)
                            Conds:RS_112._col1, _col2=RS_41._col14, _col13(Inner),Output:["_col3","_col7","_col8","_col13","_col17","_col22"]
                          <-Map 1 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_112]
                              PartitionCols:_col1, _col2
                              Map Join Operator [MAPJOIN_111] (rows=7638375 width=10)
                                Conds:SEL_110._col0=RS_108._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3"]
                              <-Map 6 [BROADCAST_EDGE] vectorized
                                BROADCAST [RS_108]
                                  PartitionCols:_col0
                                  Select Operator [SEL_107] (rows=1957 width=8)
                                    Output:["_col0"]
                                    Filter Operator [FIL_106] (rows=1957 width=8)
                                      predicate:((d_year) IN (1999, 2000, 2001) and d_date_sk is not null)
                                      TableScan [TS_3] (rows=73049 width=8)
                                        default@date_dim,d3,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                              <-Select Operator [SEL_110] (rows=285117831 width=15)
                                  Output:["_col0","_col1","_col2","_col3"]
                                  Filter Operator [FIL_109] (rows=285117831 width=15)
                                    predicate:(cs_bill_customer_sk is not null and cs_item_sk is not null and cs_sold_date_sk is not null)
                                    TableScan [TS_0] (rows=287989836 width=15)
                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_quantity"]
                          <-Reducer 8 [SIMPLE_EDGE]
                            SHUFFLE [RS_41]
                              PartitionCols:_col14, _col13
                              Select Operator [SEL_33] (rows=58487970 width=206)
                                Output:["_col1","_col2","_col7","_col11","_col13","_col14","_col16"]
                                Map Join Operator [MAPJOIN_99] (rows=58487970 width=206)
                                  Conds:MAPJOIN_98._col3=RS_127._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col5","_col7","_col8","_col10","_col18","_col19"]
                                <-Map 12 [BROADCAST_EDGE] vectorized
                                  BROADCAST [RS_127]
                                    PartitionCols:_col0
                                    Select Operator [SEL_126] (rows=1704 width=192)
                                      Output:["_col0","_col1","_col2"]
                                      Filter Operator [FIL_125] (rows=1704 width=192)
                                        predicate:s_store_sk is not null
                                        TableScan [TS_18] (rows=1704 width=192)
                                          default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_id","s_store_name"]
                                <-Map Join Operator [MAPJOIN_98] (rows=58487970 width=20)
                                    Conds:MAPJOIN_97._col6=RS_124._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col3","_col5","_col7","_col8","_col10"]
                                  <-Map 11 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_124]
                                      PartitionCols:_col0
                                      Select Operator [SEL_123] (rows=624 width=12)
                                        Output:["_col0"]
                                        Filter Operator [FIL_122] (rows=624 width=12)
                                          predicate:((d_year = 1999) and d_date_sk is not null and d_moy BETWEEN 4 AND 7)
                                          TableScan [TS_15] (rows=73049 width=12)
                                            default@date_dim,d2,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                  <-Map Join Operator [MAPJOIN_97] (rows=187651473 width=26)
                                      Conds:MERGEJOIN_96._col0=RS_121._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col3","_col5","_col6","_col7","_col8","_col10"]
                                    <-Map 10 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_121]
                                        PartitionCols:_col0
                                        Select Operator [SEL_120] (rows=624 width=12)
                                          Output:["_col0"]
                                          Filter Operator [FIL_119] (rows=624 width=12)
                                            predicate:((d_moy = 4) and (d_year = 1999) and d_date_sk is not null)
                                            TableScan [TS_12] (rows=73049 width=12)
                                              default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                    <-Merge Join Operator [MERGEJOIN_96] (rows=549128658 width=31)
                                        Conds:RS_115._col1, _col2, _col4=RS_118._col1, _col2, _col3(Inner),Output:["_col0","_col1","_col3","_col5","_col6","_col7","_col8","_col10"]
                                      <-Map 7 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_115]
                                          PartitionCols:_col1, _col2, _col4
                                          Select Operator [SEL_114] (rows=501694138 width=23)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Filter Operator [FIL_113] (rows=501694138 width=23)
                                              predicate:(ss_customer_sk is not null and ss_item_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null and ss_ticket_number is not null)
                                              TableScan [TS_6] (rows=575995635 width=23)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number","ss_quantity"]
                                      <-Map 9 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_118]
                                          PartitionCols:_col1, _col2, _col3
                                          Select Operator [SEL_117] (rows=53632139 width=19)
                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                            Filter Operator [FIL_116] (rows=53632139 width=19)
                                              predicate:(sr_customer_sk is not null and sr_item_sk is not null and sr_returned_date_sk is not null and sr_ticket_number is not null)
                                              TableScan [TS_9] (rows=57591150 width=19)
                                                default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_returned_date_sk","sr_item_sk","sr_customer_sk","sr_ticket_number","sr_return_quantity"]

