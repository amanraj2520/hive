PREHOOK: query: explain
with cs_ui as
 (select cs_item_sk
        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
  from catalog_sales
      ,catalog_returns
  where cs_item_sk = cr_item_sk
    and cs_order_number = cr_order_number
  group by cs_item_sk
  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
cross_sales as
 (select i_product_name product_name
     ,i_item_sk item_sk
     ,s_store_name store_name
     ,s_zip store_zip
     ,ad1.ca_street_number b_street_number
     ,ad1.ca_street_name b_streen_name
     ,ad1.ca_city b_city
     ,ad1.ca_zip b_zip
     ,ad2.ca_street_number c_street_number
     ,ad2.ca_street_name c_street_name
     ,ad2.ca_city c_city
     ,ad2.ca_zip c_zip
     ,d1.d_year as syear
     ,d2.d_year as fsyear
     ,d3.d_year s2year
     ,count(*) cnt
     ,sum(ss_wholesale_cost) s1
     ,sum(ss_list_price) s2
     ,sum(ss_coupon_amt) s3
  FROM   store_sales
        ,store_returns
        ,cs_ui
        ,date_dim d1
        ,date_dim d2
        ,date_dim d3
        ,store
        ,customer
        ,customer_demographics cd1
        ,customer_demographics cd2
        ,promotion
        ,household_demographics hd1
        ,household_demographics hd2
        ,customer_address ad1
        ,customer_address ad2
        ,income_band ib1
        ,income_band ib2
        ,item
  WHERE  ss_store_sk = s_store_sk AND
         ss_sold_date_sk = d1.d_date_sk AND
         ss_customer_sk = c_customer_sk AND
         ss_cdemo_sk= cd1.cd_demo_sk AND
         ss_hdemo_sk = hd1.hd_demo_sk AND
         ss_addr_sk = ad1.ca_address_sk and
         ss_item_sk = i_item_sk and
         ss_item_sk = sr_item_sk and
         ss_ticket_number = sr_ticket_number and
         ss_item_sk = cs_ui.cs_item_sk and
         c_current_cdemo_sk = cd2.cd_demo_sk AND
         c_current_hdemo_sk = hd2.hd_demo_sk AND
         c_current_addr_sk = ad2.ca_address_sk and
         c_first_sales_date_sk = d2.d_date_sk and
         c_first_shipto_date_sk = d3.d_date_sk and
         ss_promo_sk = p_promo_sk and
         hd1.hd_income_band_sk = ib1.ib_income_band_sk and
         hd2.hd_income_band_sk = ib2.ib_income_band_sk and
         cd1.cd_marital_status <> cd2.cd_marital_status and
         i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
         i_current_price between 35 and 35 + 10 and
         i_current_price between 35 + 1 and 35 + 15
group by i_product_name
       ,i_item_sk
       ,s_store_name
       ,s_zip
       ,ad1.ca_street_number
       ,ad1.ca_street_name
       ,ad1.ca_city
       ,ad1.ca_zip
       ,ad2.ca_street_number
       ,ad2.ca_street_name
       ,ad2.ca_city
       ,ad2.ca_zip
       ,d1.d_year
       ,d2.d_year
       ,d3.d_year
)
select cs1.product_name
     ,cs1.store_name
     ,cs1.store_zip
     ,cs1.b_street_number
     ,cs1.b_streen_name
     ,cs1.b_city
     ,cs1.b_zip
     ,cs1.c_street_number
     ,cs1.c_street_name
     ,cs1.c_city
     ,cs1.c_zip
     ,cs1.syear
     ,cs1.cnt
     ,cs1.s1
     ,cs1.s2
     ,cs1.s3
     ,cs2.s1
     ,cs2.s2
     ,cs2.s3
     ,cs2.syear
     ,cs2.cnt
from cross_sales cs1,cross_sales cs2
where cs1.item_sk=cs2.item_sk and
     cs1.syear = 2000 and
     cs2.syear = 2000 + 1 and
     cs2.cnt <= cs1.cnt and
     cs1.store_name = cs2.store_name and
     cs1.store_zip = cs2.store_zip
order by cs1.product_name
       ,cs1.store_name
       ,cs2.cnt
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@income_band
PREHOOK: Input: default@item
PREHOOK: Input: default@promotion
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with cs_ui as
 (select cs_item_sk
        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
  from catalog_sales
      ,catalog_returns
  where cs_item_sk = cr_item_sk
    and cs_order_number = cr_order_number
  group by cs_item_sk
  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
cross_sales as
 (select i_product_name product_name
     ,i_item_sk item_sk
     ,s_store_name store_name
     ,s_zip store_zip
     ,ad1.ca_street_number b_street_number
     ,ad1.ca_street_name b_streen_name
     ,ad1.ca_city b_city
     ,ad1.ca_zip b_zip
     ,ad2.ca_street_number c_street_number
     ,ad2.ca_street_name c_street_name
     ,ad2.ca_city c_city
     ,ad2.ca_zip c_zip
     ,d1.d_year as syear
     ,d2.d_year as fsyear
     ,d3.d_year s2year
     ,count(*) cnt
     ,sum(ss_wholesale_cost) s1
     ,sum(ss_list_price) s2
     ,sum(ss_coupon_amt) s3
  FROM   store_sales
        ,store_returns
        ,cs_ui
        ,date_dim d1
        ,date_dim d2
        ,date_dim d3
        ,store
        ,customer
        ,customer_demographics cd1
        ,customer_demographics cd2
        ,promotion
        ,household_demographics hd1
        ,household_demographics hd2
        ,customer_address ad1
        ,customer_address ad2
        ,income_band ib1
        ,income_band ib2
        ,item
  WHERE  ss_store_sk = s_store_sk AND
         ss_sold_date_sk = d1.d_date_sk AND
         ss_customer_sk = c_customer_sk AND
         ss_cdemo_sk= cd1.cd_demo_sk AND
         ss_hdemo_sk = hd1.hd_demo_sk AND
         ss_addr_sk = ad1.ca_address_sk and
         ss_item_sk = i_item_sk and
         ss_item_sk = sr_item_sk and
         ss_ticket_number = sr_ticket_number and
         ss_item_sk = cs_ui.cs_item_sk and
         c_current_cdemo_sk = cd2.cd_demo_sk AND
         c_current_hdemo_sk = hd2.hd_demo_sk AND
         c_current_addr_sk = ad2.ca_address_sk and
         c_first_sales_date_sk = d2.d_date_sk and
         c_first_shipto_date_sk = d3.d_date_sk and
         ss_promo_sk = p_promo_sk and
         hd1.hd_income_band_sk = ib1.ib_income_band_sk and
         hd2.hd_income_band_sk = ib2.ib_income_band_sk and
         cd1.cd_marital_status <> cd2.cd_marital_status and
         i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
         i_current_price between 35 and 35 + 10 and
         i_current_price between 35 + 1 and 35 + 15
group by i_product_name
       ,i_item_sk
       ,s_store_name
       ,s_zip
       ,ad1.ca_street_number
       ,ad1.ca_street_name
       ,ad1.ca_city
       ,ad1.ca_zip
       ,ad2.ca_street_number
       ,ad2.ca_street_name
       ,ad2.ca_city
       ,ad2.ca_zip
       ,d1.d_year
       ,d2.d_year
       ,d3.d_year
)
select cs1.product_name
     ,cs1.store_name
     ,cs1.store_zip
     ,cs1.b_street_number
     ,cs1.b_streen_name
     ,cs1.b_city
     ,cs1.b_zip
     ,cs1.c_street_number
     ,cs1.c_street_name
     ,cs1.c_city
     ,cs1.c_zip
     ,cs1.syear
     ,cs1.cnt
     ,cs1.s1
     ,cs1.s2
     ,cs1.s3
     ,cs2.s1
     ,cs2.s2
     ,cs2.s3
     ,cs2.syear
     ,cs2.cnt
from cross_sales cs1,cross_sales cs2
where cs1.item_sk=cs2.item_sk and
     cs1.syear = 2000 and
     cs2.syear = 2000 + 1 and
     cs2.cnt <= cs1.cnt and
     cs1.store_name = cs2.store_name and
     cs1.store_zip = cs2.store_zip
order by cs1.product_name
       ,cs1.store_name
       ,cs2.cnt
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@income_band
POSTHOOK: Input: default@item
POSTHOOK: Input: default@promotion
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 14 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 27 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 13 <- Map 43 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE)
Reducer 16 <- Map 15 (SIMPLE_EDGE), Reducer 34 (SIMPLE_EDGE)
Reducer 17 <- Map 37 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE), Reducer 29 (SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (SIMPLE_EDGE), Reducer 40 (ONE_TO_ONE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 15 (SIMPLE_EDGE)
Reducer 20 <- Map 42 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Map 31 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Map 15 (SIMPLE_EDGE), Reducer 34 (SIMPLE_EDGE)
Reducer 23 <- Map 37 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Reducer 23 (SIMPLE_EDGE), Reducer 29 (SIMPLE_EDGE)
Reducer 25 <- Reducer 24 (SIMPLE_EDGE), Reducer 40 (ONE_TO_ONE_EDGE)
Reducer 26 <- Map 42 (SIMPLE_EDGE), Reducer 25 (SIMPLE_EDGE)
Reducer 27 <- Map 31 (SIMPLE_EDGE), Reducer 26 (SIMPLE_EDGE)
Reducer 29 <- Map 28 (SIMPLE_EDGE), Map 30 (SIMPLE_EDGE)
Reducer 3 <- Map 15 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 33 <- Map 32 (SIMPLE_EDGE), Map 35 (SIMPLE_EDGE)
Reducer 34 <- Map 36 (SIMPLE_EDGE), Reducer 33 (SIMPLE_EDGE)
Reducer 39 <- Map 38 (SIMPLE_EDGE), Map 41 (SIMPLE_EDGE)
Reducer 4 <- Reducer 29 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 40 <- Reducer 39 (SIMPLE_EDGE)
Reducer 5 <- Map 31 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Map 43 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 21 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 43 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 11 vectorized
      File Output Operator [FS_674]
        Select Operator [SEL_673] (rows=273897192 width=88)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20"]
        <-Reducer 10 [SIMPLE_EDGE]
          SHUFFLE [RS_259]
            Select Operator [SEL_258] (rows=273897192 width=88)
              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18"]
              Filter Operator [FIL_257] (rows=273897192 width=88)
                predicate:(_col19 <= _col12)
                Merge Join Operator [MERGEJOIN_609] (rows=821691577 width=88)
                  Conds:RS_669._col2, _col1, _col3=RS_672._col1, _col0, _col2(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col19","_col20","_col21","_col22"]
                <-Reducer 14 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_672]
                    PartitionCols:_col1, _col0, _col2
                    Select Operator [SEL_671] (rows=746992327 width=88)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                      Group By Operator [GBY_670] (rows=746992327 width=88)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9, KEY._col10, KEY._col11, KEY._col12, KEY._col13
                      <-Reducer 13 [SIMPLE_EDGE]
                        SHUFFLE [RS_251]
                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                          Group By Operator [GBY_250] (rows=1493984654 width=88)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count()","sum(_col45)","sum(_col46)","sum(_col47)"],keys:_col26, _col48, _col27, _col7, _col9, _col14, _col15, _col16, _col17, _col21, _col22, _col23, _col24, _col51
                            Select Operator [SEL_249] (rows=1493984654 width=88)
                              Output:["_col7","_col9","_col14","_col15","_col16","_col17","_col21","_col22","_col23","_col24","_col26","_col27","_col45","_col46","_col47","_col48","_col51"]
                              Filter Operator [FIL_248] (rows=1493984654 width=88)
                                predicate:(_col56 <> _col19)
                                Merge Join Operator [MERGEJOIN_608] (rows=1493984654 width=88)
                                  Conds:RS_245._col39=RS_638._col0(Inner),Output:["_col7","_col9","_col14","_col15","_col16","_col17","_col19","_col21","_col22","_col23","_col24","_col26","_col27","_col45","_col46","_col47","_col48","_col51","_col56"]
                                <-Map 43 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_638]
                                    PartitionCols:_col0
                                    Select Operator [SEL_635] (rows=1861800 width=385)
                                      Output:["_col0","_col1"]
                                      Filter Operator [FIL_634] (rows=1861800 width=385)
                                        predicate:cd_demo_sk is not null
                                        TableScan [TS_97] (rows=1861800 width=385)
                                          default@customer_demographics,cd1,Tbl:COMPLETE,Col:NONE,Output:["cd_demo_sk","cd_marital_status"]
                                <-Reducer 12 [SIMPLE_EDGE]
                                  SHUFFLE [RS_245]
                                    PartitionCols:_col39
                                    Merge Join Operator [MERGEJOIN_607] (rows=1358167838 width=88)
                                      Conds:RS_242._col0=RS_243._col18(Inner),Output:["_col7","_col9","_col14","_col15","_col16","_col17","_col19","_col21","_col22","_col23","_col24","_col26","_col27","_col39","_col45","_col46","_col47","_col48","_col51"]
                                    <-Reducer 6 [SIMPLE_EDGE]
                                      SHUFFLE [RS_242]
                                        PartitionCols:_col0
                                        Merge Join Operator [MERGEJOIN_578] (rows=128840811 width=860)
                                          Conds:RS_112._col1=RS_637._col0(Inner),Output:["_col0","_col7","_col9","_col14","_col15","_col16","_col17","_col19"]
                                        <-Map 43 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_637]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_635]
                                        <-Reducer 5 [SIMPLE_EDGE]
                                          SHUFFLE [RS_112]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_577] (rows=117128008 width=860)
                                              Conds:RS_109._col3=RS_631._col0(Inner),Output:["_col0","_col1","_col7","_col9","_col14","_col15","_col16","_col17"]
                                            <-Map 31 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_631]
                                                PartitionCols:_col0
                                                Select Operator [SEL_630] (rows=40000000 width=1014)
                                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                                  Filter Operator [FIL_629] (rows=40000000 width=1014)
                                                    predicate:ca_address_sk is not null
                                                    TableScan [TS_19] (rows=40000000 width=1014)
                                                      default@customer_address,ad2,Tbl:COMPLETE,Col:NONE,Output:["ca_address_sk","ca_street_number","ca_street_name","ca_city","ca_zip"]
                                            <-Reducer 4 [SIMPLE_EDGE]
                                              SHUFFLE [RS_109]
                                                PartitionCols:_col3
                                                Merge Join Operator [MERGEJOIN_576] (rows=106480005 width=860)
                                                  Conds:RS_106._col2=RS_107._col0(Inner),Output:["_col0","_col1","_col3","_col7","_col9"]
                                                <-Reducer 29 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_107]
                                                    PartitionCols:_col0
                                                    Merge Join Operator [MERGEJOIN_575] (rows=7920 width=107)
                                                      Conds:RS_625._col1=RS_628._col0(Inner),Output:["_col0"]
                                                    <-Map 28 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_625]
                                                        PartitionCols:_col1
                                                        Select Operator [SEL_624] (rows=7200 width=107)
                                                          Output:["_col0","_col1"]
                                                          Filter Operator [FIL_623] (rows=7200 width=107)
                                                            predicate:(hd_demo_sk is not null and hd_income_band_sk is not null)
                                                            TableScan [TS_9] (rows=7200 width=107)
                                                              default@household_demographics,hd2,Tbl:COMPLETE,Col:NONE,Output:["hd_demo_sk","hd_income_band_sk"]
                                                    <-Map 30 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_628]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_627] (rows=20 width=12)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_626] (rows=20 width=12)
                                                            predicate:ib_income_band_sk is not null
                                                            TableScan [TS_12] (rows=20 width=12)
                                                              default@income_band,ib2,Tbl:COMPLETE,Col:NONE,Output:["ib_income_band_sk"]
                                                <-Reducer 3 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_106]
                                                    PartitionCols:_col2
                                                    Merge Join Operator [MERGEJOIN_574] (rows=96800003 width=860)
                                                      Conds:RS_103._col4=RS_620._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col7","_col9"]
                                                    <-Map 15 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_620]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_616] (rows=73049 width=1119)
                                                          Output:["_col0","_col1"]
                                                          Filter Operator [FIL_613] (rows=73049 width=1119)
                                                            predicate:d_date_sk is not null
                                                            TableScan [TS_3] (rows=73049 width=1119)
                                                              default@date_dim,d2,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                                                    <-Reducer 2 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_103]
                                                        PartitionCols:_col4
                                                        Merge Join Operator [MERGEJOIN_573] (rows=88000001 width=860)
                                                          Conds:RS_612._col5=RS_619._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col7"]
                                                        <-Map 15 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_619]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_616]
                                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_612]
                                                            PartitionCols:_col5
                                                            Select Operator [SEL_611] (rows=80000000 width=860)
                                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                              Filter Operator [FIL_610] (rows=80000000 width=860)
                                                                predicate:(c_current_addr_sk is not null and c_current_cdemo_sk is not null and c_current_hdemo_sk is not null and c_customer_sk is not null and c_first_sales_date_sk is not null and c_first_shipto_date_sk is not null)
                                                                TableScan [TS_0] (rows=80000000 width=860)
                                                                  default@customer,customer,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk","c_current_cdemo_sk","c_current_hdemo_sk","c_current_addr_sk","c_first_shipto_date_sk","c_first_sales_date_sk"]
                                    <-Reducer 27 [SIMPLE_EDGE]
                                      SHUFFLE [RS_243]
                                        PartitionCols:_col18
                                        Select Operator [SEL_223] (rows=1234698008 width=88)
                                          Output:["_col1","_col2","_col3","_col4","_col6","_col7","_col18","_col19","_col25","_col26","_col27","_col28","_col31"]
                                          Merge Join Operator [MERGEJOIN_606] (rows=1234698008 width=88)
                                            Conds:RS_220._col13=RS_633._col0(Inner),Output:["_col10","_col11","_col17","_col18","_col19","_col20","_col23","_col28","_col29","_col31","_col32","_col33","_col34"]
                                          <-Map 31 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_633]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_630]
                                          <-Reducer 26 [SIMPLE_EDGE]
                                            SHUFFLE [RS_220]
                                              PartitionCols:_col13
                                              Merge Join Operator [MERGEJOIN_605] (rows=1122452711 width=88)
                                                Conds:RS_217._col14=RS_666._col0(Inner),Output:["_col10","_col11","_col13","_col17","_col18","_col19","_col20","_col23","_col28","_col29"]
                                              <-Map 42 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_666]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_664] (rows=1704 width=1910)
                                                    Output:["_col0","_col1","_col2"]
                                                    Filter Operator [FIL_663] (rows=1704 width=1910)
                                                      predicate:(s_store_name is not null and s_store_sk is not null and s_zip is not null)
                                                      TableScan [TS_75] (rows=1704 width=1910)
                                                        default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_store_name","s_zip"]
                                              <-Reducer 25 [SIMPLE_EDGE]
                                                SHUFFLE [RS_217]
                                                  PartitionCols:_col14
                                                  Merge Join Operator [MERGEJOIN_604] (rows=1020411534 width=88)
                                                    Conds:RS_214._col9=RS_662._col0(Inner),Output:["_col10","_col11","_col13","_col14","_col17","_col18","_col19","_col20","_col23"]
                                                  <-Reducer 40 [ONE_TO_ONE_EDGE] vectorized
                                                    FORWARD [RS_662]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_660] (rows=52798137 width=135)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_659] (rows=52798137 width=135)
                                                          predicate:(_col1 > (2 * _col2))
                                                          Group By Operator [GBY_658] (rows=158394413 width=135)
                                                            Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                                          <-Reducer 39 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_71]
                                                              PartitionCols:_col0
                                                              Group By Operator [GBY_70] (rows=316788826 width=135)
                                                                Output:["_col0","_col1","_col2"],aggregations:["sum(_col1)","sum(_col2)"],keys:_col0
                                                                Select Operator [SEL_68] (rows=316788826 width=135)
                                                                  Output:["_col0","_col1","_col2"]
                                                                  Merge Join Operator [MERGEJOIN_584] (rows=316788826 width=135)
                                                                    Conds:RS_654._col0, _col1=RS_657._col0, _col1(Inner),Output:["_col0","_col2","_col5","_col6","_col7"]
                                                                  <-Map 38 [SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_654]
                                                                      PartitionCols:_col0, _col1
                                                                      Select Operator [SEL_653] (rows=287989836 width=135)
                                                                        Output:["_col0","_col1","_col2"]
                                                                        Filter Operator [FIL_652] (rows=287989836 width=135)
                                                                          predicate:(cs_item_sk is not null and cs_order_number is not null)
                                                                          TableScan [TS_59] (rows=287989836 width=135)
                                                                            default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_item_sk","cs_order_number","cs_ext_list_price"]
                                                                  <-Map 41 [SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_657]
                                                                      PartitionCols:_col0, _col1
                                                                      Select Operator [SEL_656] (rows=28798881 width=106)
                                                                        Output:["_col0","_col1","_col2","_col3","_col4"]
                                                                        Filter Operator [FIL_655] (rows=28798881 width=106)
                                                                          predicate:(cr_item_sk is not null and cr_order_number is not null)
                                                                          TableScan [TS_62] (rows=28798881 width=106)
                                                                            default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:NONE,Output:["cr_item_sk","cr_order_number","cr_refunded_cash","cr_reversed_charge","cr_store_credit"]
                                                  <-Reducer 24 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_214]
                                                      PartitionCols:_col9
                                                      Merge Join Operator [MERGEJOIN_603] (rows=927646829 width=88)
                                                        Conds:RS_211._col0=RS_212._col9(Inner),Output:["_col9","_col10","_col11","_col13","_col14","_col17","_col18","_col19","_col20","_col23"]
                                                      <-Reducer 29 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_211]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Merge Join Operator [MERGEJOIN_575]
                                                      <-Reducer 23 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_212]
                                                          PartitionCols:_col9
                                                          Select Operator [SEL_185] (rows=843315281 width=88)
                                                            Output:["_col6","_col7","_col8","_col9","_col10","_col11","_col14","_col15","_col16","_col17","_col20"]
                                                            Merge Join Operator [MERGEJOIN_601] (rows=843315281 width=88)
                                                              Conds:RS_182._col7=RS_651._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col9","_col10","_col11","_col12","_col15"]
                                                            <-Map 37 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_651]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_649] (rows=2300 width=1179)
                                                                  Output:["_col0"]
                                                                  Filter Operator [FIL_648] (rows=2300 width=1179)
                                                                    predicate:p_promo_sk is not null
                                                                    TableScan [TS_43] (rows=2300 width=1179)
                                                                      default@promotion,promotion,Tbl:COMPLETE,Col:NONE,Output:["p_promo_sk"]
                                                            <-Reducer 22 [SIMPLE_EDGE]
                                                              SHUFFLE [RS_182]
                                                                PartitionCols:_col7
                                                                Merge Join Operator [MERGEJOIN_600] (rows=766650239 width=88)
                                                                  Conds:RS_179._col0=RS_622._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col9","_col10","_col11","_col12","_col15"]
                                                                <-Map 15 [SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_622]
                                                                    PartitionCols:_col0
                                                                    Select Operator [SEL_618] (rows=36524 width=1119)
                                                                      Output:["_col0"]
                                                                      Filter Operator [FIL_615] (rows=36524 width=1119)
                                                                        predicate:((d_year = 2001) and d_date_sk is not null)
                                                                         Please refer to the previous TableScan [TS_3]
                                                                <-Reducer 34 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_179]
                                                                    PartitionCols:_col0
                                                                    Merge Join Operator [MERGEJOIN_581] (rows=696954748 width=88)
                                                                      Conds:RS_49._col1, _col8=RS_647._col0, _col1(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col9","_col10","_col11","_col12","_col15"]
                                                                    <-Map 36 [SIMPLE_EDGE] vectorized
                                                                      SHUFFLE [RS_647]
                                                                        PartitionCols:_col0, _col1
                                                                        Select Operator [SEL_646] (rows=57591150 width=77)
                                                                          Output:["_col0","_col1"]
                                                                          Filter Operator [FIL_645] (rows=57591150 width=77)
                                                                            predicate:(sr_item_sk is not null and sr_ticket_number is not null)
                                                                            TableScan [TS_37] (rows=57591150 width=77)
                                                                              default@store_returns,store_returns,Tbl:COMPLETE,Col:NONE,Output:["sr_item_sk","sr_ticket_number"]
                                                                    <-Reducer 33 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_49]
                                                                        PartitionCols:_col1, _col8
                                                                        Merge Join Operator [MERGEJOIN_580] (rows=633595212 width=88)
                                                                          Conds:RS_641._col1=RS_644._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col15"]
                                                                        <-Map 32 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_641]
                                                                            PartitionCols:_col1
                                                                            Select Operator [SEL_640] (rows=575995635 width=88)
                                                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                                                              Filter Operator [FIL_639] (rows=575995635 width=88)
                                                                                predicate:(ss_addr_sk is not null and ss_cdemo_sk is not null and ss_customer_sk is not null and ss_hdemo_sk is not null and ss_item_sk is not null and ss_promo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null and ss_ticket_number is not null)
                                                                                TableScan [TS_31] (rows=575995635 width=88)
                                                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_cdemo_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_promo_sk","ss_ticket_number","ss_wholesale_cost","ss_list_price","ss_coupon_amt"]
                                                                        <-Map 35 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_644]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_643] (rows=2851 width=1436)
                                                                              Output:["_col0","_col3"]
                                                                              Filter Operator [FIL_642] (rows=2851 width=1436)
                                                                                predicate:((i_color) IN ('maroon', 'burnished', 'dim', 'steel', 'navajo', 'chocolate') and i_current_price BETWEEN 35 AND 45 and i_current_price BETWEEN 36 AND 50 and i_item_sk is not null)
                                                                                TableScan [TS_34] (rows=462000 width=1436)
                                                                                  default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_current_price","i_color","i_product_name"]
                <-Reducer 9 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_669]
                    PartitionCols:_col2, _col1, _col3
                    Select Operator [SEL_668] (rows=746992327 width=88)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                      Group By Operator [GBY_667] (rows=746992327 width=88)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9, KEY._col10, KEY._col11, KEY._col12, KEY._col13
                      <-Reducer 8 [SIMPLE_EDGE]
                        SHUFFLE [RS_124]
                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                          Group By Operator [GBY_123] (rows=1493984654 width=88)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count()","sum(_col45)","sum(_col46)","sum(_col47)"],keys:_col26, _col48, _col27, _col7, _col9, _col14, _col15, _col16, _col17, _col21, _col22, _col23, _col24, _col51
                            Select Operator [SEL_122] (rows=1493984654 width=88)
                              Output:["_col7","_col9","_col14","_col15","_col16","_col17","_col21","_col22","_col23","_col24","_col26","_col27","_col45","_col46","_col47","_col48","_col51"]
                              Filter Operator [FIL_121] (rows=1493984654 width=88)
                                predicate:(_col56 <> _col19)
                                Merge Join Operator [MERGEJOIN_590] (rows=1493984654 width=88)
                                  Conds:RS_118._col39=RS_636._col0(Inner),Output:["_col7","_col9","_col14","_col15","_col16","_col17","_col19","_col21","_col22","_col23","_col24","_col26","_col27","_col45","_col46","_col47","_col48","_col51","_col56"]
                                <-Map 43 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_636]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_635]
                                <-Reducer 7 [SIMPLE_EDGE]
                                  SHUFFLE [RS_118]
                                    PartitionCols:_col39
                                    Merge Join Operator [MERGEJOIN_589] (rows=1358167838 width=88)
                                      Conds:RS_115._col0=RS_116._col18(Inner),Output:["_col7","_col9","_col14","_col15","_col16","_col17","_col19","_col21","_col22","_col23","_col24","_col26","_col27","_col39","_col45","_col46","_col47","_col48","_col51"]
                                    <-Reducer 6 [SIMPLE_EDGE]
                                      SHUFFLE [RS_115]
                                        PartitionCols:_col0
                                         Please refer to the previous Merge Join Operator [MERGEJOIN_578]
                                    <-Reducer 21 [SIMPLE_EDGE]
                                      SHUFFLE [RS_116]
                                        PartitionCols:_col18
                                        Select Operator [SEL_96] (rows=1234698008 width=88)
                                          Output:["_col1","_col2","_col3","_col4","_col6","_col7","_col18","_col19","_col25","_col26","_col27","_col28","_col31"]
                                          Merge Join Operator [MERGEJOIN_588] (rows=1234698008 width=88)
                                            Conds:RS_93._col13=RS_632._col0(Inner),Output:["_col10","_col11","_col17","_col18","_col19","_col20","_col23","_col28","_col29","_col31","_col32","_col33","_col34"]
                                          <-Map 31 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_632]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_630]
                                          <-Reducer 20 [SIMPLE_EDGE]
                                            SHUFFLE [RS_93]
                                              PartitionCols:_col13
                                              Merge Join Operator [MERGEJOIN_587] (rows=1122452711 width=88)
                                                Conds:RS_90._col14=RS_665._col0(Inner),Output:["_col10","_col11","_col13","_col17","_col18","_col19","_col20","_col23","_col28","_col29"]
                                              <-Map 42 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_665]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_664]
                                              <-Reducer 19 [SIMPLE_EDGE]
                                                SHUFFLE [RS_90]
                                                  PartitionCols:_col14
                                                  Merge Join Operator [MERGEJOIN_586] (rows=1020411534 width=88)
                                                    Conds:RS_87._col9=RS_661._col0(Inner),Output:["_col10","_col11","_col13","_col14","_col17","_col18","_col19","_col20","_col23"]
                                                  <-Reducer 40 [ONE_TO_ONE_EDGE] vectorized
                                                    FORWARD [RS_661]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_660]
                                                  <-Reducer 18 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_87]
                                                      PartitionCols:_col9
                                                      Merge Join Operator [MERGEJOIN_585] (rows=927646829 width=88)
                                                        Conds:RS_84._col0=RS_85._col9(Inner),Output:["_col9","_col10","_col11","_col13","_col14","_col17","_col18","_col19","_col20","_col23"]
                                                      <-Reducer 29 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_84]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Merge Join Operator [MERGEJOIN_575]
                                                      <-Reducer 17 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_85]
                                                          PartitionCols:_col9
                                                          Select Operator [SEL_58] (rows=843315281 width=88)
                                                            Output:["_col6","_col7","_col8","_col9","_col10","_col11","_col14","_col15","_col16","_col17","_col20"]
                                                            Merge Join Operator [MERGEJOIN_583] (rows=843315281 width=88)
                                                              Conds:RS_55._col7=RS_650._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col9","_col10","_col11","_col12","_col15"]
                                                            <-Map 37 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_650]
                                                                PartitionCols:_col0
                                                                 Please refer to the previous Select Operator [SEL_649]
                                                            <-Reducer 16 [SIMPLE_EDGE]
                                                              SHUFFLE [RS_55]
                                                                PartitionCols:_col7
                                                                Merge Join Operator [MERGEJOIN_582] (rows=766650239 width=88)
                                                                  Conds:RS_52._col0=RS_621._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col9","_col10","_col11","_col12","_col15"]
                                                                <-Map 15 [SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_621]
                                                                    PartitionCols:_col0
                                                                    Select Operator [SEL_617] (rows=36524 width=1119)
                                                                      Output:["_col0"]
                                                                      Filter Operator [FIL_614] (rows=36524 width=1119)
                                                                        predicate:((d_year = 2000) and d_date_sk is not null)
                                                                         Please refer to the previous TableScan [TS_3]
                                                                <-Reducer 34 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_52]
                                                                    PartitionCols:_col0
                                                                     Please refer to the previous Merge Join Operator [MERGEJOIN_581]

