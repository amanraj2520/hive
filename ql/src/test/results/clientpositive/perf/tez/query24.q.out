Warning: Shuffle Join MERGEJOIN[154][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 6' is a cross product
PREHOOK: query: explain
with ssales as
(select c_last_name
      ,c_first_name
      ,s_store_name
      ,ca_state
      ,s_state
      ,i_color
      ,i_current_price
      ,i_manager_id
      ,i_units
      ,i_size
      ,sum(ss_sales_price) netpaid
from store_sales
    ,store_returns
    ,store
    ,item
    ,customer
    ,customer_address
where ss_ticket_number = sr_ticket_number
  and ss_item_sk = sr_item_sk
  and ss_customer_sk = c_customer_sk
  and ss_item_sk = i_item_sk
  and ss_store_sk = s_store_sk
  and c_birth_country = upper(ca_country)
  and s_zip = ca_zip
and s_market_id=7
group by c_last_name
        ,c_first_name
        ,s_store_name
        ,ca_state
        ,s_state
        ,i_color
        ,i_current_price
        ,i_manager_id
        ,i_units
        ,i_size)
select c_last_name
      ,c_first_name
      ,s_store_name
      ,sum(netpaid) paid
from ssales
where i_color = 'orchid'
group by c_last_name
        ,c_first_name
        ,s_store_name
having sum(netpaid) > (select 0.05*avg(netpaid)
                                 from ssales)
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ssales as
(select c_last_name
      ,c_first_name
      ,s_store_name
      ,ca_state
      ,s_state
      ,i_color
      ,i_current_price
      ,i_manager_id
      ,i_units
      ,i_size
      ,sum(ss_sales_price) netpaid
from store_sales
    ,store_returns
    ,store
    ,item
    ,customer
    ,customer_address
where ss_ticket_number = sr_ticket_number
  and ss_item_sk = sr_item_sk
  and ss_customer_sk = c_customer_sk
  and ss_item_sk = i_item_sk
  and ss_store_sk = s_store_sk
  and c_birth_country = upper(ca_country)
  and s_zip = ca_zip
and s_market_id=7
group by c_last_name
        ,c_first_name
        ,s_store_name
        ,ca_state
        ,s_state
        ,i_color
        ,i_current_price
        ,i_manager_id
        ,i_units
        ,i_size)
select c_last_name
      ,c_first_name
      ,s_store_name
      ,sum(netpaid) paid
from ssales
where i_color = 'orchid'
group by c_last_name
        ,c_first_name
        ,s_store_name
having sum(netpaid) > (select 0.05*avg(netpaid)
                                 from ssales)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Map 17 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 13 (SIMPLE_EDGE), Map 14 (CUSTOM_SIMPLE_EDGE), Map 15 (BROADCAST_EDGE)
Reducer 3 <- Map 16 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 17 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 12 (XPROD_EDGE), Reducer 5 (XPROD_EDGE)
Reducer 7 <- Map 1 (SIMPLE_EDGE), Map 13 (SIMPLE_EDGE), Map 15 (BROADCAST_EDGE)
Reducer 8 <- Map 16 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Map 14 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 6
      File Output Operator [FS_91]
        Select Operator [SEL_90] (rows=17956405 width=380)
          Output:["_col0","_col1","_col2","_col3"]
          Filter Operator [FIL_89] (rows=17956405 width=492)
            predicate:(_col3 > _col4)
            Merge Join Operator [MERGEJOIN_154] (rows=53869216 width=492)
              Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4"]
            <-Reducer 12 [XPROD_EDGE] vectorized
              XPROD_EDGE [RS_195]
                Select Operator [SEL_194] (rows=1 width=112)
                  Output:["_col0"]
                  Group By Operator [GBY_193] (rows=1 width=120)
                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                  <-Reducer 11 [CUSTOM_SIMPLE_EDGE] vectorized
                    PARTITION_ONLY_SHUFFLE [RS_192]
                      Group By Operator [GBY_191] (rows=1 width=120)
                        Output:["_col0","_col1"],aggregations:["sum(_col10)","count(_col10)"]
                        Select Operator [SEL_190] (rows=1707568863031 width=932)
                          Output:["_col10"]
                          Group By Operator [GBY_189] (rows=1707568863031 width=932)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9
                          <-Reducer 10 [SIMPLE_EDGE]
                            SHUFFLE [RS_78]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                              Group By Operator [GBY_77] (rows=1707568863031 width=932)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"],aggregations:["sum(_col4)"],keys:_col22, _col17, _col18, _col19, _col20, _col21, _col13, _col14, _col8, _col10
                                Merge Join Operator [MERGEJOIN_153] (rows=1707568863031 width=932)
                                  Conds:RS_73._col11, _col15=RS_183._col1, upper(_col2)(Inner),Output:["_col4","_col8","_col10","_col13","_col14","_col17","_col18","_col19","_col20","_col21","_col22"]
                                <-Map 17 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_183]
                                    PartitionCols:_col1, upper(_col2)
                                    Select Operator [SEL_181] (rows=40000000 width=272)
                                      Output:["_col0","_col1","_col2"]
                                      Filter Operator [FIL_180] (rows=40000000 width=272)
                                        predicate:(ca_zip is not null and upper(ca_country) is not null)
                                        TableScan [TS_15] (rows=40000000 width=272)
                                          default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_state","ca_zip","ca_country"]
                                <-Reducer 9 [SIMPLE_EDGE]
                                  SHUFFLE [RS_73]
                                    PartitionCols:_col11, _col15
                                    Merge Join Operator [MERGEJOIN_152] (rows=432911396 width=1021)
                                      Conds:RS_70._col0=RS_171._col0(Inner),Output:["_col4","_col8","_col10","_col11","_col13","_col14","_col15","_col17","_col18","_col19","_col20","_col21"]
                                    <-Map 14 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_171]
                                        PartitionCols:_col0
                                        Select Operator [SEL_169] (rows=462000 width=384)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                          Filter Operator [FIL_167] (rows=462000 width=384)
                                            predicate:i_item_sk is not null
                                            TableScan [TS_6] (rows=462000 width=384)
                                              default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_current_price","i_size","i_color","i_units","i_manager_id"]
                                    <-Reducer 8 [SIMPLE_EDGE]
                                      SHUFFLE [RS_70]
                                        PartitionCols:_col0
                                        Merge Join Operator [MERGEJOIN_151] (rows=432911396 width=644)
                                          Conds:RS_67._col1=RS_179._col0(Inner),Output:["_col0","_col4","_col8","_col10","_col11","_col13","_col14","_col15"]
                                        <-Map 16 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_179]
                                            PartitionCols:_col0
                                            Select Operator [SEL_177] (rows=80000000 width=276)
                                              Output:["_col0","_col1","_col2","_col3"]
                                              Filter Operator [FIL_176] (rows=80000000 width=276)
                                                predicate:(c_birth_country is not null and c_customer_sk is not null)
                                                TableScan [TS_12] (rows=80000000 width=276)
                                                  default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_first_name","c_last_name","c_birth_country"]
                                        <-Reducer 7 [SIMPLE_EDGE]
                                          SHUFFLE [RS_67]
                                            PartitionCols:_col1
                                            Map Join Operator [MAPJOIN_150] (rows=432911396 width=376)
                                              Conds:MERGEJOIN_149._col2=RS_175._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col4","_col8","_col10","_col11"]
                                            <-Map 15 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_175]
                                                PartitionCols:_col0
                                                Select Operator [SEL_173] (rows=155 width=271)
                                                  Output:["_col0","_col1","_col3","_col4"]
                                                  Filter Operator [FIL_172] (rows=155 width=271)
                                                    predicate:((s_market_id = 7) and s_store_sk is not null and s_zip is not null)
                                                    TableScan [TS_9] (rows=1704 width=270)
                                                      default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_name","s_market_id","s_state","s_zip"]
                                            <-Merge Join Operator [MERGEJOIN_149] (rows=589664173 width=119)
                                                Conds:RS_161._col0, _col3=RS_165._col0, _col1(Inner),Output:["_col0","_col1","_col2","_col4"]
                                              <-Map 1 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_161]
                                                  PartitionCols:_col0, _col3
                                                  Select Operator [SEL_159] (rows=525333486 width=122)
                                                    Output:["_col0","_col1","_col2","_col3","_col4"]
                                                    Filter Operator [FIL_158] (rows=525333486 width=122)
                                                      predicate:(ss_customer_sk is not null and ss_item_sk is not null and ss_store_sk is not null and ss_ticket_number is not null)
                                                      TableScan [TS_0] (rows=575995635 width=122)
                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number","ss_sales_price"]
                                              <-Map 13 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_165]
                                                  PartitionCols:_col0, _col1
                                                  Select Operator [SEL_163] (rows=57591150 width=8)
                                                    Output:["_col0","_col1"]
                                                    Filter Operator [FIL_162] (rows=57591150 width=8)
                                                      predicate:(sr_item_sk is not null and sr_ticket_number is not null)
                                                      TableScan [TS_3] (rows=57591150 width=8)
                                                        default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number"]
            <-Reducer 5 [XPROD_EDGE] vectorized
              XPROD_EDGE [RS_188]
                Select Operator [SEL_187] (rows=53869216 width=380)
                  Output:["_col0","_col1","_col2","_col3"]
                  Group By Operator [GBY_186] (rows=53869216 width=380)
                    Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col9)"],keys:_col1, _col2, _col7
                    Select Operator [SEL_185] (rows=249025109949 width=843)
                      Output:["_col1","_col2","_col7","_col9"]
                      Group By Operator [GBY_184] (rows=249025109949 width=843)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8
                      <-Reducer 4 [SIMPLE_EDGE]
                        SHUFFLE [RS_35]
                          PartitionCols:_col0, _col1, _col2
                          Group By Operator [GBY_34] (rows=249025109949 width=843)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"],aggregations:["sum(_col4)"],keys:_col19, _col20, _col14, _col22, _col8, _col9, _col11, _col12, _col16
                            Merge Join Operator [MERGEJOIN_148] (rows=249025109949 width=843)
                              Conds:RS_30._col17, _col21=RS_182._col1, upper(_col2)(Inner),Output:["_col4","_col8","_col9","_col11","_col12","_col14","_col16","_col19","_col20","_col22"]
                            <-Map 17 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_182]
                                PartitionCols:_col1, upper(_col2)
                                 Please refer to the previous Select Operator [SEL_181]
                            <-Reducer 3 [SIMPLE_EDGE]
                              SHUFFLE [RS_30]
                                PartitionCols:_col17, _col21
                                Merge Join Operator [MERGEJOIN_147] (rows=63134091 width=897)
                                  Conds:RS_27._col1=RS_178._col0(Inner),Output:["_col4","_col8","_col9","_col11","_col12","_col14","_col16","_col17","_col19","_col20","_col21"]
                                <-Map 16 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_178]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_177]
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_27]
                                    PartitionCols:_col1
                                    Map Join Operator [MAPJOIN_146] (rows=63134091 width=627)
                                      Conds:MAPJOIN_145._col2=RS_174._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col4","_col8","_col9","_col11","_col12","_col14","_col16","_col17"]
                                    <-Map 15 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_174]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_173]
                                    <-Map Join Operator [MAPJOIN_145] (rows=85994297 width=379)
                                        BucketMapJoin:true,Conds:MERGEJOIN_144._col0=RS_170._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col4","_col8","_col9","_col11","_col12"]
                                      <-Map 14 [CUSTOM_SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_170]
                                          PartitionCols:_col0
                                          Select Operator [SEL_168] (rows=7000 width=385)
                                            Output:["_col0","_col1","_col2","_col4","_col5"]
                                            Filter Operator [FIL_166] (rows=7000 width=384)
                                              predicate:((i_color = 'orchid') and i_item_sk is not null)
                                               Please refer to the previous TableScan [TS_6]
                                      <-Merge Join Operator [MERGEJOIN_144] (rows=589664173 width=119)
                                          Conds:RS_160._col0, _col3=RS_164._col0, _col1(Inner),Output:["_col0","_col1","_col2","_col4"]
                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_160]
                                            PartitionCols:_col0, _col3
                                             Please refer to the previous Select Operator [SEL_159]
                                        <-Map 13 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_164]
                                            PartitionCols:_col0, _col1
                                             Please refer to the previous Select Operator [SEL_163]

