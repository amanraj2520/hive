Warning: Shuffle Join MERGEJOIN[903][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 5' is a cross product
Warning: Shuffle Join MERGEJOIN[916][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 12' is a cross product
Warning: Shuffle Join MERGEJOIN[929][tables = [$hdt$_2, $hdt$_3, $hdt$_1]] in Stage 'Reducer 16' is a cross product
PREHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 11 <- Union 10 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (CUSTOM_SIMPLE_EDGE), Reducer 27 (CUSTOM_SIMPLE_EDGE), Reducer 52 (CUSTOM_SIMPLE_EDGE), Union 6 (CONTAINS)
Reducer 13 <- Map 1 (SIMPLE_EDGE), Map 86 (SIMPLE_EDGE), Union 14 (CONTAINS)
Reducer 15 <- Union 14 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (CUSTOM_SIMPLE_EDGE), Reducer 30 (CUSTOM_SIMPLE_EDGE), Reducer 55 (CUSTOM_SIMPLE_EDGE), Union 6 (CONTAINS)
Reducer 18 <- Map 17 (SIMPLE_EDGE), Map 21 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 19 <- Map 17 (SIMPLE_EDGE), Map 21 (SIMPLE_EDGE), Union 10 (CONTAINS)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 86 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 20 <- Map 17 (SIMPLE_EDGE), Map 21 (SIMPLE_EDGE), Union 14 (CONTAINS)
Reducer 22 <- Map 21 (SIMPLE_EDGE), Map 43 (SIMPLE_EDGE), Union 23 (CONTAINS)
Reducer 24 <- Union 23 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Map 21 (SIMPLE_EDGE), Map 43 (SIMPLE_EDGE), Union 26 (CONTAINS)
Reducer 27 <- Union 26 (CUSTOM_SIMPLE_EDGE)
Reducer 28 <- Map 21 (SIMPLE_EDGE), Map 43 (SIMPLE_EDGE), Union 29 (CONTAINS)
Reducer 30 <- Union 29 (CUSTOM_SIMPLE_EDGE)
Reducer 32 <- Map 31 (SIMPLE_EDGE), Map 35 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 33 <- Map 31 (SIMPLE_EDGE), Map 35 (SIMPLE_EDGE), Union 10 (CONTAINS)
Reducer 34 <- Map 31 (SIMPLE_EDGE), Map 35 (SIMPLE_EDGE), Union 14 (CONTAINS)
Reducer 36 <- Map 35 (SIMPLE_EDGE), Map 44 (SIMPLE_EDGE), Union 23 (CONTAINS)
Reducer 37 <- Map 35 (SIMPLE_EDGE), Map 44 (SIMPLE_EDGE), Union 26 (CONTAINS)
Reducer 38 <- Map 35 (SIMPLE_EDGE), Map 44 (SIMPLE_EDGE), Union 29 (CONTAINS)
Reducer 4 <- Union 3 (CUSTOM_SIMPLE_EDGE)
Reducer 40 <- Map 39 (SIMPLE_EDGE), Map 86 (SIMPLE_EDGE), Union 23 (CONTAINS)
Reducer 41 <- Map 39 (SIMPLE_EDGE), Map 86 (SIMPLE_EDGE), Union 26 (CONTAINS)
Reducer 42 <- Map 39 (SIMPLE_EDGE), Map 86 (SIMPLE_EDGE), Union 29 (CONTAINS)
Reducer 46 <- Map 45 (SIMPLE_EDGE), Map 49 (SIMPLE_EDGE)
Reducer 47 <- Map 56 (SIMPLE_EDGE), Reducer 46 (SIMPLE_EDGE), Reducer 58 (ONE_TO_ONE_EDGE)
Reducer 48 <- Reducer 47 (SIMPLE_EDGE)
Reducer 5 <- Reducer 24 (CUSTOM_SIMPLE_EDGE), Reducer 4 (CUSTOM_SIMPLE_EDGE), Reducer 48 (CUSTOM_SIMPLE_EDGE), Union 6 (CONTAINS)
Reducer 50 <- Map 49 (SIMPLE_EDGE), Map 91 (SIMPLE_EDGE)
Reducer 51 <- Map 56 (SIMPLE_EDGE), Reducer 50 (SIMPLE_EDGE), Reducer 68 (ONE_TO_ONE_EDGE)
Reducer 52 <- Reducer 51 (SIMPLE_EDGE)
Reducer 53 <- Map 49 (SIMPLE_EDGE), Map 92 (SIMPLE_EDGE)
Reducer 54 <- Map 56 (SIMPLE_EDGE), Reducer 53 (SIMPLE_EDGE), Reducer 77 (ONE_TO_ONE_EDGE)
Reducer 55 <- Reducer 54 (SIMPLE_EDGE)
Reducer 57 <- Map 56 (SIMPLE_EDGE), Reducer 62 (ONE_TO_ONE_EDGE)
Reducer 58 <- Reducer 57 (SIMPLE_EDGE)
Reducer 59 <- Map 56 (SIMPLE_EDGE), Reducer 85 (SIMPLE_EDGE)
Reducer 60 <- Reducer 59 (SIMPLE_EDGE), Union 61 (CONTAINS)
Reducer 62 <- Union 61 (SIMPLE_EDGE)
Reducer 63 <- Map 56 (SIMPLE_EDGE), Reducer 87 (SIMPLE_EDGE)
Reducer 64 <- Reducer 63 (SIMPLE_EDGE), Union 61 (CONTAINS)
Reducer 65 <- Map 56 (SIMPLE_EDGE), Reducer 88 (SIMPLE_EDGE)
Reducer 66 <- Reducer 65 (SIMPLE_EDGE), Union 61 (CONTAINS)
Reducer 67 <- Map 56 (SIMPLE_EDGE), Reducer 72 (ONE_TO_ONE_EDGE)
Reducer 68 <- Reducer 67 (SIMPLE_EDGE)
Reducer 69 <- Map 56 (SIMPLE_EDGE), Reducer 85 (SIMPLE_EDGE)
Reducer 7 <- Union 6 (SIMPLE_EDGE)
Reducer 70 <- Reducer 69 (SIMPLE_EDGE), Union 71 (CONTAINS)
Reducer 72 <- Union 71 (SIMPLE_EDGE)
Reducer 73 <- Reducer 69 (SIMPLE_EDGE), Union 74 (CONTAINS)
Reducer 75 <- Union 74 (SIMPLE_EDGE)
Reducer 76 <- Map 56 (SIMPLE_EDGE), Reducer 75 (ONE_TO_ONE_EDGE)
Reducer 77 <- Reducer 76 (SIMPLE_EDGE)
Reducer 78 <- Map 56 (SIMPLE_EDGE), Reducer 87 (SIMPLE_EDGE)
Reducer 79 <- Reducer 78 (SIMPLE_EDGE), Union 71 (CONTAINS)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 80 <- Reducer 78 (SIMPLE_EDGE), Union 74 (CONTAINS)
Reducer 81 <- Map 56 (SIMPLE_EDGE), Reducer 88 (SIMPLE_EDGE)
Reducer 82 <- Reducer 81 (SIMPLE_EDGE), Union 71 (CONTAINS)
Reducer 83 <- Reducer 81 (SIMPLE_EDGE), Union 74 (CONTAINS)
Reducer 85 <- Map 84 (SIMPLE_EDGE), Map 86 (SIMPLE_EDGE)
Reducer 87 <- Map 86 (SIMPLE_EDGE), Map 89 (SIMPLE_EDGE)
Reducer 88 <- Map 86 (SIMPLE_EDGE), Map 90 (SIMPLE_EDGE)
Reducer 9 <- Map 1 (SIMPLE_EDGE), Map 86 (SIMPLE_EDGE), Union 10 (CONTAINS)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 8 vectorized
      File Output Operator [FS_1138]
        Limit [LIM_1137] (rows=100 width=237)
          Number of rows:100
          Select Operator [SEL_1136] (rows=1016388080 width=237)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 7 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_1135]
              Select Operator [SEL_1134] (rows=1016388080 width=237)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Group By Operator [GBY_1133] (rows=1016388080 width=237)
                  Output:["_col0","_col1","_col2","_col3","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                <-Union 6 [SIMPLE_EDGE]
                  <-Reducer 12 [CONTAINS]
                    Reduce Output Operator [RS_922]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_921] (rows=2032776160 width=237)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_920] (rows=406555232 width=237)
                          keys:_col0, _col1, _col2, _col3, 0L,sort order:+++++,top n:100
                          Select Operator [SEL_918] (rows=116155905 width=264)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_917] (rows=116155905 width=264)
                              predicate:(_col5 > _col1)
                              Merge Join Operator [MERGEJOIN_916] (rows=348467716 width=264)
                                Conds:(Inner),(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                              <-Reducer 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1144]
                                  Select Operator [SEL_1143] (rows=1 width=8)
                                    Filter Operator [FIL_1142] (rows=1 width=8)
                                      predicate:(sq_count_check(_col0) <= 1)
                                      Group By Operator [GBY_1141] (rows=1 width=8)
                                        Output:["_col0"],aggregations:["count()"]
                                        Select Operator [SEL_1140] (rows=1 width=8)
                                          Group By Operator [GBY_1139] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                          <-Union 10 [CUSTOM_SIMPLE_EDGE]
                                            <-Reducer 19 [CONTAINS]
                                              Reduce Output Operator [RS_947]
                                                Group By Operator [GBY_946] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(_col0)"]
                                                  Select Operator [SEL_945] (rows=1108786976 width=108)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_943] (rows=316788826 width=135)
                                                      Output:["_col0"]
                                                      Merge Join Operator [MERGEJOIN_942] (rows=316788826 width=135)
                                                        Conds:RS_1182._col0=RS_1188._col0(Inner),Output:["_col1"]
                                                      <-Map 21 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1188]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1185] (rows=8116 width=1119)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_1184] (rows=8116 width=1119)
                                                              predicate:(d_date_sk is not null and d_year BETWEEN 1998 AND 2000)
                                                              TableScan [TS_13] (rows=73049 width=1119)
                                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                                                      <-Map 17 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1182]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1180] (rows=287989836 width=135)
                                                            Output:["_col0","_col1"]
                                                            Filter Operator [FIL_1179] (rows=287989836 width=135)
                                                              predicate:cs_sold_date_sk is not null
                                                              TableScan [TS_10] (rows=287989836 width=135)
                                                                default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_quantity"]
                                            <-Reducer 33 [CONTAINS]
                                              Reduce Output Operator [RS_983]
                                                Group By Operator [GBY_982] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(_col0)"]
                                                  Select Operator [SEL_981] (rows=1108786976 width=108)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_979] (rows=158402938 width=135)
                                                      Output:["_col0"]
                                                      Merge Join Operator [MERGEJOIN_978] (rows=158402938 width=135)
                                                        Conds:RS_1200._col0=RS_1206._col0(Inner),Output:["_col1"]
                                                      <-Map 35 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1206]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1203] (rows=8116 width=1119)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_1202] (rows=8116 width=1119)
                                                              predicate:(d_date_sk is not null and d_year BETWEEN 1998 AND 2000)
                                                              TableScan [TS_24] (rows=73049 width=1119)
                                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                                                      <-Map 31 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1200]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1198] (rows=144002668 width=135)
                                                            Output:["_col0","_col1"]
                                                            Filter Operator [FIL_1197] (rows=144002668 width=135)
                                                              predicate:ws_sold_date_sk is not null
                                                              TableScan [TS_21] (rows=144002668 width=135)
                                                                default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_quantity"]
                                            <-Reducer 9 [CONTAINS]
                                              Reduce Output Operator [RS_915]
                                                Group By Operator [GBY_914] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(_col0)"]
                                                  Select Operator [SEL_913] (rows=1108786976 width=108)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_911] (rows=633595212 width=88)
                                                      Output:["_col0"]
                                                      Merge Join Operator [MERGEJOIN_910] (rows=633595212 width=88)
                                                        Conds:RS_1065._col0=RS_1074._col0(Inner),Output:["_col1"]
                                                      <-Map 86 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1074]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1068] (rows=8116 width=1119)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_1067] (rows=8116 width=1119)
                                                              predicate:(d_date_sk is not null and d_year BETWEEN 1999 AND 2001)
                                                              TableScan [TS_97] (rows=73049 width=1119)
                                                                default@date_dim,d1,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1065]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1063] (rows=575995635 width=88)
                                                            Output:["_col0","_col1"]
                                                            Filter Operator [FIL_1062] (rows=575995635 width=88)
                                                              predicate:ss_sold_date_sk is not null
                                                              TableScan [TS_0] (rows=575995635 width=88)
                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_quantity"]
                              <-Reducer 27 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1147]
                                  Select Operator [SEL_1146] (rows=1 width=120)
                                    Output:["_col0"]
                                    Group By Operator [GBY_1145] (rows=1 width=120)
                                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                    <-Union 26 [CUSTOM_SIMPLE_EDGE]
                                      <-Reducer 25 [CONTAINS]
                                        Reduce Output Operator [RS_965]
                                          Group By Operator [GBY_964] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_963] (rows=1108786976 width=108)
                                              Output:["_col0"]
                                              Select Operator [SEL_961] (rows=316788826 width=135)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_960] (rows=316788826 width=135)
                                                  Conds:RS_1195._col0=RS_1189._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 21 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1189]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1185]
                                                <-Map 43 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1195]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1193] (rows=287989836 width=135)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_1192] (rows=287989836 width=135)
                                                        predicate:cs_sold_date_sk is not null
                                                        TableScan [TS_55] (rows=287989836 width=135)
                                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_quantity","cs_list_price"]
                                      <-Reducer 37 [CONTAINS]
                                        Reduce Output Operator [RS_1001]
                                          Group By Operator [GBY_1000] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_999] (rows=1108786976 width=108)
                                              Output:["_col0"]
                                              Select Operator [SEL_997] (rows=158402938 width=135)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_996] (rows=158402938 width=135)
                                                  Conds:RS_1213._col0=RS_1207._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 35 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1207]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1203]
                                                <-Map 44 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1213]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1211] (rows=144002668 width=135)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_1210] (rows=144002668 width=135)
                                                        predicate:ws_sold_date_sk is not null
                                                        TableScan [TS_66] (rows=144002668 width=135)
                                                          default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_quantity","ws_list_price"]
                                      <-Reducer 41 [CONTAINS]
                                        Reduce Output Operator [RS_1019]
                                          Group By Operator [GBY_1018] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_1017] (rows=1108786976 width=108)
                                              Output:["_col0"]
                                              Select Operator [SEL_1015] (rows=633595212 width=88)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_1014] (rows=633595212 width=88)
                                                  Conds:RS_1218._col0=RS_1075._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 86 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1075]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1068]
                                                <-Map 39 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1218]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1216] (rows=575995635 width=88)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_1215] (rows=575995635 width=88)
                                                        predicate:ss_sold_date_sk is not null
                                                        TableScan [TS_45] (rows=575995635 width=88)
                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_quantity","ss_list_price"]
                              <-Reducer 52 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1158]
                                  Group By Operator [GBY_1157] (rows=348467716 width=135)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 51 [SIMPLE_EDGE]
                                    SHUFFLE [RS_369]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_368] (rows=696935432 width=135)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                        Select Operator [SEL_366] (rows=696935432 width=135)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Merge Join Operator [MERGEJOIN_878] (rows=696935432 width=135)
                                            Conds:RS_362._col1=RS_1122._col0(Inner),RS_362._col1=RS_1156._col0(Inner),Output:["_col2","_col3","_col8","_col9","_col10"]
                                          <-Map 56 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_1122]
                                              PartitionCols:_col0
                                              Select Operator [SEL_1110] (rows=462000 width=1436)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                Filter Operator [FIL_1101] (rows=462000 width=1436)
                                                  predicate:i_item_sk is not null
                                                  TableScan [TS_91] (rows=462000 width=1436)
                                                    default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                          <-Reducer 50 [SIMPLE_EDGE]
                                            SHUFFLE [RS_362]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_870] (rows=316788826 width=135)
                                                Conds:RS_1150._col0=RS_1093._col0(Inner),Output:["_col1","_col2","_col3"]
                                              <-Map 49 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1093]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_1091] (rows=18262 width=1119)
                                                    Output:["_col0"]
                                                    Filter Operator [FIL_1090] (rows=18262 width=1119)
                                                      predicate:((d_moy = 11) and (d_year = 2000) and d_date_sk is not null)
                                                      TableScan [TS_85] (rows=73049 width=1119)
                                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_moy"]
                                              <-Map 91 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1150]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_1149] (rows=287989836 width=135)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_1148] (rows=287989836 width=135)
                                                      predicate:(cs_item_sk is not null and cs_sold_date_sk is not null)
                                                      TableScan [TS_271] (rows=287989836 width=135)
                                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                          <-Reducer 68 [ONE_TO_ONE_EDGE] vectorized
                                            FORWARD [RS_1156]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_1155] (rows=254100 width=1436)
                                                Output:["_col0"],keys:KEY._col0
                                              <-Reducer 67 [SIMPLE_EDGE]
                                                SHUFFLE [RS_356]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_355] (rows=508200 width=1436)
                                                    Output:["_col0"],keys:_col0
                                                    Merge Join Operator [MERGEJOIN_877] (rows=508200 width=1436)
                                                      Conds:RS_1118._col1, _col2, _col3=RS_1154._col0, _col1, _col2(Inner),Output:["_col0"]
                                                    <-Map 56 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1118]
                                                        PartitionCols:_col1, _col2, _col3
                                                        Select Operator [SEL_1106] (rows=462000 width=1436)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1097] (rows=462000 width=1436)
                                                            predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                             Please refer to the previous TableScan [TS_91]
                                                    <-Reducer 72 [ONE_TO_ONE_EDGE] vectorized
                                                      FORWARD [RS_1154]
                                                        PartitionCols:_col0, _col1, _col2
                                                        Select Operator [SEL_1153] (rows=1 width=108)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1152] (rows=1 width=108)
                                                            predicate:(_col3 = 3L)
                                                            Group By Operator [GBY_1151] (rows=304916424 width=108)
                                                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                            <-Union 71 [SIMPLE_EDGE]
                                                              <-Reducer 70 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1240]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1239] (rows=609832849 width=108)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1238] (rows=348477374 width=88)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 69 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_300]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                        Group By Operator [GBY_299] (rows=696954748 width=88)
                                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col5, _col6, _col7
                                                                          Merge Join Operator [MERGEJOIN_872] (rows=696954748 width=88)
                                                                            Conds:RS_295._col1=RS_1119._col0(Inner),Output:["_col5","_col6","_col7"]
                                                                          <-Map 56 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1119]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1107] (rows=462000 width=1436)
                                                                                Output:["_col0","_col1","_col2","_col3"]
                                                                                Filter Operator [FIL_1098] (rows=462000 width=1436)
                                                                                  predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                   Please refer to the previous TableScan [TS_91]
                                                                          <-Reducer 85 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_295]
                                                                              PartitionCols:_col1
                                                                              Merge Join Operator [MERGEJOIN_856] (rows=633595212 width=88)
                                                                                Conds:RS_1222._col0=RS_1069._col0(Inner),Output:["_col1"]
                                                                              <-Map 86 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1069]
                                                                                  PartitionCols:_col0
                                                                                   Please refer to the previous Select Operator [SEL_1068]
                                                                              <-Map 84 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1222]
                                                                                  PartitionCols:_col0
                                                                                  Select Operator [SEL_1221] (rows=575995635 width=88)
                                                                                    Output:["_col0","_col1"]
                                                                                    Filter Operator [FIL_1220] (rows=575995635 width=88)
                                                                                      predicate:(ss_item_sk is not null and ss_sold_date_sk is not null)
                                                                                      TableScan [TS_94] (rows=575995635 width=88)
                                                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                              <-Reducer 79 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1246]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1245] (rows=609832849 width=108)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1244] (rows=174233858 width=135)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 78 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_320]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                        Group By Operator [GBY_319] (rows=348467716 width=135)
                                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col5, _col6, _col7
                                                                          Merge Join Operator [MERGEJOIN_874] (rows=348467716 width=135)
                                                                            Conds:RS_315._col1=RS_1120._col0(Inner),Output:["_col5","_col6","_col7"]
                                                                          <-Map 56 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1120]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1108] (rows=462000 width=1436)
                                                                                Output:["_col0","_col1","_col2","_col3"]
                                                                                Filter Operator [FIL_1099] (rows=462000 width=1436)
                                                                                  predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                   Please refer to the previous TableScan [TS_91]
                                                                          <-Reducer 87 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_315]
                                                                              PartitionCols:_col1
                                                                              Merge Join Operator [MERGEJOIN_858] (rows=316788826 width=135)
                                                                                Conds:RS_1228._col0=RS_1070._col0(Inner),Output:["_col1"]
                                                                              <-Map 86 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1070]
                                                                                  PartitionCols:_col0
                                                                                   Please refer to the previous Select Operator [SEL_1068]
                                                                              <-Map 89 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1228]
                                                                                  PartitionCols:_col0
                                                                                  Select Operator [SEL_1227] (rows=287989836 width=135)
                                                                                    Output:["_col0","_col1"]
                                                                                    Filter Operator [FIL_1226] (rows=287989836 width=135)
                                                                                      predicate:(cs_item_sk is not null and cs_sold_date_sk is not null)
                                                                                      TableScan [TS_114] (rows=287989836 width=135)
                                                                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_item_sk"]
                                                              <-Reducer 82 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1252]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1251] (rows=609832849 width=108)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1250] (rows=87121617 width=135)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 81 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_341]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                        Group By Operator [GBY_340] (rows=174243235 width=135)
                                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col5, _col6, _col7
                                                                          Merge Join Operator [MERGEJOIN_876] (rows=174243235 width=135)
                                                                            Conds:RS_336._col1=RS_1121._col0(Inner),Output:["_col5","_col6","_col7"]
                                                                          <-Map 56 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1121]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1109] (rows=462000 width=1436)
                                                                                Output:["_col0","_col1","_col2","_col3"]
                                                                                Filter Operator [FIL_1100] (rows=462000 width=1436)
                                                                                  predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                   Please refer to the previous TableScan [TS_91]
                                                                          <-Reducer 88 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_336]
                                                                              PartitionCols:_col1
                                                                              Merge Join Operator [MERGEJOIN_860] (rows=158402938 width=135)
                                                                                Conds:RS_1234._col0=RS_1071._col0(Inner),Output:["_col1"]
                                                                              <-Map 86 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1071]
                                                                                  PartitionCols:_col0
                                                                                   Please refer to the previous Select Operator [SEL_1068]
                                                                              <-Map 90 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1234]
                                                                                  PartitionCols:_col0
                                                                                  Select Operator [SEL_1233] (rows=144002668 width=135)
                                                                                    Output:["_col0","_col1"]
                                                                                    Filter Operator [FIL_1232] (rows=144002668 width=135)
                                                                                      predicate:(ws_item_sk is not null and ws_sold_date_sk is not null)
                                                                                      TableScan [TS_135] (rows=144002668 width=135)
                                                                                        default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_item_sk"]
                  <-Reducer 16 [CONTAINS]
                    Reduce Output Operator [RS_935]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_934] (rows=2032776160 width=237)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_933] (rows=406555232 width=237)
                          keys:_col0, _col1, _col2, _col3, 0L,sort order:+++++,top n:100
                          Select Operator [SEL_931] (rows=58081078 width=264)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_930] (rows=58081078 width=264)
                              predicate:(_col5 > _col1)
                              Merge Join Operator [MERGEJOIN_929] (rows=174243235 width=264)
                                Conds:(Inner),(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                              <-Reducer 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1164]
                                  Select Operator [SEL_1163] (rows=1 width=8)
                                    Filter Operator [FIL_1162] (rows=1 width=8)
                                      predicate:(sq_count_check(_col0) <= 1)
                                      Group By Operator [GBY_1161] (rows=1 width=8)
                                        Output:["_col0"],aggregations:["count()"]
                                        Select Operator [SEL_1160] (rows=1 width=8)
                                          Group By Operator [GBY_1159] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                          <-Union 14 [CUSTOM_SIMPLE_EDGE]
                                            <-Reducer 13 [CONTAINS]
                                              Reduce Output Operator [RS_928]
                                                Group By Operator [GBY_927] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(_col0)"]
                                                  Select Operator [SEL_926] (rows=1108786976 width=108)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_924] (rows=633595212 width=88)
                                                      Output:["_col0"]
                                                      Merge Join Operator [MERGEJOIN_923] (rows=633595212 width=88)
                                                        Conds:RS_1066._col0=RS_1076._col0(Inner),Output:["_col1"]
                                                      <-Map 86 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1076]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1068]
                                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1066]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1063]
                                            <-Reducer 20 [CONTAINS]
                                              Reduce Output Operator [RS_953]
                                                Group By Operator [GBY_952] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(_col0)"]
                                                  Select Operator [SEL_951] (rows=1108786976 width=108)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_949] (rows=316788826 width=135)
                                                      Output:["_col0"]
                                                      Merge Join Operator [MERGEJOIN_948] (rows=316788826 width=135)
                                                        Conds:RS_1183._col0=RS_1190._col0(Inner),Output:["_col1"]
                                                      <-Map 21 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1190]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1185]
                                                      <-Map 17 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1183]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1180]
                                            <-Reducer 34 [CONTAINS]
                                              Reduce Output Operator [RS_989]
                                                Group By Operator [GBY_988] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(_col0)"]
                                                  Select Operator [SEL_987] (rows=1108786976 width=108)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_985] (rows=158402938 width=135)
                                                      Output:["_col0"]
                                                      Merge Join Operator [MERGEJOIN_984] (rows=158402938 width=135)
                                                        Conds:RS_1201._col0=RS_1208._col0(Inner),Output:["_col1"]
                                                      <-Map 35 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1208]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1203]
                                                      <-Map 31 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1201]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1198]
                              <-Reducer 30 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1167]
                                  Select Operator [SEL_1166] (rows=1 width=120)
                                    Output:["_col0"]
                                    Group By Operator [GBY_1165] (rows=1 width=120)
                                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                    <-Union 29 [CUSTOM_SIMPLE_EDGE]
                                      <-Reducer 28 [CONTAINS]
                                        Reduce Output Operator [RS_971]
                                          Group By Operator [GBY_970] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_969] (rows=1108786976 width=108)
                                              Output:["_col0"]
                                              Select Operator [SEL_967] (rows=316788826 width=135)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_966] (rows=316788826 width=135)
                                                  Conds:RS_1196._col0=RS_1191._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 21 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1191]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1185]
                                                <-Map 43 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1196]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1193]
                                      <-Reducer 38 [CONTAINS]
                                        Reduce Output Operator [RS_1007]
                                          Group By Operator [GBY_1006] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_1005] (rows=1108786976 width=108)
                                              Output:["_col0"]
                                              Select Operator [SEL_1003] (rows=158402938 width=135)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_1002] (rows=158402938 width=135)
                                                  Conds:RS_1214._col0=RS_1209._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 35 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1209]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1203]
                                                <-Map 44 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1214]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1211]
                                      <-Reducer 42 [CONTAINS]
                                        Reduce Output Operator [RS_1025]
                                          Group By Operator [GBY_1024] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_1023] (rows=1108786976 width=108)
                                              Output:["_col0"]
                                              Select Operator [SEL_1021] (rows=633595212 width=88)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_1020] (rows=633595212 width=88)
                                                  Conds:RS_1219._col0=RS_1077._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 86 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1077]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1068]
                                                <-Map 39 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1219]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1216]
                              <-Reducer 55 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1178]
                                  Group By Operator [GBY_1177] (rows=174243235 width=135)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 54 [SIMPLE_EDGE]
                                    SHUFFLE [RS_559]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_558] (rows=348486471 width=135)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                        Select Operator [SEL_556] (rows=348486471 width=135)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Merge Join Operator [MERGEJOIN_893] (rows=348486471 width=135)
                                            Conds:RS_552._col1=RS_1124._col0(Inner),RS_552._col1=RS_1176._col0(Inner),Output:["_col2","_col3","_col8","_col9","_col10"]
                                          <-Map 56 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_1124]
                                              PartitionCols:_col0
                                              Select Operator [SEL_1112] (rows=462000 width=1436)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                Filter Operator [FIL_1103] (rows=462000 width=1436)
                                                  predicate:i_item_sk is not null
                                                   Please refer to the previous TableScan [TS_91]
                                          <-Reducer 53 [SIMPLE_EDGE]
                                            SHUFFLE [RS_552]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_885] (rows=158402938 width=135)
                                                Conds:RS_1170._col0=RS_1094._col0(Inner),Output:["_col1","_col2","_col3"]
                                              <-Map 49 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1094]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_1091]
                                              <-Map 92 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1170]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_1169] (rows=144002668 width=135)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_1168] (rows=144002668 width=135)
                                                      predicate:(ws_item_sk is not null and ws_sold_date_sk is not null)
                                                      TableScan [TS_461] (rows=144002668 width=135)
                                                        default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_item_sk","ws_quantity","ws_list_price"]
                                          <-Reducer 77 [ONE_TO_ONE_EDGE] vectorized
                                            FORWARD [RS_1176]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_1175] (rows=254100 width=1436)
                                                Output:["_col0"],keys:KEY._col0
                                              <-Reducer 76 [SIMPLE_EDGE]
                                                SHUFFLE [RS_546]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_545] (rows=508200 width=1436)
                                                    Output:["_col0"],keys:_col0
                                                    Merge Join Operator [MERGEJOIN_892] (rows=508200 width=1436)
                                                      Conds:RS_1123._col1, _col2, _col3=RS_1174._col0, _col1, _col2(Inner),Output:["_col0"]
                                                    <-Map 56 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1123]
                                                        PartitionCols:_col1, _col2, _col3
                                                        Select Operator [SEL_1111] (rows=462000 width=1436)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1102] (rows=462000 width=1436)
                                                            predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                             Please refer to the previous TableScan [TS_91]
                                                    <-Reducer 75 [ONE_TO_ONE_EDGE] vectorized
                                                      FORWARD [RS_1174]
                                                        PartitionCols:_col0, _col1, _col2
                                                        Select Operator [SEL_1173] (rows=1 width=108)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1172] (rows=1 width=108)
                                                            predicate:(_col3 = 3L)
                                                            Group By Operator [GBY_1171] (rows=304916424 width=108)
                                                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                            <-Union 74 [SIMPLE_EDGE]
                                                              <-Reducer 73 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1243]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1242] (rows=609832849 width=108)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1241] (rows=348477374 width=88)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 69 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_490]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                         Please refer to the previous Group By Operator [GBY_299]
                                                              <-Reducer 80 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1249]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1248] (rows=609832849 width=108)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1247] (rows=174233858 width=135)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 78 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_510]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                         Please refer to the previous Group By Operator [GBY_319]
                                                              <-Reducer 83 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1255]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1254] (rows=609832849 width=108)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1253] (rows=87121617 width=135)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 81 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_531]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                         Please refer to the previous Group By Operator [GBY_340]
                  <-Reducer 5 [CONTAINS]
                    Reduce Output Operator [RS_909]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_908] (rows=2032776160 width=237)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_907] (rows=406555232 width=237)
                          keys:_col0, _col1, _col2, _col3, 0L,sort order:+++++,top n:100
                          Select Operator [SEL_905] (rows=232318249 width=217)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_904] (rows=232318249 width=217)
                              predicate:(_col5 > _col1)
                              Merge Join Operator [MERGEJOIN_903] (rows=696954748 width=217)
                                Conds:(Inner),(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                              <-Reducer 24 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1086]
                                  Select Operator [SEL_1085] (rows=1 width=120)
                                    Output:["_col0"]
                                    Group By Operator [GBY_1084] (rows=1 width=120)
                                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                    <-Union 23 [CUSTOM_SIMPLE_EDGE]
                                      <-Reducer 22 [CONTAINS]
                                        Reduce Output Operator [RS_959]
                                          Group By Operator [GBY_958] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_957] (rows=1108786976 width=108)
                                              Output:["_col0"]
                                              Select Operator [SEL_955] (rows=316788826 width=135)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_954] (rows=316788826 width=135)
                                                  Conds:RS_1194._col0=RS_1187._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 21 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1187]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1185]
                                                <-Map 43 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1194]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1193]
                                      <-Reducer 36 [CONTAINS]
                                        Reduce Output Operator [RS_995]
                                          Group By Operator [GBY_994] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_993] (rows=1108786976 width=108)
                                              Output:["_col0"]
                                              Select Operator [SEL_991] (rows=158402938 width=135)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_990] (rows=158402938 width=135)
                                                  Conds:RS_1212._col0=RS_1205._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 35 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1205]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1203]
                                                <-Map 44 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1212]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1211]
                                      <-Reducer 40 [CONTAINS]
                                        Reduce Output Operator [RS_1013]
                                          Group By Operator [GBY_1012] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_1011] (rows=1108786976 width=108)
                                              Output:["_col0"]
                                              Select Operator [SEL_1009] (rows=633595212 width=88)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_1008] (rows=633595212 width=88)
                                                  Conds:RS_1217._col0=RS_1073._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 86 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1073]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1068]
                                                <-Map 39 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1217]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1216]
                              <-Reducer 4 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1083]
                                  Select Operator [SEL_1082] (rows=1 width=8)
                                    Filter Operator [FIL_1081] (rows=1 width=8)
                                      predicate:(sq_count_check(_col0) <= 1)
                                      Group By Operator [GBY_1080] (rows=1 width=8)
                                        Output:["_col0"],aggregations:["count()"]
                                        Select Operator [SEL_1079] (rows=1 width=8)
                                          Group By Operator [GBY_1078] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                          <-Union 3 [CUSTOM_SIMPLE_EDGE]
                                            <-Reducer 18 [CONTAINS]
                                              Reduce Output Operator [RS_941]
                                                Group By Operator [GBY_940] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(_col0)"]
                                                  Select Operator [SEL_939] (rows=1108786976 width=108)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_937] (rows=316788826 width=135)
                                                      Output:["_col0"]
                                                      Merge Join Operator [MERGEJOIN_936] (rows=316788826 width=135)
                                                        Conds:RS_1181._col0=RS_1186._col0(Inner),Output:["_col1"]
                                                      <-Map 21 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1186]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1185]
                                                      <-Map 17 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1181]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1180]
                                            <-Reducer 2 [CONTAINS]
                                              Reduce Output Operator [RS_902]
                                                Group By Operator [GBY_901] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(_col0)"]
                                                  Select Operator [SEL_900] (rows=1108786976 width=108)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_898] (rows=633595212 width=88)
                                                      Output:["_col0"]
                                                      Merge Join Operator [MERGEJOIN_897] (rows=633595212 width=88)
                                                        Conds:RS_1064._col0=RS_1072._col0(Inner),Output:["_col1"]
                                                      <-Map 86 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1072]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1068]
                                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1064]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1063]
                                            <-Reducer 32 [CONTAINS]
                                              Reduce Output Operator [RS_977]
                                                Group By Operator [GBY_976] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(_col0)"]
                                                  Select Operator [SEL_975] (rows=1108786976 width=108)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_973] (rows=158402938 width=135)
                                                      Output:["_col0"]
                                                      Merge Join Operator [MERGEJOIN_972] (rows=158402938 width=135)
                                                        Conds:RS_1199._col0=RS_1204._col0(Inner),Output:["_col1"]
                                                      <-Map 35 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1204]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1203]
                                                      <-Map 31 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1199]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1198]
                              <-Reducer 48 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1132]
                                  Group By Operator [GBY_1131] (rows=696954748 width=88)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 47 [SIMPLE_EDGE]
                                    SHUFFLE [RS_180]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_179] (rows=1393909496 width=88)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                        Select Operator [SEL_177] (rows=1393909496 width=88)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Merge Join Operator [MERGEJOIN_863] (rows=1393909496 width=88)
                                            Conds:RS_173._col1=RS_1117._col0(Inner),RS_173._col1=RS_1130._col0(Inner),Output:["_col2","_col3","_col8","_col9","_col10"]
                                          <-Map 56 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_1117]
                                              PartitionCols:_col0
                                              Select Operator [SEL_1105] (rows=462000 width=1436)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                Filter Operator [FIL_1096] (rows=462000 width=1436)
                                                  predicate:i_item_sk is not null
                                                   Please refer to the previous TableScan [TS_91]
                                          <-Reducer 46 [SIMPLE_EDGE]
                                            SHUFFLE [RS_173]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_855] (rows=633595212 width=88)
                                                Conds:RS_1089._col0=RS_1092._col0(Inner),Output:["_col1","_col2","_col3"]
                                              <-Map 49 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1092]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_1091]
                                              <-Map 45 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1089]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_1088] (rows=575995635 width=88)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_1087] (rows=575995635 width=88)
                                                      predicate:(ss_item_sk is not null and ss_sold_date_sk is not null)
                                                      TableScan [TS_82] (rows=575995635 width=88)
                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                          <-Reducer 58 [ONE_TO_ONE_EDGE] vectorized
                                            FORWARD [RS_1130]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_1129] (rows=254100 width=1436)
                                                Output:["_col0"],keys:KEY._col0
                                              <-Reducer 57 [SIMPLE_EDGE]
                                                SHUFFLE [RS_167]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_166] (rows=508200 width=1436)
                                                    Output:["_col0"],keys:_col0
                                                    Merge Join Operator [MERGEJOIN_862] (rows=508200 width=1436)
                                                      Conds:RS_1113._col1, _col2, _col3=RS_1128._col0, _col1, _col2(Inner),Output:["_col0"]
                                                    <-Map 56 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1113]
                                                        PartitionCols:_col1, _col2, _col3
                                                        Select Operator [SEL_1104] (rows=462000 width=1436)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1095] (rows=462000 width=1436)
                                                            predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                             Please refer to the previous TableScan [TS_91]
                                                    <-Reducer 62 [ONE_TO_ONE_EDGE] vectorized
                                                      FORWARD [RS_1128]
                                                        PartitionCols:_col0, _col1, _col2
                                                        Select Operator [SEL_1127] (rows=1 width=108)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1126] (rows=1 width=108)
                                                            predicate:(_col3 = 3L)
                                                            Group By Operator [GBY_1125] (rows=304916424 width=108)
                                                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                            <-Union 61 [SIMPLE_EDGE]
                                                              <-Reducer 60 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1225]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1224] (rows=609832849 width=108)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1223] (rows=348477374 width=88)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 59 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_111]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                        Group By Operator [GBY_110] (rows=696954748 width=88)
                                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col5, _col6, _col7
                                                                          Merge Join Operator [MERGEJOIN_857] (rows=696954748 width=88)
                                                                            Conds:RS_106._col1=RS_1114._col0(Inner),Output:["_col5","_col6","_col7"]
                                                                          <-Map 56 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1114]
                                                                              PartitionCols:_col0
                                                                               Please refer to the previous Select Operator [SEL_1104]
                                                                          <-Reducer 85 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_106]
                                                                              PartitionCols:_col1
                                                                               Please refer to the previous Merge Join Operator [MERGEJOIN_856]
                                                              <-Reducer 64 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1231]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1230] (rows=609832849 width=108)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1229] (rows=174233858 width=135)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 63 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_131]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                        Group By Operator [GBY_130] (rows=348467716 width=135)
                                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col5, _col6, _col7
                                                                          Merge Join Operator [MERGEJOIN_859] (rows=348467716 width=135)
                                                                            Conds:RS_126._col1=RS_1115._col0(Inner),Output:["_col5","_col6","_col7"]
                                                                          <-Map 56 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1115]
                                                                              PartitionCols:_col0
                                                                               Please refer to the previous Select Operator [SEL_1104]
                                                                          <-Reducer 87 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_126]
                                                                              PartitionCols:_col1
                                                                               Please refer to the previous Merge Join Operator [MERGEJOIN_858]
                                                              <-Reducer 66 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1237]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1236] (rows=609832849 width=108)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1235] (rows=87121617 width=135)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 65 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_152]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                        Group By Operator [GBY_151] (rows=174243235 width=135)
                                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col5, _col6, _col7
                                                                          Merge Join Operator [MERGEJOIN_861] (rows=174243235 width=135)
                                                                            Conds:RS_147._col1=RS_1116._col0(Inner),Output:["_col5","_col6","_col7"]
                                                                          <-Map 56 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1116]
                                                                              PartitionCols:_col0
                                                                               Please refer to the previous Select Operator [SEL_1104]
                                                                          <-Reducer 88 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_147]
                                                                              PartitionCols:_col1
                                                                               Please refer to the previous Merge Join Operator [MERGEJOIN_860]

