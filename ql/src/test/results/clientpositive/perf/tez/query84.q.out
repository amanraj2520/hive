PREHOOK: query: explain
select  c_customer_id as customer_id
       ,c_last_name || ', ' || c_first_name as customername
 from customer
     ,customer_address
     ,customer_demographics
     ,household_demographics
     ,income_band
     ,store_returns
 where ca_city	        =  'Hopewell'
   and c_current_addr_sk = ca_address_sk
   and ib_lower_bound   >=  32287
   and ib_upper_bound   <=  32287 + 50000
   and ib_income_band_sk = hd_income_band_sk
   and cd_demo_sk = c_current_cdemo_sk
   and hd_demo_sk = c_current_hdemo_sk
   and sr_cdemo_sk = cd_demo_sk
 order by c_customer_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@income_band
PREHOOK: Input: default@store_returns
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  c_customer_id as customer_id
       ,c_last_name || ', ' || c_first_name as customername
 from customer
     ,customer_address
     ,customer_demographics
     ,household_demographics
     ,income_band
     ,store_returns
 where ca_city	        =  'Hopewell'
   and c_current_addr_sk = ca_address_sk
   and ib_lower_bound   >=  32287
   and ib_upper_bound   <=  32287 + 50000
   and ib_income_band_sk = hd_income_band_sk
   and cd_demo_sk = c_current_cdemo_sk
   and hd_demo_sk = c_current_hdemo_sk
   and sr_cdemo_sk = cd_demo_sk
 order by c_customer_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@income_band
POSTHOOK: Input: default@store_returns
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 5 <- Map 6 (BROADCAST_EDGE), Map 7 (BROADCAST_EDGE)
Map 7 <- Map 8 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE), Map 5 (BROADCAST_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 3 vectorized
      File Output Operator [FS_95]
        Limit [LIM_94] (rows=100 width=384)
          Number of rows:100
          Select Operator [SEL_93] (rows=264534 width=384)
            Output:["_col0","_col1"]
          <-Reducer 2 [SIMPLE_EDGE]
            SHUFFLE [RS_36]
              Select Operator [SEL_35] (rows=264534 width=384)
                Output:["_col1","_col2"]
                Map Join Operator [MAPJOIN_67] (rows=264534 width=280)
                  Conds:MERGEJOIN_63._col1=RS_92._col1(Inner),HybridGraceHashJoin:true,Output:["_col2","_col6","_col7"]
                <-Map 5 [BROADCAST_EDGE] vectorized
                  BROADCAST [RS_92]
                    PartitionCols:_col1
                    Map Join Operator [MAPJOIN_91] (rows=8315 width=280)
                      Conds:MAPJOIN_90._col2=RS_87._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col4","_col5"]
                    <-Map 7 [BROADCAST_EDGE] vectorized
                      BROADCAST [RS_87]
                        PartitionCols:_col0
                        Map Join Operator [MAPJOIN_86] (rows=721 width=4)
                          Conds:SEL_85._col1=RS_83._col0(Inner),HybridGraceHashJoin:true,Output:["_col0"]
                        <-Map 8 [BROADCAST_EDGE] vectorized
                          BROADCAST [RS_83]
                            PartitionCols:_col0
                            Select Operator [SEL_82] (rows=2 width=12)
                              Output:["_col0"]
                              Filter Operator [FIL_81] (rows=2 width=12)
                                predicate:((ib_lower_bound >= 32287) and (ib_upper_bound <= 82287) and ib_income_band_sk is not null)
                                TableScan [TS_15] (rows=20 width=12)
                                  default@income_band,income_band,Tbl:COMPLETE,Col:COMPLETE,Output:["ib_income_band_sk","ib_lower_bound","ib_upper_bound"]
                        <-Select Operator [SEL_85] (rows=7200 width=8)
                            Output:["_col0","_col1"]
                            Filter Operator [FIL_84] (rows=7200 width=8)
                              predicate:(hd_demo_sk is not null and hd_income_band_sk is not null)
                              TableScan [TS_12] (rows=7200 width=8)
                                default@household_demographics,household_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_income_band_sk"]
                    <-Map Join Operator [MAPJOIN_90] (rows=83148 width=280)
                        Conds:SEL_89._col3=RS_80._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col2","_col4","_col5"]
                      <-Map 6 [BROADCAST_EDGE] vectorized
                        BROADCAST [RS_80]
                          PartitionCols:_col0
                          Select Operator [SEL_79] (rows=44643 width=96)
                            Output:["_col0"]
                            Filter Operator [FIL_78] (rows=44643 width=97)
                              predicate:((ca_city = 'Hopewell') and ca_address_sk is not null)
                              TableScan [TS_9] (rows=40000000 width=97)
                                default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_city"]
                      <-Select Operator [SEL_89] (rows=74500295 width=291)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                          Filter Operator [FIL_88] (rows=74500295 width=291)
                            predicate:(c_current_addr_sk is not null and c_current_cdemo_sk is not null and c_current_hdemo_sk is not null)
                            TableScan [TS_6] (rows=80000000 width=291)
                              default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_id","c_current_cdemo_sk","c_current_hdemo_sk","c_current_addr_sk","c_first_name","c_last_name"]
                <-Merge Join Operator [MERGEJOIN_63] (rows=56363634 width=4)
                    Conds:RS_74._col0=RS_77._col0(Inner),Output:["_col1"]
                  <-Map 1 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_74]
                      PartitionCols:_col0
                      Select Operator [SEL_73] (rows=55577698 width=3)
                        Output:["_col0"]
                        Filter Operator [FIL_72] (rows=55577698 width=3)
                          predicate:sr_cdemo_sk is not null
                          TableScan [TS_0] (rows=57591150 width=3)
                            default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_cdemo_sk"]
                  <-Map 4 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_77]
                      PartitionCols:_col0
                      Select Operator [SEL_76] (rows=1861800 width=4)
                        Output:["_col0"]
                        Filter Operator [FIL_75] (rows=1861800 width=4)
                          predicate:cd_demo_sk is not null
                          TableScan [TS_3] (rows=1861800 width=4)
                            default@customer_demographics,customer_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk"]

